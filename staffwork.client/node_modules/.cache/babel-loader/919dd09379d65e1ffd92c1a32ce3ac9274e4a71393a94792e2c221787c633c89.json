{"ast":null,"code":"import Node from './Node.js';\nimport VaryingNode from './VaryingNode.js';\nclass AttributeNode extends Node {\n  constructor(attributeName) {\n    let nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super(nodeType);\n    this._attributeName = attributeName;\n  }\n  getHash(builder) {\n    return this.getAttributeName(builder);\n  }\n  getNodeType(builder) {\n    const attributeName = this.getAttributeName(builder);\n    let nodeType = super.getNodeType(builder);\n    if (nodeType === null) {\n      if (builder.hasGeometryAttribute(attributeName)) {\n        const attribute = builder.geometry.getAttribute(attributeName);\n        nodeType = builder.getTypeFromLength(attribute.itemSize);\n      } else {\n        nodeType = 'float';\n      }\n    }\n    return nodeType;\n  }\n  setAttributeName(attributeName) {\n    this._attributeName = attributeName;\n    return this;\n  }\n  getAttributeName( /*builder*/\n  ) {\n    return this._attributeName;\n  }\n  generate(builder) {\n    const attributeName = this.getAttributeName(builder);\n    const nodeType = this.getNodeType(builder);\n    const geometryAttribute = builder.hasGeometryAttribute(attributeName);\n    if (geometryAttribute === true) {\n      const nodeAttribute = builder.getAttribute(attributeName, nodeType);\n      if (builder.isShaderStage('vertex')) {\n        return nodeAttribute.name;\n      } else {\n        const nodeVarying = new VaryingNode(this);\n        return nodeVarying.build(builder, nodeAttribute.type);\n      }\n    } else {\n      console.warn(`Attribute \"${attributeName}\" not found.`);\n      return builder.getConst(nodeType);\n    }\n  }\n}\nexport default AttributeNode;","map":{"version":3,"names":["Node","VaryingNode","AttributeNode","constructor","attributeName","nodeType","_attributeName","getHash","builder","getAttributeName","getNodeType","hasGeometryAttribute","attribute","geometry","getAttribute","getTypeFromLength","itemSize","setAttributeName","generate","geometryAttribute","nodeAttribute","isShaderStage","name","nodeVarying","build","type","console","warn","getConst"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/core/AttributeNode.js"],"sourcesContent":["import Node from './Node.js';\nimport VaryingNode from './VaryingNode.js';\n\nclass AttributeNode extends Node {\n\n\tconstructor( attributeName, nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\tthis._attributeName = attributeName;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.getAttributeName( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst attributeName = this.getAttributeName( builder );\n\n\t\tlet nodeType = super.getNodeType( builder );\n\n\t\tif ( nodeType === null ) {\n\n\t\t\tif ( builder.hasGeometryAttribute( attributeName ) ) {\n\n\t\t\t\tconst attribute = builder.geometry.getAttribute( attributeName );\n\n\t\t\t\tnodeType = builder.getTypeFromLength( attribute.itemSize );\n\n\t\t\t} else {\n\n\t\t\t\tnodeType = 'float';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodeType;\n\n\t}\n\n\tsetAttributeName( attributeName ) {\n\n\t\tthis._attributeName = attributeName;\n\n\t\treturn this;\n\n\t}\n\n\tgetAttributeName( /*builder*/ ) {\n\n\t\treturn this._attributeName;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst attributeName = this.getAttributeName( builder );\n\t\tconst nodeType = this.getNodeType( builder );\n\t\tconst geometryAttribute = builder.hasGeometryAttribute( attributeName );\n\n\t\tif ( geometryAttribute === true ) {\n\n\t\t\tconst nodeAttribute = builder.getAttribute( attributeName, nodeType );\n\n\t\t\tif ( builder.isShaderStage( 'vertex' ) ) {\n\n\t\t\t\treturn nodeAttribute.name;\n\n\t\t\t} else {\n\n\t\t\t\tconst nodeVarying = new VaryingNode( this );\n\n\t\t\t\treturn nodeVarying.build( builder, nodeAttribute.type );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( `Attribute \"${ attributeName }\" not found.` );\n\n\t\t\treturn builder.getConst( nodeType );\n\n\t\t}\n\n\t}\n\n}\n\nexport default AttributeNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAC5B,OAAOC,WAAW,MAAM,kBAAkB;AAE1C,MAAMC,aAAa,SAASF,IAAI,CAAC;EAEhCG,WAAW,CAAEC,aAAa,EAAoB;IAAA,IAAlBC,QAAQ,uEAAG,IAAI;IAE1C,KAAK,CAAEA,QAAQ,CAAE;IAEjB,IAAI,CAACC,cAAc,GAAGF,aAAa;EAEpC;EAEAG,OAAO,CAAEC,OAAO,EAAG;IAElB,OAAO,IAAI,CAACC,gBAAgB,CAAED,OAAO,CAAE;EAExC;EAEAE,WAAW,CAAEF,OAAO,EAAG;IAEtB,MAAMJ,aAAa,GAAG,IAAI,CAACK,gBAAgB,CAAED,OAAO,CAAE;IAEtD,IAAIH,QAAQ,GAAG,KAAK,CAACK,WAAW,CAAEF,OAAO,CAAE;IAE3C,IAAKH,QAAQ,KAAK,IAAI,EAAG;MAExB,IAAKG,OAAO,CAACG,oBAAoB,CAAEP,aAAa,CAAE,EAAG;QAEpD,MAAMQ,SAAS,GAAGJ,OAAO,CAACK,QAAQ,CAACC,YAAY,CAAEV,aAAa,CAAE;QAEhEC,QAAQ,GAAGG,OAAO,CAACO,iBAAiB,CAAEH,SAAS,CAACI,QAAQ,CAAE;MAE3D,CAAC,MAAM;QAENX,QAAQ,GAAG,OAAO;MAEnB;IAED;IAEA,OAAOA,QAAQ;EAEhB;EAEAY,gBAAgB,CAAEb,aAAa,EAAG;IAEjC,IAAI,CAACE,cAAc,GAAGF,aAAa;IAEnC,OAAO,IAAI;EAEZ;EAEAK,gBAAgB,EAAE;EAAA,EAAc;IAE/B,OAAO,IAAI,CAACH,cAAc;EAE3B;EAEAY,QAAQ,CAAEV,OAAO,EAAG;IAEnB,MAAMJ,aAAa,GAAG,IAAI,CAACK,gBAAgB,CAAED,OAAO,CAAE;IACtD,MAAMH,QAAQ,GAAG,IAAI,CAACK,WAAW,CAAEF,OAAO,CAAE;IAC5C,MAAMW,iBAAiB,GAAGX,OAAO,CAACG,oBAAoB,CAAEP,aAAa,CAAE;IAEvE,IAAKe,iBAAiB,KAAK,IAAI,EAAG;MAEjC,MAAMC,aAAa,GAAGZ,OAAO,CAACM,YAAY,CAAEV,aAAa,EAAEC,QAAQ,CAAE;MAErE,IAAKG,OAAO,CAACa,aAAa,CAAE,QAAQ,CAAE,EAAG;QAExC,OAAOD,aAAa,CAACE,IAAI;MAE1B,CAAC,MAAM;QAEN,MAAMC,WAAW,GAAG,IAAItB,WAAW,CAAE,IAAI,CAAE;QAE3C,OAAOsB,WAAW,CAACC,KAAK,CAAEhB,OAAO,EAAEY,aAAa,CAACK,IAAI,CAAE;MAExD;IAED,CAAC,MAAM;MAENC,OAAO,CAACC,IAAI,CAAG,cAAcvB,aAAe,cAAa,CAAE;MAE3D,OAAOI,OAAO,CAACoB,QAAQ,CAAEvB,QAAQ,CAAE;IAEpC;EAED;AAED;AAEA,eAAeH,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}