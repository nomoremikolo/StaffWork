{"ast":null,"code":"import * as MathUtils from './MathUtils.js';\nimport { Quaternion } from './Quaternion.js';\nclass Vector3 {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    Vector3.prototype.isVector3 = true;\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  set(x, y, z) {\n    if (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  setScalar(scalar) {\n    this.x = scalar;\n    this.y = scalar;\n    this.z = scalar;\n    return this;\n  }\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n  setZ(z) {\n    this.z = z;\n    return this;\n  }\n  setComponent(index, value) {\n    switch (index) {\n      case 0:\n        this.x = value;\n        break;\n      case 1:\n        this.y = value;\n        break;\n      case 2:\n        this.z = value;\n        break;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n    return this;\n  }\n  getComponent(index) {\n    switch (index) {\n      case 0:\n        return this.x;\n      case 1:\n        return this.y;\n      case 2:\n        return this.z;\n      default:\n        throw new Error('index is out of range: ' + index);\n    }\n  }\n  clone() {\n    return new this.constructor(this.x, this.y, this.z);\n  }\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n    return this;\n  }\n  add(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    return this;\n  }\n  addScalar(s) {\n    this.x += s;\n    this.y += s;\n    this.z += s;\n    return this;\n  }\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n    return this;\n  }\n  addScaledVector(v, s) {\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n    return this;\n  }\n  sub(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    return this;\n  }\n  subScalar(s) {\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n    return this;\n  }\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n    return this;\n  }\n  multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n    return this;\n  }\n  multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n    return this;\n  }\n  multiplyVectors(a, b) {\n    this.x = a.x * b.x;\n    this.y = a.y * b.y;\n    this.z = a.z * b.z;\n    return this;\n  }\n  applyEuler(euler) {\n    return this.applyQuaternion(_quaternion.setFromEuler(euler));\n  }\n  applyAxisAngle(axis, angle) {\n    return this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));\n  }\n  applyMatrix3(m) {\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n    this.x = e[0] * x + e[3] * y + e[6] * z;\n    this.y = e[1] * x + e[4] * y + e[7] * z;\n    this.z = e[2] * x + e[5] * y + e[8] * z;\n    return this;\n  }\n  applyNormalMatrix(m) {\n    return this.applyMatrix3(m).normalize();\n  }\n  applyMatrix4(m) {\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n    const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n    return this;\n  }\n  applyQuaternion(q) {\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const qx = q.x,\n      qy = q.y,\n      qz = q.z,\n      qw = q.w;\n\n    // calculate quat * vector\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return this;\n  }\n  project(camera) {\n    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n  }\n  unproject(camera) {\n    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n  }\n  transformDirection(m) {\n    // input: THREE.Matrix4 affine matrix\n    // vector interpreted as a direction\n\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const e = m.elements;\n    this.x = e[0] * x + e[4] * y + e[8] * z;\n    this.y = e[1] * x + e[5] * y + e[9] * z;\n    this.z = e[2] * x + e[6] * y + e[10] * z;\n    return this.normalize();\n  }\n  divide(v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n    return this;\n  }\n  divideScalar(scalar) {\n    return this.multiplyScalar(1 / scalar);\n  }\n  min(v) {\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n    this.z = Math.min(this.z, v.z);\n    return this;\n  }\n  max(v) {\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n    this.z = Math.max(this.z, v.z);\n    return this;\n  }\n  clamp(min, max) {\n    // assumes min < max, componentwise\n\n    this.x = Math.max(min.x, Math.min(max.x, this.x));\n    this.y = Math.max(min.y, Math.min(max.y, this.y));\n    this.z = Math.max(min.z, Math.min(max.z, this.z));\n    return this;\n  }\n  clampScalar(minVal, maxVal) {\n    this.x = Math.max(minVal, Math.min(maxVal, this.x));\n    this.y = Math.max(minVal, Math.min(maxVal, this.y));\n    this.z = Math.max(minVal, Math.min(maxVal, this.z));\n    return this;\n  }\n  clampLength(min, max) {\n    const length = this.length();\n    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n  }\n  floor() {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n    return this;\n  }\n  ceil() {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n    return this;\n  }\n  round() {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n    return this;\n  }\n  roundToZero() {\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n    return this;\n  }\n  negate() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  }\n  dot(v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  }\n\n  // TODO lengthSquared?\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n  }\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  }\n  manhattanLength() {\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n  }\n  normalize() {\n    return this.divideScalar(this.length() || 1);\n  }\n  setLength(length) {\n    return this.normalize().multiplyScalar(length);\n  }\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n    return this;\n  }\n  lerpVectors(v1, v2, alpha) {\n    this.x = v1.x + (v2.x - v1.x) * alpha;\n    this.y = v1.y + (v2.y - v1.y) * alpha;\n    this.z = v1.z + (v2.z - v1.z) * alpha;\n    return this;\n  }\n  cross(v) {\n    return this.crossVectors(this, v);\n  }\n  crossVectors(a, b) {\n    const ax = a.x,\n      ay = a.y,\n      az = a.z;\n    const bx = b.x,\n      by = b.y,\n      bz = b.z;\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n    return this;\n  }\n  projectOnVector(v) {\n    const denominator = v.lengthSq();\n    if (denominator === 0) return this.set(0, 0, 0);\n    const scalar = v.dot(this) / denominator;\n    return this.copy(v).multiplyScalar(scalar);\n  }\n  projectOnPlane(planeNormal) {\n    _vector.copy(this).projectOnVector(planeNormal);\n    return this.sub(_vector);\n  }\n  reflect(normal) {\n    // reflect incident vector off plane orthogonal to normal\n    // normal is assumed to have unit length\n\n    return this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));\n  }\n  angleTo(v) {\n    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n    if (denominator === 0) return Math.PI / 2;\n    const theta = this.dot(v) / denominator;\n\n    // clamp, to handle numerical problems\n\n    return Math.acos(MathUtils.clamp(theta, -1, 1));\n  }\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n  distanceToSquared(v) {\n    const dx = this.x - v.x,\n      dy = this.y - v.y,\n      dz = this.z - v.z;\n    return dx * dx + dy * dy + dz * dz;\n  }\n  manhattanDistanceTo(v) {\n    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n  }\n  setFromSpherical(s) {\n    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n  }\n  setFromSphericalCoords(radius, phi, theta) {\n    const sinPhiRadius = Math.sin(phi) * radius;\n    this.x = sinPhiRadius * Math.sin(theta);\n    this.y = Math.cos(phi) * radius;\n    this.z = sinPhiRadius * Math.cos(theta);\n    return this;\n  }\n  setFromCylindrical(c) {\n    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n  }\n  setFromCylindricalCoords(radius, theta, y) {\n    this.x = radius * Math.sin(theta);\n    this.y = y;\n    this.z = radius * Math.cos(theta);\n    return this;\n  }\n  setFromMatrixPosition(m) {\n    const e = m.elements;\n    this.x = e[12];\n    this.y = e[13];\n    this.z = e[14];\n    return this;\n  }\n  setFromMatrixScale(m) {\n    const sx = this.setFromMatrixColumn(m, 0).length();\n    const sy = this.setFromMatrixColumn(m, 1).length();\n    const sz = this.setFromMatrixColumn(m, 2).length();\n    this.x = sx;\n    this.y = sy;\n    this.z = sz;\n    return this;\n  }\n  setFromMatrixColumn(m, index) {\n    return this.fromArray(m.elements, index * 4);\n  }\n  setFromMatrix3Column(m, index) {\n    return this.fromArray(m.elements, index * 3);\n  }\n  setFromEuler(e) {\n    this.x = e._x;\n    this.y = e._y;\n    this.z = e._z;\n    return this;\n  }\n  equals(v) {\n    return v.x === this.x && v.y === this.y && v.z === this.z;\n  }\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n    return this;\n  }\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n    return array;\n  }\n  fromBufferAttribute(attribute, index) {\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n    this.z = attribute.getZ(index);\n    return this;\n  }\n  random() {\n    this.x = Math.random();\n    this.y = Math.random();\n    this.z = Math.random();\n    return this;\n  }\n  randomDirection() {\n    // Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n    const u = (Math.random() - 0.5) * 2;\n    const t = Math.random() * Math.PI * 2;\n    const f = Math.sqrt(1 - u ** 2);\n    this.x = f * Math.cos(t);\n    this.y = f * Math.sin(t);\n    this.z = u;\n    return this;\n  }\n  *[Symbol.iterator]() {\n    yield this.x;\n    yield this.y;\n    yield this.z;\n  }\n}\nconst _vector = /*@__PURE__*/new Vector3();\nconst _quaternion = /*@__PURE__*/new Quaternion();\nexport { Vector3 };","map":{"version":3,"names":["MathUtils","Quaternion","Vector3","constructor","x","y","z","prototype","isVector3","set","undefined","setScalar","scalar","setX","setY","setZ","setComponent","index","value","Error","getComponent","clone","copy","v","add","addScalar","s","addVectors","a","b","addScaledVector","sub","subScalar","subVectors","multiply","multiplyScalar","multiplyVectors","applyEuler","euler","applyQuaternion","_quaternion","setFromEuler","applyAxisAngle","axis","angle","setFromAxisAngle","applyMatrix3","m","e","elements","applyNormalMatrix","normalize","applyMatrix4","w","q","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","divide","divideScalar","min","Math","max","clamp","clampScalar","minVal","maxVal","clampLength","length","floor","ceil","round","roundToZero","negate","dot","lengthSq","sqrt","manhattanLength","abs","setLength","lerp","alpha","lerpVectors","v1","v2","cross","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector","reflect","normal","angleTo","PI","theta","acos","distanceTo","distanceToSquared","dx","dy","dz","manhattanDistanceTo","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","sin","cos","setFromCylindrical","c","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","fromArray","setFromMatrix3Column","_x","_y","_z","equals","array","offset","toArray","fromBufferAttribute","attribute","getX","getY","getZ","random","randomDirection","u","t","f","Symbol","iterator"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/math/Vector3.js"],"sourcesContent":["import * as MathUtils from './MathUtils.js';\nimport { Quaternion } from './Quaternion.js';\n\nclass Vector3 {\n\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\tVector3.prototype.isVector3 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyEuler( euler ) {\n\n\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t}\n\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tconst ix = qw * x + qy * z - qz * y;\n\t\tconst iy = qw * y + qz * x - qx * z;\n\t\tconst iz = qw * z + qx * y - qy * x;\n\t\tconst iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t}\n\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector );\n\n\t}\n\n\treflect( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\tsetFromEuler( e ) {\n\n\t\tthis.x = e._x;\n\t\tthis.y = e._y;\n\t\tthis.z = e._z;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\trandomDirection() {\n\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\n\t\tconst t = Math.random() * Math.PI * 2;\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\n\n\t\tthis.x = f * Math.cos( t );\n\t\tthis.y = f * Math.sin( t );\n\t\tthis.z = u;\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\n\nexport { Vector3 };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}