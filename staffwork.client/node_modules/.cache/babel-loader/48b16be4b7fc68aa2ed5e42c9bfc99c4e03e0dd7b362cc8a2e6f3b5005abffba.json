{"ast":null,"code":"import { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\nimport { SpriteMaterial } from '../materials/SpriteMaterial.js';\nlet _geometry;\nconst _intersectPoint = /*@__PURE__*/new Vector3();\nconst _worldScale = /*@__PURE__*/new Vector3();\nconst _mvPosition = /*@__PURE__*/new Vector3();\nconst _alignedPosition = /*@__PURE__*/new Vector2();\nconst _rotatedPosition = /*@__PURE__*/new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/new Matrix4();\nconst _vA = /*@__PURE__*/new Vector3();\nconst _vB = /*@__PURE__*/new Vector3();\nconst _vC = /*@__PURE__*/new Vector3();\nconst _uvA = /*@__PURE__*/new Vector2();\nconst _uvB = /*@__PURE__*/new Vector2();\nconst _uvC = /*@__PURE__*/new Vector2();\nclass Sprite extends Object3D {\n  constructor(material) {\n    super();\n    this.isSprite = true;\n    this.type = 'Sprite';\n    if (_geometry === undefined) {\n      _geometry = new BufferGeometry();\n      const float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n      const interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n      _geometry.setIndex([0, 1, 2, 0, 2, 3]);\n      _geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n      _geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n    }\n    this.geometry = _geometry;\n    this.material = material !== undefined ? material : new SpriteMaterial();\n    this.center = new Vector2(0.5, 0.5);\n  }\n  raycast(raycaster, intersects) {\n    if (raycaster.camera === null) {\n      console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n    }\n    _worldScale.setFromMatrixScale(this.matrixWorld);\n    _viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n    this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n    _mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n    if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n      _worldScale.multiplyScalar(-_mvPosition.z);\n    }\n    const rotation = this.material.rotation;\n    let sin, cos;\n    if (rotation !== 0) {\n      cos = Math.cos(rotation);\n      sin = Math.sin(rotation);\n    }\n    const center = this.center;\n    transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    _uvA.set(0, 0);\n    _uvB.set(1, 0);\n    _uvC.set(1, 1);\n\n    // check first triangle\n    let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n    if (intersect === null) {\n      // check second triangle\n      transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n      _uvB.set(0, 1);\n      intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n      if (intersect === null) {\n        return;\n      }\n    }\n    const distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n    if (distance < raycaster.near || distance > raycaster.far) return;\n    intersects.push({\n      distance: distance,\n      point: _intersectPoint.clone(),\n      uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n      face: null,\n      object: this\n    });\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    if (source.center !== undefined) this.center.copy(source.center);\n    this.material = source.material;\n    return this;\n  }\n}\nfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n  // compute position in camera space\n  _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);\n\n  // to check if rotation is not zero\n  if (sin !== undefined) {\n    _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n    _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n  } else {\n    _rotatedPosition.copy(_alignedPosition);\n  }\n  vertexPosition.copy(mvPosition);\n  vertexPosition.x += _rotatedPosition.x;\n  vertexPosition.y += _rotatedPosition.y;\n\n  // transform to world space\n  vertexPosition.applyMatrix4(_viewWorldMatrix);\n}\nexport { Sprite };","map":{"version":3,"names":["Vector2","Vector3","Matrix4","Triangle","Object3D","BufferGeometry","InterleavedBuffer","InterleavedBufferAttribute","SpriteMaterial","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","constructor","material","isSprite","type","undefined","float32Array","Float32Array","interleavedBuffer","setIndex","setAttribute","geometry","center","raycast","raycaster","intersects","camera","console","error","setFromMatrixScale","matrixWorld","copy","modelViewMatrix","multiplyMatrices","matrixWorldInverse","setFromMatrixPosition","isPerspectiveCamera","sizeAttenuation","multiplyScalar","z","rotation","sin","cos","Math","transformVertex","set","intersect","ray","intersectTriangle","distance","origin","distanceTo","near","far","push","point","clone","uv","getUV","face","object","source","recursive","vertexPosition","mvPosition","scale","subVectors","addScalar","multiply","x","y","applyMatrix4"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/objects/Sprite.js"],"sourcesContent":["import { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\nimport { SpriteMaterial } from '../materials/SpriteMaterial.js';\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\nclass Sprite extends Object3D {\n\n\tconstructor( material ) {\n\n\t\tsuper();\n\n\t\tthis.isSprite = true;\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nexport { Sprite };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}