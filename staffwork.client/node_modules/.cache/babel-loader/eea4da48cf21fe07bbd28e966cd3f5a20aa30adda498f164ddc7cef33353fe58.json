{"ast":null,"code":"/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\nimport * as MathUtils from './MathUtils.js';\nclass Spherical {\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let phi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let theta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.radius = radius;\n    this.phi = phi; // polar angle\n    this.theta = theta; // azimuthal angle\n\n    return this;\n  }\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this;\n  }\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this;\n  }\n\n  // restrict phi to be between EPS and PI-EPS\n  makeSafe() {\n    const EPS = 0.000001;\n    this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n    return this;\n  }\n  setFromVector3(v) {\n    return this.setFromCartesianCoords(v.x, v.y, v.z);\n  }\n  setFromCartesianCoords(x, y, z) {\n    this.radius = Math.sqrt(x * x + y * y + z * z);\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(x, z);\n      this.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\n    }\n    return this;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nexport { Spherical };","map":{"version":3,"names":["MathUtils","Spherical","constructor","radius","phi","theta","set","copy","other","makeSafe","EPS","Math","max","min","PI","setFromVector3","v","setFromCartesianCoords","x","y","z","sqrt","atan2","acos","clamp","clone"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/math/Spherical.js"],"sourcesContent":["/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\nimport * as MathUtils from './MathUtils.js';\n\nclass Spherical {\n\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi; // polar angle\n\t\tthis.theta = theta; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t// restrict phi to be between EPS and PI-EPS\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Spherical };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,SAAS,MAAM,gBAAgB;AAE3C,MAAMC,SAAS,CAAC;EAEfC,WAAW,GAAmC;IAAA,IAAjCC,MAAM,uEAAG,CAAC;IAAA,IAAEC,GAAG,uEAAG,CAAC;IAAA,IAAEC,KAAK,uEAAG,CAAC;IAE1C,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,GAAG,GAAGA,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK,CAAC,CAAC;;IAEpB,OAAO,IAAI;EAEZ;EAEAC,GAAG,CAAEH,MAAM,EAAEC,GAAG,EAAEC,KAAK,EAAG;IAEzB,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,KAAK,GAAGA,KAAK;IAElB,OAAO,IAAI;EAEZ;EAEAE,IAAI,CAAEC,KAAK,EAAG;IAEb,IAAI,CAACL,MAAM,GAAGK,KAAK,CAACL,MAAM;IAC1B,IAAI,CAACC,GAAG,GAAGI,KAAK,CAACJ,GAAG;IACpB,IAAI,CAACC,KAAK,GAAGG,KAAK,CAACH,KAAK;IAExB,OAAO,IAAI;EAEZ;;EAEA;EACAI,QAAQ,GAAG;IAEV,MAAMC,GAAG,GAAG,QAAQ;IACpB,IAAI,CAACN,GAAG,GAAGO,IAAI,CAACC,GAAG,CAAEF,GAAG,EAAEC,IAAI,CAACE,GAAG,CAAEF,IAAI,CAACG,EAAE,GAAGJ,GAAG,EAAE,IAAI,CAACN,GAAG,CAAE,CAAE;IAE/D,OAAO,IAAI;EAEZ;EAEAW,cAAc,CAAEC,CAAC,EAAG;IAEnB,OAAO,IAAI,CAACC,sBAAsB,CAAED,CAAC,CAACE,CAAC,EAAEF,CAAC,CAACG,CAAC,EAAEH,CAAC,CAACI,CAAC,CAAE;EAEpD;EAEAH,sBAAsB,CAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAG;IAEjC,IAAI,CAACjB,MAAM,GAAGQ,IAAI,CAACU,IAAI,CAAEH,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAE;IAEhD,IAAK,IAAI,CAACjB,MAAM,KAAK,CAAC,EAAG;MAExB,IAAI,CAACE,KAAK,GAAG,CAAC;MACd,IAAI,CAACD,GAAG,GAAG,CAAC;IAEb,CAAC,MAAM;MAEN,IAAI,CAACC,KAAK,GAAGM,IAAI,CAACW,KAAK,CAAEJ,CAAC,EAAEE,CAAC,CAAE;MAC/B,IAAI,CAAChB,GAAG,GAAGO,IAAI,CAACY,IAAI,CAAEvB,SAAS,CAACwB,KAAK,CAAEL,CAAC,GAAG,IAAI,CAAChB,MAAM,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,CAAE;IAEnE;IAEA,OAAO,IAAI;EAEZ;EAEAsB,KAAK,GAAG;IAEP,OAAO,IAAI,IAAI,CAACvB,WAAW,EAAE,CAACK,IAAI,CAAE,IAAI,CAAE;EAE3C;AAED;AAEA,SAASN,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}