{"ast":null,"code":"import TempNode from '../core/Node.js';\nclass JoinNode extends TempNode {\n  constructor() {\n    let nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super(nodeType);\n    this.nodes = nodes;\n  }\n  getNodeType(builder) {\n    if (this.nodeType !== null) {\n      return builder.getVectorType(this.nodeType);\n    }\n    return builder.getTypeFromLength(this.nodes.reduce((count, cur) => count + builder.getTypeLength(cur.getNodeType(builder)), 0));\n  }\n  generate(builder, output) {\n    const type = this.getNodeType(builder);\n    const nodes = this.nodes;\n    const snippetValues = [];\n    for (const input of nodes) {\n      const inputSnippet = input.build(builder);\n      snippetValues.push(inputSnippet);\n    }\n    const snippet = `${builder.getType(type)}( ${snippetValues.join(', ')} )`;\n    return builder.format(snippet, type, output);\n  }\n}\nexport default JoinNode;","map":{"version":3,"names":["TempNode","JoinNode","constructor","nodes","nodeType","getNodeType","builder","getVectorType","getTypeFromLength","reduce","count","cur","getTypeLength","generate","output","type","snippetValues","input","inputSnippet","build","push","snippet","getType","join","format"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/utils/JoinNode.js"],"sourcesContent":["import TempNode from '../core/Node.js';\n\nclass JoinNode extends TempNode {\n\n\tconstructor( nodes = [], nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\tthis.nodes = nodes;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tif ( this.nodeType !== null ) {\n\n\t\t\treturn builder.getVectorType( this.nodeType );\n\n\t\t}\n\n\t\treturn builder.getTypeFromLength( this.nodes.reduce( ( count, cur ) => count + builder.getTypeLength( cur.getNodeType( builder ) ), 0 ) );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst nodes = this.nodes;\n\n\t\tconst snippetValues = [];\n\n\t\tfor ( const input of nodes ) {\n\n\t\t\tconst inputSnippet = input.build( builder );\n\n\t\t\tsnippetValues.push( inputSnippet );\n\n\t\t}\n\n\t\tconst snippet = `${ builder.getType( type ) }( ${ snippetValues.join( ', ' ) } )`;\n\n\t\treturn builder.format( snippet, type, output );\n\n\t}\n\n}\n\nexport default JoinNode;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,iBAAiB;AAEtC,MAAMC,QAAQ,SAASD,QAAQ,CAAC;EAE/BE,WAAW,GAAgC;IAAA,IAA9BC,KAAK,uEAAG,EAAE;IAAA,IAAEC,QAAQ,uEAAG,IAAI;IAEvC,KAAK,CAAEA,QAAQ,CAAE;IAEjB,IAAI,CAACD,KAAK,GAAGA,KAAK;EAEnB;EAEAE,WAAW,CAAEC,OAAO,EAAG;IAEtB,IAAK,IAAI,CAACF,QAAQ,KAAK,IAAI,EAAG;MAE7B,OAAOE,OAAO,CAACC,aAAa,CAAE,IAAI,CAACH,QAAQ,CAAE;IAE9C;IAEA,OAAOE,OAAO,CAACE,iBAAiB,CAAE,IAAI,CAACL,KAAK,CAACM,MAAM,CAAE,CAAEC,KAAK,EAAEC,GAAG,KAAMD,KAAK,GAAGJ,OAAO,CAACM,aAAa,CAAED,GAAG,CAACN,WAAW,CAAEC,OAAO,CAAE,CAAE,EAAE,CAAC,CAAE,CAAE;EAE1I;EAEAO,QAAQ,CAAEP,OAAO,EAAEQ,MAAM,EAAG;IAE3B,MAAMC,IAAI,GAAG,IAAI,CAACV,WAAW,CAAEC,OAAO,CAAE;IACxC,MAAMH,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,MAAMa,aAAa,GAAG,EAAE;IAExB,KAAM,MAAMC,KAAK,IAAId,KAAK,EAAG;MAE5B,MAAMe,YAAY,GAAGD,KAAK,CAACE,KAAK,CAAEb,OAAO,CAAE;MAE3CU,aAAa,CAACI,IAAI,CAAEF,YAAY,CAAE;IAEnC;IAEA,MAAMG,OAAO,GAAI,GAAGf,OAAO,CAACgB,OAAO,CAAEP,IAAI,CAAI,KAAKC,aAAa,CAACO,IAAI,CAAE,IAAI,CAAI,IAAG;IAEjF,OAAOjB,OAAO,CAACkB,MAAM,CAAEH,OAAO,EAAEN,IAAI,EAAED,MAAM,CAAE;EAE/C;AAED;AAEA,eAAeb,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}