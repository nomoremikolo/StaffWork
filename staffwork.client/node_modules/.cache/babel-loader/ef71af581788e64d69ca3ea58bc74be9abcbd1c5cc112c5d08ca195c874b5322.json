{"ast":null,"code":"import F_Schlick from './F_Schlick.js';\nimport V_GGX_SmithCorrelated from './V_GGX_SmithCorrelated.js';\nimport D_GGX from './D_GGX.js';\nimport { ShaderNode, dotNV, add, mul, clamp, dot, pow2, normalize, transformedNormalView, positionViewDirection } from '../../shadernode/ShaderNodeBaseElements.js';\n\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\nconst BRDF_GGX = new ShaderNode(inputs => {\n  const {\n    lightDirection,\n    f0,\n    f90,\n    roughness\n  } = inputs;\n  const alpha = pow2(roughness); // UE4's roughness\n\n  const halfDir = normalize(add(lightDirection, positionViewDirection));\n  const dotNL = clamp(dot(transformedNormalView, lightDirection));\n  //const dotNV = clamp( dot( transformedNormalView, positionViewDirection ) );\n  const dotNH = clamp(dot(transformedNormalView, halfDir));\n  const dotVH = clamp(dot(positionViewDirection, halfDir));\n  const F = F_Schlick.call({\n    f0,\n    f90,\n    dotVH\n  });\n  const V = V_GGX_SmithCorrelated.call({\n    alpha,\n    dotNL,\n    dotNV\n  });\n  const D = D_GGX.call({\n    alpha,\n    dotNH\n  });\n  return mul(F, mul(V, D));\n}); // validated\n\nexport default BRDF_GGX;","map":{"version":3,"names":["F_Schlick","V_GGX_SmithCorrelated","D_GGX","ShaderNode","dotNV","add","mul","clamp","dot","pow2","normalize","transformedNormalView","positionViewDirection","BRDF_GGX","inputs","lightDirection","f0","f90","roughness","alpha","halfDir","dotNL","dotNH","dotVH","F","call","V","D"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/functions/BSDF/BRDF_GGX.js"],"sourcesContent":["import F_Schlick from './F_Schlick.js';\nimport V_GGX_SmithCorrelated from './V_GGX_SmithCorrelated.js';\nimport D_GGX from './D_GGX.js';\nimport {\n\tShaderNode, dotNV, add, mul, clamp, dot, pow2, normalize,\n\ttransformedNormalView, positionViewDirection\n} from '../../shadernode/ShaderNodeBaseElements.js';\n\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\nconst BRDF_GGX = new ShaderNode( ( inputs ) => {\n\n\tconst { lightDirection, f0, f90, roughness } = inputs;\n\n\tconst alpha = pow2( roughness ); // UE4's roughness\n\n\tconst halfDir = normalize( add( lightDirection, positionViewDirection ) );\n\n\tconst dotNL = clamp( dot( transformedNormalView, lightDirection ) );\n\t//const dotNV = clamp( dot( transformedNormalView, positionViewDirection ) );\n\tconst dotNH = clamp( dot( transformedNormalView, halfDir ) );\n\tconst dotVH = clamp( dot( positionViewDirection, halfDir ) );\n\n\tconst F = F_Schlick.call( { f0, f90, dotVH } );\n\n\tconst V = V_GGX_SmithCorrelated.call( { alpha, dotNL, dotNV } );\n\n\tconst D = D_GGX.call( { alpha, dotNH } );\n\n\treturn mul( F, mul( V, D ) );\n\n} ); // validated\n\nexport default BRDF_GGX;\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,OAAOC,qBAAqB,MAAM,4BAA4B;AAC9D,OAAOC,KAAK,MAAM,YAAY;AAC9B,SACCC,UAAU,EAAEC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,SAAS,EACxDC,qBAAqB,EAAEC,qBAAqB,QACtC,4CAA4C;;AAEnD;AACA,MAAMC,QAAQ,GAAG,IAAIV,UAAU,CAAIW,MAAM,IAAM;EAE9C,MAAM;IAAEC,cAAc;IAAEC,EAAE;IAAEC,GAAG;IAAEC;EAAU,CAAC,GAAGJ,MAAM;EAErD,MAAMK,KAAK,GAAGV,IAAI,CAAES,SAAS,CAAE,CAAC,CAAC;;EAEjC,MAAME,OAAO,GAAGV,SAAS,CAAEL,GAAG,CAAEU,cAAc,EAAEH,qBAAqB,CAAE,CAAE;EAEzE,MAAMS,KAAK,GAAGd,KAAK,CAAEC,GAAG,CAAEG,qBAAqB,EAAEI,cAAc,CAAE,CAAE;EACnE;EACA,MAAMO,KAAK,GAAGf,KAAK,CAAEC,GAAG,CAAEG,qBAAqB,EAAES,OAAO,CAAE,CAAE;EAC5D,MAAMG,KAAK,GAAGhB,KAAK,CAAEC,GAAG,CAAEI,qBAAqB,EAAEQ,OAAO,CAAE,CAAE;EAE5D,MAAMI,CAAC,GAAGxB,SAAS,CAACyB,IAAI,CAAE;IAAET,EAAE;IAAEC,GAAG;IAAEM;EAAM,CAAC,CAAE;EAE9C,MAAMG,CAAC,GAAGzB,qBAAqB,CAACwB,IAAI,CAAE;IAAEN,KAAK;IAAEE,KAAK;IAAEjB;EAAM,CAAC,CAAE;EAE/D,MAAMuB,CAAC,GAAGzB,KAAK,CAACuB,IAAI,CAAE;IAAEN,KAAK;IAAEG;EAAM,CAAC,CAAE;EAExC,OAAOhB,GAAG,CAAEkB,CAAC,EAAElB,GAAG,CAAEoB,CAAC,EAAEC,CAAC,CAAE,CAAE;AAE7B,CAAC,CAAE,CAAC,CAAC;;AAEL,eAAed,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}