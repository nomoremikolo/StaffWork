{"ast":null,"code":"import { EventDispatcher } from '../core/EventDispatcher.js';\nimport { FrontSide, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\nimport * as MathUtils from '../math/MathUtils.js';\nlet materialId = 0;\nclass Material extends EventDispatcher {\n  constructor() {\n    super();\n    this.isMaterial = true;\n    Object.defineProperty(this, 'id', {\n      value: materialId++\n    });\n    this.uuid = MathUtils.generateUUID();\n    this.name = '';\n    this.type = 'Material';\n    this.blending = NormalBlending;\n    this.side = FrontSide;\n    this.vertexColors = false;\n    this.opacity = 1;\n    this.transparent = false;\n    this.blendSrc = SrcAlphaFactor;\n    this.blendDst = OneMinusSrcAlphaFactor;\n    this.blendEquation = AddEquation;\n    this.blendSrcAlpha = null;\n    this.blendDstAlpha = null;\n    this.blendEquationAlpha = null;\n    this.depthFunc = LessEqualDepth;\n    this.depthTest = true;\n    this.depthWrite = true;\n    this.stencilWriteMask = 0xff;\n    this.stencilFunc = AlwaysStencilFunc;\n    this.stencilRef = 0;\n    this.stencilFuncMask = 0xff;\n    this.stencilFail = KeepStencilOp;\n    this.stencilZFail = KeepStencilOp;\n    this.stencilZPass = KeepStencilOp;\n    this.stencilWrite = false;\n    this.clippingPlanes = null;\n    this.clipIntersection = false;\n    this.clipShadows = false;\n    this.shadowSide = null;\n    this.colorWrite = true;\n    this.precision = null; // override the renderer's default precision for this material\n\n    this.polygonOffset = false;\n    this.polygonOffsetFactor = 0;\n    this.polygonOffsetUnits = 0;\n    this.dithering = false;\n    this.alphaToCoverage = false;\n    this.premultipliedAlpha = false;\n    this.visible = true;\n    this.toneMapped = true;\n    this.userData = {};\n    this.version = 0;\n    this._alphaTest = 0;\n  }\n  get alphaTest() {\n    return this._alphaTest;\n  }\n  set alphaTest(value) {\n    if (this._alphaTest > 0 !== value > 0) {\n      this.version++;\n    }\n    this._alphaTest = value;\n  }\n  onBuild( /* shaderobject, renderer */) {}\n  onBeforeRender( /* renderer, scene, camera, geometry, object, group */) {}\n  onBeforeCompile( /* shaderobject, renderer */) {}\n  customProgramCacheKey() {\n    return this.onBeforeCompile.toString();\n  }\n  setValues(values) {\n    if (values === undefined) return;\n    for (const key in values) {\n      const newValue = values[key];\n      if (newValue === undefined) {\n        console.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n        continue;\n      }\n      const currentValue = this[key];\n      if (currentValue === undefined) {\n        console.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n        continue;\n      }\n      if (currentValue && currentValue.isColor) {\n        currentValue.set(newValue);\n      } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n        currentValue.copy(newValue);\n      } else {\n        this[key] = newValue;\n      }\n    }\n  }\n  toJSON(meta) {\n    const isRootObject = meta === undefined || typeof meta === 'string';\n    if (isRootObject) {\n      meta = {\n        textures: {},\n        images: {}\n      };\n    }\n    const data = {\n      metadata: {\n        version: 4.5,\n        type: 'Material',\n        generator: 'Material.toJSON'\n      }\n    };\n\n    // standard Material serialization\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n    if (this.color && this.color.isColor) data.color = this.color.getHex();\n    if (this.roughness !== undefined) data.roughness = this.roughness;\n    if (this.metalness !== undefined) data.metalness = this.metalness;\n    if (this.sheen !== undefined) data.sheen = this.sheen;\n    if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();\n    if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;\n    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n    if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n    if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;\n    if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();\n    if (this.shininess !== undefined) data.shininess = this.shininess;\n    if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n    if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n    if (this.clearcoatMap && this.clearcoatMap.isTexture) {\n      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n    }\n    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n    }\n    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n    }\n    if (this.iridescence !== undefined) data.iridescence = this.iridescence;\n    if (this.iridescenceIOR !== undefined) data.iridescenceIOR = this.iridescenceIOR;\n    if (this.iridescenceThicknessRange !== undefined) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n    if (this.iridescenceMap && this.iridescenceMap.isTexture) {\n      data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;\n    }\n    if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {\n      data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;\n    }\n    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n    if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n    if (this.lightMap && this.lightMap.isTexture) {\n      data.lightMap = this.lightMap.toJSON(meta).uuid;\n      data.lightMapIntensity = this.lightMapIntensity;\n    }\n    if (this.aoMap && this.aoMap.isTexture) {\n      data.aoMap = this.aoMap.toJSON(meta).uuid;\n      data.aoMapIntensity = this.aoMapIntensity;\n    }\n    if (this.bumpMap && this.bumpMap.isTexture) {\n      data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n      data.bumpScale = this.bumpScale;\n    }\n    if (this.normalMap && this.normalMap.isTexture) {\n      data.normalMap = this.normalMap.toJSON(meta).uuid;\n      data.normalMapType = this.normalMapType;\n      data.normalScale = this.normalScale.toArray();\n    }\n    if (this.displacementMap && this.displacementMap.isTexture) {\n      data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n      data.displacementScale = this.displacementScale;\n      data.displacementBias = this.displacementBias;\n    }\n    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n    if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;\n    if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;\n    if (this.envMap && this.envMap.isTexture) {\n      data.envMap = this.envMap.toJSON(meta).uuid;\n      if (this.combine !== undefined) data.combine = this.combine;\n    }\n    if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n    if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\n    if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\n    if (this.gradientMap && this.gradientMap.isTexture) {\n      data.gradientMap = this.gradientMap.toJSON(meta).uuid;\n    }\n    if (this.transmission !== undefined) data.transmission = this.transmission;\n    if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\n    if (this.thickness !== undefined) data.thickness = this.thickness;\n    if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\n    if (this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;\n    if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();\n    if (this.size !== undefined) data.size = this.size;\n    if (this.shadowSide !== null) data.shadowSide = this.shadowSide;\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n    if (this.blending !== NormalBlending) data.blending = this.blending;\n    if (this.side !== FrontSide) data.side = this.side;\n    if (this.vertexColors) data.vertexColors = true;\n    if (this.opacity < 1) data.opacity = this.opacity;\n    if (this.transparent === true) data.transparent = this.transparent;\n    data.depthFunc = this.depthFunc;\n    data.depthTest = this.depthTest;\n    data.depthWrite = this.depthWrite;\n    data.colorWrite = this.colorWrite;\n    data.stencilWrite = this.stencilWrite;\n    data.stencilWriteMask = this.stencilWriteMask;\n    data.stencilFunc = this.stencilFunc;\n    data.stencilRef = this.stencilRef;\n    data.stencilFuncMask = this.stencilFuncMask;\n    data.stencilFail = this.stencilFail;\n    data.stencilZFail = this.stencilZFail;\n    data.stencilZPass = this.stencilZPass;\n\n    // rotation (SpriteMaterial)\n    if (this.rotation !== undefined && this.rotation !== 0) data.rotation = this.rotation;\n    if (this.polygonOffset === true) data.polygonOffset = true;\n    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n    if (this.linewidth !== undefined && this.linewidth !== 1) data.linewidth = this.linewidth;\n    if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n    if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n    if (this.scale !== undefined) data.scale = this.scale;\n    if (this.dithering === true) data.dithering = true;\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n    if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n    if (this.wireframe === true) data.wireframe = this.wireframe;\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n    if (this.flatShading === true) data.flatShading = this.flatShading;\n    if (this.visible === false) data.visible = false;\n    if (this.toneMapped === false) data.toneMapped = false;\n    if (this.fog === false) data.fog = false;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n\n    // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      const values = [];\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n      return values;\n    }\n    if (isRootObject) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n    }\n    return data;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  copy(source) {\n    this.name = source.name;\n    this.blending = source.blending;\n    this.side = source.side;\n    this.vertexColors = source.vertexColors;\n    this.opacity = source.opacity;\n    this.transparent = source.transparent;\n    this.blendSrc = source.blendSrc;\n    this.blendDst = source.blendDst;\n    this.blendEquation = source.blendEquation;\n    this.blendSrcAlpha = source.blendSrcAlpha;\n    this.blendDstAlpha = source.blendDstAlpha;\n    this.blendEquationAlpha = source.blendEquationAlpha;\n    this.depthFunc = source.depthFunc;\n    this.depthTest = source.depthTest;\n    this.depthWrite = source.depthWrite;\n    this.stencilWriteMask = source.stencilWriteMask;\n    this.stencilFunc = source.stencilFunc;\n    this.stencilRef = source.stencilRef;\n    this.stencilFuncMask = source.stencilFuncMask;\n    this.stencilFail = source.stencilFail;\n    this.stencilZFail = source.stencilZFail;\n    this.stencilZPass = source.stencilZPass;\n    this.stencilWrite = source.stencilWrite;\n    const srcPlanes = source.clippingPlanes;\n    let dstPlanes = null;\n    if (srcPlanes !== null) {\n      const n = srcPlanes.length;\n      dstPlanes = new Array(n);\n      for (let i = 0; i !== n; ++i) {\n        dstPlanes[i] = srcPlanes[i].clone();\n      }\n    }\n    this.clippingPlanes = dstPlanes;\n    this.clipIntersection = source.clipIntersection;\n    this.clipShadows = source.clipShadows;\n    this.shadowSide = source.shadowSide;\n    this.colorWrite = source.colorWrite;\n    this.precision = source.precision;\n    this.polygonOffset = source.polygonOffset;\n    this.polygonOffsetFactor = source.polygonOffsetFactor;\n    this.polygonOffsetUnits = source.polygonOffsetUnits;\n    this.dithering = source.dithering;\n    this.alphaTest = source.alphaTest;\n    this.alphaToCoverage = source.alphaToCoverage;\n    this.premultipliedAlpha = source.premultipliedAlpha;\n    this.visible = source.visible;\n    this.toneMapped = source.toneMapped;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n    return this;\n  }\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n  set needsUpdate(value) {\n    if (value === true) this.version++;\n  }\n}\nexport { Material };","map":{"version":3,"names":["EventDispatcher","FrontSide","NormalBlending","LessEqualDepth","AddEquation","OneMinusSrcAlphaFactor","SrcAlphaFactor","AlwaysStencilFunc","KeepStencilOp","MathUtils","materialId","Material","constructor","isMaterial","Object","defineProperty","value","uuid","generateUUID","name","type","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","visible","toneMapped","userData","version","_alphaTest","alphaTest","onBuild","onBeforeRender","onBeforeCompile","customProgramCacheKey","toString","setValues","values","undefined","key","newValue","console","warn","currentValue","isColor","set","isVector3","copy","toJSON","meta","isRootObject","textures","images","data","metadata","generator","color","getHex","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","emissiveIntensity","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","clearcoatMap","isTexture","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","toArray","iridescence","iridescenceIOR","iridescenceThicknessRange","iridescenceMap","iridescenceThicknessMap","map","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularColorMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","Infinity","attenuationColor","size","sizeAttenuation","rotation","linewidth","dashSize","gapSize","scale","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","flatShading","fog","JSON","stringify","extractFromCache","cache","push","length","clone","source","srcPlanes","dstPlanes","n","Array","i","parse","dispose","dispatchEvent","needsUpdate"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/materials/Material.js"],"sourcesContent":["import { EventDispatcher } from '../core/EventDispatcher.js';\nimport { FrontSide, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\nimport * as MathUtils from '../math/MathUtils.js';\n\nlet materialId = 0;\n\nclass Material extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isMaterial = true;\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\n\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\n\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\t\tdata.colorWrite = this.colorWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( this.fog === false ) data.fog = false;\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nexport { Material };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}