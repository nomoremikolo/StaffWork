{"ast":null,"code":"import { WrapAroundEnding, ZeroCurvatureEnding, ZeroSlopeEnding, LoopPingPong, LoopOnce, LoopRepeat, NormalAnimationBlendMode, AdditiveAnimationBlendMode } from '../constants.js';\nclass AnimationAction {\n  constructor(mixer, clip) {\n    let localRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let blendMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : clip.blendMode;\n    this._mixer = mixer;\n    this._clip = clip;\n    this._localRoot = localRoot;\n    this.blendMode = blendMode;\n    const tracks = clip.tracks,\n      nTracks = tracks.length,\n      interpolants = new Array(nTracks);\n    const interpolantSettings = {\n      endingStart: ZeroCurvatureEnding,\n      endingEnd: ZeroCurvatureEnding\n    };\n    for (let i = 0; i !== nTracks; ++i) {\n      const interpolant = tracks[i].createInterpolant(null);\n      interpolants[i] = interpolant;\n      interpolant.settings = interpolantSettings;\n    }\n    this._interpolantSettings = interpolantSettings;\n    this._interpolants = interpolants; // bound by the mixer\n\n    // inside: PropertyMixer (managed by the mixer)\n    this._propertyBindings = new Array(nTracks);\n    this._cacheIndex = null; // for the memory manager\n    this._byClipCacheIndex = null; // for the memory manager\n\n    this._timeScaleInterpolant = null;\n    this._weightInterpolant = null;\n    this.loop = LoopRepeat;\n    this._loopCount = -1;\n\n    // global mixer time when the action is to be started\n    // it's set back to 'null' upon start of the action\n    this._startTime = null;\n\n    // scaled local time of the action\n    // gets clamped or wrapped to 0..clip.duration according to loop\n    this.time = 0;\n    this.timeScale = 1;\n    this._effectiveTimeScale = 1;\n    this.weight = 1;\n    this._effectiveWeight = 1;\n    this.repetitions = Infinity; // no. of repetitions when looping\n\n    this.paused = false; // true -> zero effective time scale\n    this.enabled = true; // false -> zero effective weight\n\n    this.clampWhenFinished = false; // keep feeding the last frame?\n\n    this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n    this.zeroSlopeAtEnd = true; // clips for start, loop and end\n  }\n\n  // State & Scheduling\n\n  play() {\n    this._mixer._activateAction(this);\n    return this;\n  }\n  stop() {\n    this._mixer._deactivateAction(this);\n    return this.reset();\n  }\n  reset() {\n    this.paused = false;\n    this.enabled = true;\n    this.time = 0; // restart clip\n    this._loopCount = -1; // forget previous loops\n    this._startTime = null; // forget scheduling\n\n    return this.stopFading().stopWarping();\n  }\n  isRunning() {\n    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n  }\n\n  // return true when play has been called\n  isScheduled() {\n    return this._mixer._isActiveAction(this);\n  }\n  startAt(time) {\n    this._startTime = time;\n    return this;\n  }\n  setLoop(mode, repetitions) {\n    this.loop = mode;\n    this.repetitions = repetitions;\n    return this;\n  }\n\n  // Weight\n\n  // set the weight stopping any scheduled fading\n  // although .enabled = false yields an effective weight of zero, this\n  // method does *not* change .enabled, because it would be confusing\n  setEffectiveWeight(weight) {\n    this.weight = weight;\n\n    // note: same logic as when updated at runtime\n    this._effectiveWeight = this.enabled ? weight : 0;\n    return this.stopFading();\n  }\n\n  // return the weight considering fading and .enabled\n  getEffectiveWeight() {\n    return this._effectiveWeight;\n  }\n  fadeIn(duration) {\n    return this._scheduleFading(duration, 0, 1);\n  }\n  fadeOut(duration) {\n    return this._scheduleFading(duration, 1, 0);\n  }\n  crossFadeFrom(fadeOutAction, duration, warp) {\n    fadeOutAction.fadeOut(duration);\n    this.fadeIn(duration);\n    if (warp) {\n      const fadeInDuration = this._clip.duration,\n        fadeOutDuration = fadeOutAction._clip.duration,\n        startEndRatio = fadeOutDuration / fadeInDuration,\n        endStartRatio = fadeInDuration / fadeOutDuration;\n      fadeOutAction.warp(1.0, startEndRatio, duration);\n      this.warp(endStartRatio, 1.0, duration);\n    }\n    return this;\n  }\n  crossFadeTo(fadeInAction, duration, warp) {\n    return fadeInAction.crossFadeFrom(this, duration, warp);\n  }\n  stopFading() {\n    const weightInterpolant = this._weightInterpolant;\n    if (weightInterpolant !== null) {\n      this._weightInterpolant = null;\n      this._mixer._takeBackControlInterpolant(weightInterpolant);\n    }\n    return this;\n  }\n\n  // Time Scale Control\n\n  // set the time scale stopping any scheduled warping\n  // although .paused = true yields an effective time scale of zero, this\n  // method does *not* change .paused, because it would be confusing\n  setEffectiveTimeScale(timeScale) {\n    this.timeScale = timeScale;\n    this._effectiveTimeScale = this.paused ? 0 : timeScale;\n    return this.stopWarping();\n  }\n\n  // return the time scale considering warping and .paused\n  getEffectiveTimeScale() {\n    return this._effectiveTimeScale;\n  }\n  setDuration(duration) {\n    this.timeScale = this._clip.duration / duration;\n    return this.stopWarping();\n  }\n  syncWith(action) {\n    this.time = action.time;\n    this.timeScale = action.timeScale;\n    return this.stopWarping();\n  }\n  halt(duration) {\n    return this.warp(this._effectiveTimeScale, 0, duration);\n  }\n  warp(startTimeScale, endTimeScale, duration) {\n    const mixer = this._mixer,\n      now = mixer.time,\n      timeScale = this.timeScale;\n    let interpolant = this._timeScaleInterpolant;\n    if (interpolant === null) {\n      interpolant = mixer._lendControlInterpolant();\n      this._timeScaleInterpolant = interpolant;\n    }\n    const times = interpolant.parameterPositions,\n      values = interpolant.sampleValues;\n    times[0] = now;\n    times[1] = now + duration;\n    values[0] = startTimeScale / timeScale;\n    values[1] = endTimeScale / timeScale;\n    return this;\n  }\n  stopWarping() {\n    const timeScaleInterpolant = this._timeScaleInterpolant;\n    if (timeScaleInterpolant !== null) {\n      this._timeScaleInterpolant = null;\n      this._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n    }\n    return this;\n  }\n\n  // Object Accessors\n\n  getMixer() {\n    return this._mixer;\n  }\n  getClip() {\n    return this._clip;\n  }\n  getRoot() {\n    return this._localRoot || this._mixer._root;\n  }\n\n  // Interna\n\n  _update(time, deltaTime, timeDirection, accuIndex) {\n    // called by the mixer\n\n    if (!this.enabled) {\n      // call ._updateWeight() to update ._effectiveWeight\n\n      this._updateWeight(time);\n      return;\n    }\n    const startTime = this._startTime;\n    if (startTime !== null) {\n      // check for scheduled start of action\n\n      const timeRunning = (time - startTime) * timeDirection;\n      if (timeRunning < 0 || timeDirection === 0) {\n        deltaTime = 0;\n      } else {\n        this._startTime = null; // unschedule\n        deltaTime = timeDirection * timeRunning;\n      }\n    }\n\n    // apply time scale and advance time\n\n    deltaTime *= this._updateTimeScale(time);\n    const clipTime = this._updateTime(deltaTime);\n\n    // note: _updateTime may disable the action resulting in\n    // an effective weight of 0\n\n    const weight = this._updateWeight(time);\n    if (weight > 0) {\n      const interpolants = this._interpolants;\n      const propertyMixers = this._propertyBindings;\n      switch (this.blendMode) {\n        case AdditiveAnimationBlendMode:\n          for (let j = 0, m = interpolants.length; j !== m; ++j) {\n            interpolants[j].evaluate(clipTime);\n            propertyMixers[j].accumulateAdditive(weight);\n          }\n          break;\n        case NormalAnimationBlendMode:\n        default:\n          for (let j = 0, m = interpolants.length; j !== m; ++j) {\n            interpolants[j].evaluate(clipTime);\n            propertyMixers[j].accumulate(accuIndex, weight);\n          }\n      }\n    }\n  }\n  _updateWeight(time) {\n    let weight = 0;\n    if (this.enabled) {\n      weight = this.weight;\n      const interpolant = this._weightInterpolant;\n      if (interpolant !== null) {\n        const interpolantValue = interpolant.evaluate(time)[0];\n        weight *= interpolantValue;\n        if (time > interpolant.parameterPositions[1]) {\n          this.stopFading();\n          if (interpolantValue === 0) {\n            // faded out, disable\n            this.enabled = false;\n          }\n        }\n      }\n    }\n    this._effectiveWeight = weight;\n    return weight;\n  }\n  _updateTimeScale(time) {\n    let timeScale = 0;\n    if (!this.paused) {\n      timeScale = this.timeScale;\n      const interpolant = this._timeScaleInterpolant;\n      if (interpolant !== null) {\n        const interpolantValue = interpolant.evaluate(time)[0];\n        timeScale *= interpolantValue;\n        if (time > interpolant.parameterPositions[1]) {\n          this.stopWarping();\n          if (timeScale === 0) {\n            // motion has halted, pause\n            this.paused = true;\n          } else {\n            // warp done - apply final time scale\n            this.timeScale = timeScale;\n          }\n        }\n      }\n    }\n    this._effectiveTimeScale = timeScale;\n    return timeScale;\n  }\n  _updateTime(deltaTime) {\n    const duration = this._clip.duration;\n    const loop = this.loop;\n    let time = this.time + deltaTime;\n    let loopCount = this._loopCount;\n    const pingPong = loop === LoopPingPong;\n    if (deltaTime === 0) {\n      if (loopCount === -1) return time;\n      return pingPong && (loopCount & 1) === 1 ? duration - time : time;\n    }\n    if (loop === LoopOnce) {\n      if (loopCount === -1) {\n        // just started\n\n        this._loopCount = 0;\n        this._setEndings(true, true, false);\n      }\n      handle_stop: {\n        if (time >= duration) {\n          time = duration;\n        } else if (time < 0) {\n          time = 0;\n        } else {\n          this.time = time;\n          break handle_stop;\n        }\n        if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n        this.time = time;\n        this._mixer.dispatchEvent({\n          type: 'finished',\n          action: this,\n          direction: deltaTime < 0 ? -1 : 1\n        });\n      }\n    } else {\n      // repetitive Repeat or PingPong\n\n      if (loopCount === -1) {\n        // just started\n\n        if (deltaTime >= 0) {\n          loopCount = 0;\n          this._setEndings(true, this.repetitions === 0, pingPong);\n        } else {\n          // when looping in reverse direction, the initial\n          // transition through zero counts as a repetition,\n          // so leave loopCount at -1\n\n          this._setEndings(this.repetitions === 0, true, pingPong);\n        }\n      }\n      if (time >= duration || time < 0) {\n        // wrap around\n\n        const loopDelta = Math.floor(time / duration); // signed\n        time -= duration * loopDelta;\n        loopCount += Math.abs(loopDelta);\n        const pending = this.repetitions - loopCount;\n        if (pending <= 0) {\n          // have to stop (switch state, clamp time, fire event)\n\n          if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n          time = deltaTime > 0 ? duration : 0;\n          this.time = time;\n          this._mixer.dispatchEvent({\n            type: 'finished',\n            action: this,\n            direction: deltaTime > 0 ? 1 : -1\n          });\n        } else {\n          // keep running\n\n          if (pending === 1) {\n            // entering the last round\n\n            const atStart = deltaTime < 0;\n            this._setEndings(atStart, !atStart, pingPong);\n          } else {\n            this._setEndings(false, false, pingPong);\n          }\n          this._loopCount = loopCount;\n          this.time = time;\n          this._mixer.dispatchEvent({\n            type: 'loop',\n            action: this,\n            loopDelta: loopDelta\n          });\n        }\n      } else {\n        this.time = time;\n      }\n      if (pingPong && (loopCount & 1) === 1) {\n        // invert time for the \"pong round\"\n\n        return duration - time;\n      }\n    }\n    return time;\n  }\n  _setEndings(atStart, atEnd, pingPong) {\n    const settings = this._interpolantSettings;\n    if (pingPong) {\n      settings.endingStart = ZeroSlopeEnding;\n      settings.endingEnd = ZeroSlopeEnding;\n    } else {\n      // assuming for LoopOnce atStart == atEnd == true\n\n      if (atStart) {\n        settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n      } else {\n        settings.endingStart = WrapAroundEnding;\n      }\n      if (atEnd) {\n        settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n      } else {\n        settings.endingEnd = WrapAroundEnding;\n      }\n    }\n  }\n  _scheduleFading(duration, weightNow, weightThen) {\n    const mixer = this._mixer,\n      now = mixer.time;\n    let interpolant = this._weightInterpolant;\n    if (interpolant === null) {\n      interpolant = mixer._lendControlInterpolant();\n      this._weightInterpolant = interpolant;\n    }\n    const times = interpolant.parameterPositions,\n      values = interpolant.sampleValues;\n    times[0] = now;\n    values[0] = weightNow;\n    times[1] = now + duration;\n    values[1] = weightThen;\n    return this;\n  }\n}\nexport { AnimationAction };","map":{"version":3,"names":["WrapAroundEnding","ZeroCurvatureEnding","ZeroSlopeEnding","LoopPingPong","LoopOnce","LoopRepeat","NormalAnimationBlendMode","AdditiveAnimationBlendMode","AnimationAction","constructor","mixer","clip","localRoot","blendMode","_mixer","_clip","_localRoot","tracks","nTracks","length","interpolants","Array","interpolantSettings","endingStart","endingEnd","i","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","Infinity","paused","enabled","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","play","_activateAction","stop","_deactivateAction","reset","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setLoop","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","duration","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","times","parameterPositions","values","sampleValues","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","accuIndex","_updateWeight","startTime","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","j","m","evaluate","accumulateAdditive","accumulate","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","dispatchEvent","type","direction","loopDelta","Math","floor","abs","pending","atStart","atEnd","weightNow","weightThen"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/animation/AnimationAction.js"],"sourcesContent":["import { WrapAroundEnding, ZeroCurvatureEnding, ZeroSlopeEnding, LoopPingPong, LoopOnce, LoopRepeat, NormalAnimationBlendMode, AdditiveAnimationBlendMode } from '../constants.js';\n\n\nclass AnimationAction {\n\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\t// State & Scheduling\n\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t// return true when play has been called\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\tcrossFadeFrom( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcrossFadeTo( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Object Accessors\n\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\tdeltaTime = 0;\n\n\t\t\t} else {\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\n\nexport { AnimationAction };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}