{"ast":null,"code":"import Node from '../core/Node.js';\nimport AttributeNode from '../core/AttributeNode.js';\nimport VaryingNode from '../core/VaryingNode.js';\nimport ModelNode from '../accessors/ModelNode.js';\nimport CameraNode from '../accessors/CameraNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MathNode from '../math/MathNode.js';\nclass NormalNode extends Node {\n  static GEOMETRY = 'geometry';\n  static LOCAL = 'local';\n  static VIEW = 'view';\n  static WORLD = 'world';\n  constructor() {\n    let scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NormalNode.LOCAL;\n    super('vec3');\n    this.scope = scope;\n  }\n  getHash( /*builder*/\n  ) {\n    return `normal-${this.scope}`;\n  }\n  generate(builder) {\n    const scope = this.scope;\n    let outputNode = null;\n    if (scope === NormalNode.GEOMETRY) {\n      outputNode = new AttributeNode('normal', 'vec3');\n    } else if (scope === NormalNode.LOCAL) {\n      outputNode = new VaryingNode(new NormalNode(NormalNode.GEOMETRY));\n    } else if (scope === NormalNode.VIEW) {\n      const vertexNode = new OperatorNode('*', new ModelNode(ModelNode.NORMAL_MATRIX), new NormalNode(NormalNode.LOCAL));\n      outputNode = new MathNode(MathNode.NORMALIZE, new VaryingNode(vertexNode));\n    } else if (scope === NormalNode.WORLD) {\n      // To use INVERSE_TRANSFORM_DIRECTION only inverse the param order like this: MathNode( ..., Vector, Matrix );\n      const vertexNode = new MathNode(MathNode.TRANSFORM_DIRECTION, new NormalNode(NormalNode.VIEW), new CameraNode(CameraNode.VIEW_MATRIX));\n      outputNode = new MathNode(MathNode.NORMALIZE, new VaryingNode(vertexNode));\n    }\n    return outputNode.build(builder, this.getNodeType(builder));\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n}\nexport default NormalNode;","map":{"version":3,"names":["Node","AttributeNode","VaryingNode","ModelNode","CameraNode","OperatorNode","MathNode","NormalNode","GEOMETRY","LOCAL","VIEW","WORLD","constructor","scope","getHash","generate","builder","outputNode","vertexNode","NORMAL_MATRIX","NORMALIZE","TRANSFORM_DIRECTION","VIEW_MATRIX","build","getNodeType","serialize","data","deserialize"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/accessors/NormalNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport AttributeNode from '../core/AttributeNode.js';\nimport VaryingNode from '../core/VaryingNode.js';\nimport ModelNode from '../accessors/ModelNode.js';\nimport CameraNode from '../accessors/CameraNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MathNode from '../math/MathNode.js';\n\nclass NormalNode extends Node {\n\n\tstatic GEOMETRY = 'geometry';\n\tstatic LOCAL = 'local';\n\tstatic VIEW = 'view';\n\tstatic WORLD = 'world';\n\n\tconstructor( scope = NormalNode.LOCAL ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetHash( /*builder*/ ) {\n\n\t\treturn `normal-${this.scope}`;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tlet outputNode = null;\n\n\t\tif ( scope === NormalNode.GEOMETRY ) {\n\n\t\t\toutputNode = new AttributeNode( 'normal', 'vec3' );\n\n\t\t} else if ( scope === NormalNode.LOCAL ) {\n\n\t\t\toutputNode = new VaryingNode( new NormalNode( NormalNode.GEOMETRY ) );\n\n\t\t} else if ( scope === NormalNode.VIEW ) {\n\n\t\t\tconst vertexNode = new OperatorNode( '*', new ModelNode( ModelNode.NORMAL_MATRIX ), new NormalNode( NormalNode.LOCAL ) );\n\t\t\toutputNode = new MathNode( MathNode.NORMALIZE, new VaryingNode( vertexNode ) );\n\n\t\t} else if ( scope === NormalNode.WORLD ) {\n\n\t\t\t// To use INVERSE_TRANSFORM_DIRECTION only inverse the param order like this: MathNode( ..., Vector, Matrix );\n\t\t\tconst vertexNode = new MathNode( MathNode.TRANSFORM_DIRECTION, new NormalNode( NormalNode.VIEW ), new CameraNode( CameraNode.VIEW_MATRIX ) );\n\t\t\toutputNode = new MathNode( MathNode.NORMALIZE, new VaryingNode( vertexNode ) );\n\n\t\t}\n\n\t\treturn outputNode.build( builder, this.getNodeType( builder ) );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\n\t}\n\n}\n\nexport default NormalNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,iBAAiB;AAClC,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,QAAQ,MAAM,qBAAqB;AAE1C,MAAMC,UAAU,SAASP,IAAI,CAAC;EAE7B,OAAOQ,QAAQ,GAAG,UAAU;EAC5B,OAAOC,KAAK,GAAG,OAAO;EACtB,OAAOC,IAAI,GAAG,MAAM;EACpB,OAAOC,KAAK,GAAG,OAAO;EAEtBC,WAAW,GAA6B;IAAA,IAA3BC,KAAK,uEAAGN,UAAU,CAACE,KAAK;IAEpC,KAAK,CAAE,MAAM,CAAE;IAEf,IAAI,CAACI,KAAK,GAAGA,KAAK;EAEnB;EAEAC,OAAO,EAAE;EAAA,EAAc;IAEtB,OAAQ,UAAS,IAAI,CAACD,KAAM,EAAC;EAE9B;EAEAE,QAAQ,CAAEC,OAAO,EAAG;IAEnB,MAAMH,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAII,UAAU,GAAG,IAAI;IAErB,IAAKJ,KAAK,KAAKN,UAAU,CAACC,QAAQ,EAAG;MAEpCS,UAAU,GAAG,IAAIhB,aAAa,CAAE,QAAQ,EAAE,MAAM,CAAE;IAEnD,CAAC,MAAM,IAAKY,KAAK,KAAKN,UAAU,CAACE,KAAK,EAAG;MAExCQ,UAAU,GAAG,IAAIf,WAAW,CAAE,IAAIK,UAAU,CAAEA,UAAU,CAACC,QAAQ,CAAE,CAAE;IAEtE,CAAC,MAAM,IAAKK,KAAK,KAAKN,UAAU,CAACG,IAAI,EAAG;MAEvC,MAAMQ,UAAU,GAAG,IAAIb,YAAY,CAAE,GAAG,EAAE,IAAIF,SAAS,CAAEA,SAAS,CAACgB,aAAa,CAAE,EAAE,IAAIZ,UAAU,CAAEA,UAAU,CAACE,KAAK,CAAE,CAAE;MACxHQ,UAAU,GAAG,IAAIX,QAAQ,CAAEA,QAAQ,CAACc,SAAS,EAAE,IAAIlB,WAAW,CAAEgB,UAAU,CAAE,CAAE;IAE/E,CAAC,MAAM,IAAKL,KAAK,KAAKN,UAAU,CAACI,KAAK,EAAG;MAExC;MACA,MAAMO,UAAU,GAAG,IAAIZ,QAAQ,CAAEA,QAAQ,CAACe,mBAAmB,EAAE,IAAId,UAAU,CAAEA,UAAU,CAACG,IAAI,CAAE,EAAE,IAAIN,UAAU,CAAEA,UAAU,CAACkB,WAAW,CAAE,CAAE;MAC5IL,UAAU,GAAG,IAAIX,QAAQ,CAAEA,QAAQ,CAACc,SAAS,EAAE,IAAIlB,WAAW,CAAEgB,UAAU,CAAE,CAAE;IAE/E;IAEA,OAAOD,UAAU,CAACM,KAAK,CAAEP,OAAO,EAAE,IAAI,CAACQ,WAAW,CAAER,OAAO,CAAE,CAAE;EAEhE;EAEAS,SAAS,CAAEC,IAAI,EAAG;IAEjB,KAAK,CAACD,SAAS,CAAEC,IAAI,CAAE;IAEvBA,IAAI,CAACb,KAAK,GAAG,IAAI,CAACA,KAAK;EAExB;EAEAc,WAAW,CAAED,IAAI,EAAG;IAEnB,KAAK,CAACC,WAAW,CAAED,IAAI,CAAE;IAEzB,IAAI,CAACb,KAAK,GAAGa,IAAI,CAACb,KAAK;EAExB;AAED;AAEA,eAAeN,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}