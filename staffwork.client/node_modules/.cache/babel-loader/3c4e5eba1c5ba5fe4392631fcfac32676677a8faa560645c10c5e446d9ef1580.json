{"ast":null,"code":"import { authorizationReducer } from \"../reducers/authorizationReducer\";\nimport axios from \"axios\";\nimport { GraphQlEndpoint } from \"../../global_variables\";\nexport const login = (username, password) => async dispatch => {\n  const graphqlQuery = {\n    \"query\": `\n            query login{\n                authorization{\n                  login(userLogin: {\n                    username: \"${username}\"\n                    password: \"${password}\"\n                  }){\n                    errors\n                    refreshToken\n                    statusCode\n                    token\n                    user{\n                      id\n                      username\n                      name\n                      surname\n                      age\n                      email\n                      adress\n                      role\n                      isActivated\n                      permissions\n                    }\n                  }\n                }\n              }\n        `\n  };\n  dispatch(authorizationReducer.actions.LOGIN());\n  try {\n    const response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.authorization.login;\n    if (r.statusCode == 200) {\n      dispatch(authorizationReducer.actions.LOGIN_SUCCESS(r.user));\n      console.log(\"Successfully authorized!\");\n    } else {\n      dispatch(authorizationReducer.actions.LOGIN_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(authorizationReducer.actions.LOGIN_ERROR(e));\n    console.log(e);\n  }\n};\nexport const refresh_token = () => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation refresh{\n                  authorization{\n                    refreshToken{\n                      errors\n                      refreshToken\n                      statusCode\n                      token\n                      user{\n                        id\n                        username\n                        name\n                        surname\n                        age\n                        email\n                        adress\n                        role\n                        isActivated\n                        permissions\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    dispatch(authorizationReducer.actions.REFRESH_TOKEN());\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      credentials: 'include',\n      mode: 'cors',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        \"content-type\": \"application/json\"\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.authorization.refreshToken;\n    if (r.statusCode == 200) {\n      dispatch(authorizationReducer.actions.REFRESH_TOKEN_SUCCESS(r.user));\n      console.log(\"Successfully refreshed!\");\n    } else {\n      dispatch(authorizationReducer.actions.REFRESH_TOKEN_ERROR(r.errors));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n};","map":{"version":3,"names":["authorizationReducer","axios","GraphQlEndpoint","login","username","password","dispatch","graphqlQuery","actions","LOGIN","response","url","method","headers","data","r","authorization","statusCode","LOGIN_SUCCESS","user","console","log","LOGIN_ERROR","errors","e","refresh_token","REFRESH_TOKEN","withCredentials","credentials","mode","refreshToken","REFRESH_TOKEN_SUCCESS","REFRESH_TOKEN_ERROR"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/src/redux/action_creators/authorization_action_creator.ts"],"sourcesContent":["import {AppDispatch} from \"../store\";\r\nimport {authorizationReducer} from \"../reducers/authorizationReducer\";\r\nimport axios from \"axios\";\r\nimport {GraphQlEndpoint} from \"../../global_variables\";\r\n\r\nexport const login = (username: string, password: string) => async (dispatch: AppDispatch) => {\r\n    const graphqlQuery = {\r\n        \"query\": `\r\n            query login{\r\n                authorization{\r\n                  login(userLogin: {\r\n                    username: \"${username}\"\r\n                    password: \"${password}\"\r\n                  }){\r\n                    errors\r\n                    refreshToken\r\n                    statusCode\r\n                    token\r\n                    user{\r\n                      id\r\n                      username\r\n                      name\r\n                      surname\r\n                      age\r\n                      email\r\n                      adress\r\n                      role\r\n                      isActivated\r\n                      permissions\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n        `,\r\n    };\r\n    dispatch(authorizationReducer.actions.LOGIN())\r\n    try {\r\n        const response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.authorization.login\r\n        if (r.statusCode == 200){\r\n            dispatch(authorizationReducer.actions.LOGIN_SUCCESS(r.user))\r\n            console.log(\"Successfully authorized!\")\r\n        }else{\r\n            dispatch(authorizationReducer.actions.LOGIN_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(authorizationReducer.actions.LOGIN_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const refresh_token = () => async (dispatch: AppDispatch) => {\r\n    try{\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation refresh{\r\n                  authorization{\r\n                    refreshToken{\r\n                      errors\r\n                      refreshToken\r\n                      statusCode\r\n                      token\r\n                      user{\r\n                        id\r\n                        username\r\n                        name\r\n                        surname\r\n                        age\r\n                        email\r\n                        adress\r\n                        role\r\n                        isActivated\r\n                        permissions\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        dispatch(authorizationReducer.actions.REFRESH_TOKEN())\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            credentials: 'include',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Access-Control-Allow-Origin': '*',\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n\r\n        let r = response.data.data.authorization.refreshToken\r\n        if (r.statusCode == 200){\r\n            dispatch(authorizationReducer.actions.REFRESH_TOKEN_SUCCESS(r.user))\r\n            console.log(\"Successfully refreshed!\")\r\n        }else{\r\n            dispatch(authorizationReducer.actions.REFRESH_TOKEN_ERROR(r.errors))\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}