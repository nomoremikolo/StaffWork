{"ast":null,"code":"import UniformNode from '../core/UniformNode.js';\nimport UVNode from './UVNode.js';\nclass TextureNode extends UniformNode {\n  constructor(value) {\n    let uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new UVNode();\n    let levelNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super(value, 'vec4');\n    this.isTextureNode = true;\n    this.uvNode = uvNode;\n    this.levelNode = levelNode;\n  }\n  getUniformHash( /*builder*/\n  ) {\n    return this.value.uuid;\n  }\n  getInputType( /*builder*/\n  ) {\n    return 'texture';\n  }\n  generate(builder, output) {\n    const texture = this.value;\n    if (!texture || texture.isTexture !== true) {\n      throw new Error('TextureNode: Need a three.js texture.');\n    }\n    const textureProperty = super.generate(builder, 'texture');\n    if (output === 'sampler') {\n      return textureProperty + '_sampler';\n    } else if (builder.isReference(output)) {\n      return textureProperty;\n    } else {\n      const nodeData = builder.getDataFromNode(this);\n      let snippet = nodeData.snippet;\n      if (snippet === undefined) {\n        const uvSnippet = this.uvNode.build(builder, 'vec2');\n        const levelNode = this.levelNode;\n        if (levelNode !== null) {\n          const levelSnippet = levelNode.build(builder, 'float');\n          snippet = builder.getTextureLevel(textureProperty, uvSnippet, levelSnippet);\n        } else {\n          snippet = builder.getTexture(textureProperty, uvSnippet);\n        }\n        nodeData.snippet = snippet;\n      }\n      return builder.format(snippet, 'vec4', output);\n    }\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.value = this.value.toJSON(data.meta).uuid;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.value = data.meta.textures[data.value];\n  }\n}\nexport default TextureNode;","map":{"version":3,"names":["UniformNode","UVNode","TextureNode","constructor","value","uvNode","levelNode","isTextureNode","getUniformHash","uuid","getInputType","generate","builder","output","texture","isTexture","Error","textureProperty","isReference","nodeData","getDataFromNode","snippet","undefined","uvSnippet","build","levelSnippet","getTextureLevel","getTexture","format","serialize","data","toJSON","meta","deserialize","textures"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/accessors/TextureNode.js"],"sourcesContent":["import UniformNode from '../core/UniformNode.js';\nimport UVNode from './UVNode.js';\n\nclass TextureNode extends UniformNode {\n\n\tconstructor( value, uvNode = new UVNode(), levelNode = null ) {\n\n\t\tsuper( value, 'vec4' );\n\n\t\tthis.isTextureNode = true;\n\n\t\tthis.uvNode = uvNode;\n\t\tthis.levelNode = levelNode;\n\n\t}\n\n\tgetUniformHash( /*builder*/ ) {\n\n\t\treturn this.value.uuid;\n\n\t}\n\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'texture';\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst texture = this.value;\n\n\t\tif ( ! texture || texture.isTexture !== true ) {\n\n\t\t\tthrow new Error( 'TextureNode: Need a three.js texture.' );\n\n\t\t}\n\n\t\tconst textureProperty = super.generate( builder, 'texture' );\n\n\t\tif ( output === 'sampler' ) {\n\n\t\t\treturn textureProperty + '_sampler';\n\n\t\t} else if ( builder.isReference( output ) ) {\n\n\t\t\treturn textureProperty;\n\n\t\t} else {\n\n\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\tlet snippet = nodeData.snippet;\n\n\t\t\tif ( snippet === undefined ) {\n\n\t\t\t\tconst uvSnippet = this.uvNode.build( builder, 'vec2' );\n\t\t\t\tconst levelNode = this.levelNode;\n\n\t\t\t\tif ( levelNode !== null ) {\n\n\t\t\t\t\tconst levelSnippet = levelNode.build( builder, 'float' );\n\n\t\t\t\t\tsnippet = builder.getTextureLevel( textureProperty, uvSnippet, levelSnippet );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsnippet = builder.getTexture( textureProperty, uvSnippet );\n\n\t\t\t\t}\n\n\t\t\t\tnodeData.snippet = snippet;\n\n\t\t\t}\n\n\t\t\treturn builder.format( snippet, 'vec4', output );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.value = this.value.toJSON( data.meta ).uuid;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.value = data.meta.textures[ data.value ];\n\n\t}\n\n}\n\nexport default TextureNode;\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,wBAAwB;AAChD,OAAOC,MAAM,MAAM,aAAa;AAEhC,MAAMC,WAAW,SAASF,WAAW,CAAC;EAErCG,WAAW,CAAEC,KAAK,EAA4C;IAAA,IAA1CC,MAAM,uEAAG,IAAIJ,MAAM,EAAE;IAAA,IAAEK,SAAS,uEAAG,IAAI;IAE1D,KAAK,CAAEF,KAAK,EAAE,MAAM,CAAE;IAEtB,IAAI,CAACG,aAAa,GAAG,IAAI;IAEzB,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAE3B;EAEAE,cAAc,EAAE;EAAA,EAAc;IAE7B,OAAO,IAAI,CAACJ,KAAK,CAACK,IAAI;EAEvB;EAEAC,YAAY,EAAE;EAAA,EAAc;IAE3B,OAAO,SAAS;EAEjB;EAEAC,QAAQ,CAAEC,OAAO,EAAEC,MAAM,EAAG;IAE3B,MAAMC,OAAO,GAAG,IAAI,CAACV,KAAK;IAE1B,IAAK,CAAEU,OAAO,IAAIA,OAAO,CAACC,SAAS,KAAK,IAAI,EAAG;MAE9C,MAAM,IAAIC,KAAK,CAAE,uCAAuC,CAAE;IAE3D;IAEA,MAAMC,eAAe,GAAG,KAAK,CAACN,QAAQ,CAAEC,OAAO,EAAE,SAAS,CAAE;IAE5D,IAAKC,MAAM,KAAK,SAAS,EAAG;MAE3B,OAAOI,eAAe,GAAG,UAAU;IAEpC,CAAC,MAAM,IAAKL,OAAO,CAACM,WAAW,CAAEL,MAAM,CAAE,EAAG;MAE3C,OAAOI,eAAe;IAEvB,CAAC,MAAM;MAEN,MAAME,QAAQ,GAAGP,OAAO,CAACQ,eAAe,CAAE,IAAI,CAAE;MAEhD,IAAIC,OAAO,GAAGF,QAAQ,CAACE,OAAO;MAE9B,IAAKA,OAAO,KAAKC,SAAS,EAAG;QAE5B,MAAMC,SAAS,GAAG,IAAI,CAAClB,MAAM,CAACmB,KAAK,CAAEZ,OAAO,EAAE,MAAM,CAAE;QACtD,MAAMN,SAAS,GAAG,IAAI,CAACA,SAAS;QAEhC,IAAKA,SAAS,KAAK,IAAI,EAAG;UAEzB,MAAMmB,YAAY,GAAGnB,SAAS,CAACkB,KAAK,CAAEZ,OAAO,EAAE,OAAO,CAAE;UAExDS,OAAO,GAAGT,OAAO,CAACc,eAAe,CAAET,eAAe,EAAEM,SAAS,EAAEE,YAAY,CAAE;QAE9E,CAAC,MAAM;UAENJ,OAAO,GAAGT,OAAO,CAACe,UAAU,CAAEV,eAAe,EAAEM,SAAS,CAAE;QAE3D;QAEAJ,QAAQ,CAACE,OAAO,GAAGA,OAAO;MAE3B;MAEA,OAAOT,OAAO,CAACgB,MAAM,CAAEP,OAAO,EAAE,MAAM,EAAER,MAAM,CAAE;IAEjD;EAED;EAEAgB,SAAS,CAAEC,IAAI,EAAG;IAEjB,KAAK,CAACD,SAAS,CAAEC,IAAI,CAAE;IAEvBA,IAAI,CAAC1B,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC2B,MAAM,CAAED,IAAI,CAACE,IAAI,CAAE,CAACvB,IAAI;EAEjD;EAEAwB,WAAW,CAAEH,IAAI,EAAG;IAEnB,KAAK,CAACG,WAAW,CAAEH,IAAI,CAAE;IAEzB,IAAI,CAAC1B,KAAK,GAAG0B,IAAI,CAACE,IAAI,CAACE,QAAQ,CAAEJ,IAAI,CAAC1B,KAAK,CAAE;EAE9C;AAED;AAEA,eAAeF,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}