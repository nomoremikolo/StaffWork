{"ast":null,"code":"import { Mesh } from '../objects/Mesh.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { SphereGeometry } from '../geometries/SphereGeometry.js';\nclass PointLightHelper extends Mesh {\n  constructor(light, sphereSize, color) {\n    const geometry = new SphereGeometry(sphereSize, 4, 2);\n    const material = new MeshBasicMaterial({\n      wireframe: true,\n      fog: false,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.light = light;\n    this.color = color;\n    this.type = 'PointLightHelper';\n    this.matrix = this.light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.update();\n\n    /*\n    // TODO: delete this comment?\n    const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n    const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n    this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n    this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n    const d = light.distance;\n    if ( d === 0.0 ) {\n    \tthis.lightDistance.visible = false;\n    } else {\n    \tthis.lightDistance.scale.set( d, d, d );\n    }\n    this.add( this.lightDistance );\n    */\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n  update() {\n    this.light.updateWorldMatrix(true, false);\n    if (this.color !== undefined) {\n      this.material.color.set(this.color);\n    } else {\n      this.material.color.copy(this.light.color);\n    }\n\n    /*\n    const d = this.light.distance;\n    \tif ( d === 0.0 ) {\n    \t\tthis.lightDistance.visible = false;\n    \t} else {\n    \t\tthis.lightDistance.visible = true;\n    \tthis.lightDistance.scale.set( d, d, d );\n    \t}\n    */\n  }\n}\n\nexport { PointLightHelper };","map":{"version":3,"names":["Mesh","MeshBasicMaterial","SphereGeometry","PointLightHelper","constructor","light","sphereSize","color","geometry","material","wireframe","fog","toneMapped","type","matrix","matrixWorld","matrixAutoUpdate","update","dispose","updateWorldMatrix","undefined","set","copy"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/helpers/PointLightHelper.js"],"sourcesContent":["import { Mesh } from '../objects/Mesh.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { SphereGeometry } from '../geometries/SphereGeometry.js';\n\nclass PointLightHelper extends Mesh {\n\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.light = light;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\n\nexport { PointLightHelper };\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,oBAAoB;AACzC,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,cAAc,QAAQ,iCAAiC;AAEhE,MAAMC,gBAAgB,SAASH,IAAI,CAAC;EAEnCI,WAAW,CAAEC,KAAK,EAAEC,UAAU,EAAEC,KAAK,EAAG;IAEvC,MAAMC,QAAQ,GAAG,IAAIN,cAAc,CAAEI,UAAU,EAAE,CAAC,EAAE,CAAC,CAAE;IACvD,MAAMG,QAAQ,GAAG,IAAIR,iBAAiB,CAAE;MAAES,SAAS,EAAE,IAAI;MAAEC,GAAG,EAAE,KAAK;MAAEC,UAAU,EAAE;IAAM,CAAC,CAAE;IAE5F,KAAK,CAAEJ,QAAQ,EAAEC,QAAQ,CAAE;IAE3B,IAAI,CAACJ,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACE,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACM,IAAI,GAAG,kBAAkB;IAE9B,IAAI,CAACC,MAAM,GAAG,IAAI,CAACT,KAAK,CAACU,WAAW;IACpC,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAE7B,IAAI,CAACC,MAAM,EAAE;;IAGb;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAUC;;EAEAC,OAAO,GAAG;IAET,IAAI,CAACV,QAAQ,CAACU,OAAO,EAAE;IACvB,IAAI,CAACT,QAAQ,CAACS,OAAO,EAAE;EAExB;EAEAD,MAAM,GAAG;IAER,IAAI,CAACZ,KAAK,CAACc,iBAAiB,CAAE,IAAI,EAAE,KAAK,CAAE;IAE3C,IAAK,IAAI,CAACZ,KAAK,KAAKa,SAAS,EAAG;MAE/B,IAAI,CAACX,QAAQ,CAACF,KAAK,CAACc,GAAG,CAAE,IAAI,CAACd,KAAK,CAAE;IAEtC,CAAC,MAAM;MAEN,IAAI,CAACE,QAAQ,CAACF,KAAK,CAACe,IAAI,CAAE,IAAI,CAACjB,KAAK,CAACE,KAAK,CAAE;IAE7C;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAOC;AAED;;AAGA,SAASJ,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}