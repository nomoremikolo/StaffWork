{"ast":null,"code":"import { Mesh } from './Mesh.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nconst _basePosition = /*@__PURE__*/new Vector3();\nconst _skinIndex = /*@__PURE__*/new Vector4();\nconst _skinWeight = /*@__PURE__*/new Vector4();\nconst _vector = /*@__PURE__*/new Vector3();\nconst _matrix = /*@__PURE__*/new Matrix4();\nclass SkinnedMesh extends Mesh {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.isSkinnedMesh = true;\n    this.type = 'SkinnedMesh';\n    this.bindMode = 'attached';\n    this.bindMatrix = new Matrix4();\n    this.bindMatrixInverse = new Matrix4();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.bindMode = source.bindMode;\n    this.bindMatrix.copy(source.bindMatrix);\n    this.bindMatrixInverse.copy(source.bindMatrixInverse);\n    this.skeleton = source.skeleton;\n    return this;\n  }\n  bind(skeleton, bindMatrix) {\n    this.skeleton = skeleton;\n    if (bindMatrix === undefined) {\n      this.updateMatrixWorld(true);\n      this.skeleton.calculateInverses();\n      bindMatrix = this.matrixWorld;\n    }\n    this.bindMatrix.copy(bindMatrix);\n    this.bindMatrixInverse.copy(bindMatrix).invert();\n  }\n  pose() {\n    this.skeleton.pose();\n  }\n  normalizeSkinWeights() {\n    const vector = new Vector4();\n    const skinWeight = this.geometry.attributes.skinWeight;\n    for (let i = 0, l = skinWeight.count; i < l; i++) {\n      vector.fromBufferAttribute(skinWeight, i);\n      const scale = 1.0 / vector.manhattanLength();\n      if (scale !== Infinity) {\n        vector.multiplyScalar(scale);\n      } else {\n        vector.set(1, 0, 0, 0); // do something reasonable\n      }\n\n      skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n    }\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.bindMode === 'attached') {\n      this.bindMatrixInverse.copy(this.matrixWorld).invert();\n    } else if (this.bindMode === 'detached') {\n      this.bindMatrixInverse.copy(this.bindMatrix).invert();\n    } else {\n      console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n    }\n  }\n  boneTransform(index, target) {\n    const skeleton = this.skeleton;\n    const geometry = this.geometry;\n    _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n    _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n    _basePosition.copy(target).applyMatrix4(this.bindMatrix);\n    target.set(0, 0, 0);\n    for (let i = 0; i < 4; i++) {\n      const weight = _skinWeight.getComponent(i);\n      if (weight !== 0) {\n        const boneIndex = _skinIndex.getComponent(i);\n        _matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n        target.addScaledVector(_vector.copy(_basePosition).applyMatrix4(_matrix), weight);\n      }\n    }\n    return target.applyMatrix4(this.bindMatrixInverse);\n  }\n}\nexport { SkinnedMesh };","map":{"version":3,"names":["Mesh","Matrix4","Vector3","Vector4","_basePosition","_skinIndex","_skinWeight","_vector","_matrix","SkinnedMesh","constructor","geometry","material","isSkinnedMesh","type","bindMode","bindMatrix","bindMatrixInverse","copy","source","recursive","skeleton","bind","undefined","updateMatrixWorld","calculateInverses","matrixWorld","invert","pose","normalizeSkinWeights","vector","skinWeight","attributes","i","l","count","fromBufferAttribute","scale","manhattanLength","Infinity","multiplyScalar","set","setXYZW","x","y","z","w","force","console","warn","boneTransform","index","target","skinIndex","applyMatrix4","weight","getComponent","boneIndex","multiplyMatrices","bones","boneInverses","addScaledVector"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/objects/SkinnedMesh.js"],"sourcesContent":["import { Mesh } from './Mesh.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _matrix = /*@__PURE__*/ new Matrix4();\n\nclass SkinnedMesh extends Mesh {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isSkinnedMesh = true;\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\treturn this;\n\n\t}\n\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\tboneTransform( index, target ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( target ).applyMatrix4( this.bindMatrix );\n\n\t\ttarget.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\ttarget.addScaledVector( _vector.copy( _basePosition ).applyMatrix4( _matrix ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n}\n\nexport { SkinnedMesh };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}