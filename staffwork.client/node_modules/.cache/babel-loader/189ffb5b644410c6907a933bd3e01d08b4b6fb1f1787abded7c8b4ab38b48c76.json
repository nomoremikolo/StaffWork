{"ast":null,"code":"import { Vector3 } from './Vector3.js';\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n  constructor() {\n    this.isSphericalHarmonics3 = true;\n    this.coefficients = [];\n    for (let i = 0; i < 9; i++) {\n      this.coefficients.push(new Vector3());\n    }\n  }\n  set(coefficients) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].copy(coefficients[i]);\n    }\n    return this;\n  }\n  zero() {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].set(0, 0, 0);\n    }\n    return this;\n  }\n\n  // get the radiance in the direction of the normal\n  // target is a Vector3\n  getAt(normal, target) {\n    // normal is assumed to be unit length\n\n    const x = normal.x,\n      y = normal.y,\n      z = normal.z;\n    const coeff = this.coefficients;\n\n    // band 0\n    target.copy(coeff[0]).multiplyScalar(0.282095);\n\n    // band 1\n    target.addScaledVector(coeff[1], 0.488603 * y);\n    target.addScaledVector(coeff[2], 0.488603 * z);\n    target.addScaledVector(coeff[3], 0.488603 * x);\n\n    // band 2\n    target.addScaledVector(coeff[4], 1.092548 * (x * y));\n    target.addScaledVector(coeff[5], 1.092548 * (y * z));\n    target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n    target.addScaledVector(coeff[7], 1.092548 * (x * z));\n    target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n    return target;\n  }\n\n  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n  // target is a Vector3\n  // https://graphics.stanford.edu/papers/envmap/envmap.pdf\n  getIrradianceAt(normal, target) {\n    // normal is assumed to be unit length\n\n    const x = normal.x,\n      y = normal.y,\n      z = normal.z;\n    const coeff = this.coefficients;\n\n    // band 0\n    target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\n    // band 1\n    target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n    target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n    target.addScaledVector(coeff[3], 2.0 * 0.511664 * x);\n\n    // band 2\n    target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n    target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n    target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n    target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n    target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n    return target;\n  }\n  add(sh) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].add(sh.coefficients[i]);\n    }\n    return this;\n  }\n  addScaledSH(sh, s) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].addScaledVector(sh.coefficients[i], s);\n    }\n    return this;\n  }\n  scale(s) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].multiplyScalar(s);\n    }\n    return this;\n  }\n  lerp(sh, alpha) {\n    for (let i = 0; i < 9; i++) {\n      this.coefficients[i].lerp(sh.coefficients[i], alpha);\n    }\n    return this;\n  }\n  equals(sh) {\n    for (let i = 0; i < 9; i++) {\n      if (!this.coefficients[i].equals(sh.coefficients[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  copy(sh) {\n    return this.set(sh.coefficients);\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const coefficients = this.coefficients;\n    for (let i = 0; i < 9; i++) {\n      coefficients[i].fromArray(array, offset + i * 3);\n    }\n    return this;\n  }\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const coefficients = this.coefficients;\n    for (let i = 0; i < 9; i++) {\n      coefficients[i].toArray(array, offset + i * 3);\n    }\n    return array;\n  }\n\n  // evaluate the basis functions\n  // shBasis is an Array[ 9 ]\n  static getBasisAt(normal, shBasis) {\n    // normal is assumed to be unit length\n\n    const x = normal.x,\n      y = normal.y,\n      z = normal.z;\n\n    // band 0\n    shBasis[0] = 0.282095;\n\n    // band 1\n    shBasis[1] = 0.488603 * y;\n    shBasis[2] = 0.488603 * z;\n    shBasis[3] = 0.488603 * x;\n\n    // band 2\n    shBasis[4] = 1.092548 * x * y;\n    shBasis[5] = 1.092548 * y * z;\n    shBasis[6] = 0.315392 * (3 * z * z - 1);\n    shBasis[7] = 1.092548 * x * z;\n    shBasis[8] = 0.546274 * (x * x - y * y);\n  }\n}\nexport { SphericalHarmonics3 };","map":{"version":3,"names":["Vector3","SphericalHarmonics3","constructor","isSphericalHarmonics3","coefficients","i","push","set","copy","zero","getAt","normal","target","x","y","z","coeff","multiplyScalar","addScaledVector","getIrradianceAt","add","sh","addScaledSH","s","scale","lerp","alpha","equals","clone","fromArray","array","offset","toArray","getBasisAt","shBasis"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/math/SphericalHarmonics3.js"],"sourcesContent":["import { Vector3 } from './Vector3.js';\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n\n\tconstructor() {\n\n\t\tthis.isSphericalHarmonics3 = true;\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\nexport { SphericalHarmonics3 };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}