{"ast":null,"code":"import Node from './Node.js';\nimport OperatorNode from '../math/OperatorNode.js';\nclass VarNode extends Node {\n  constructor(node) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n    this.node = node;\n    this.name = name;\n  }\n  op(op) {\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n    this.node = new OperatorNode(op, this.node, ...params);\n    return this;\n  }\n  assign() {\n    for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      params[_key2] = arguments[_key2];\n    }\n    return this.op('=', ...params);\n  }\n  add() {\n    for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      params[_key3] = arguments[_key3];\n    }\n    return this.op('+', ...params);\n  }\n  sub() {\n    for (var _len4 = arguments.length, params = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      params[_key4] = arguments[_key4];\n    }\n    return this.op('-', ...params);\n  }\n  mul() {\n    for (var _len5 = arguments.length, params = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      params[_key5] = arguments[_key5];\n    }\n    return this.op('*', ...params);\n  }\n  div() {\n    for (var _len6 = arguments.length, params = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      params[_key6] = arguments[_key6];\n    }\n    return this.op('/', ...params);\n  }\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n  getNodeType(builder) {\n    return this.node.getNodeType(builder);\n  }\n  generate(builder) {\n    const node = this.node;\n    const name = this.name;\n    if (name === null && node.isTempNode === true) {\n      return node.build(builder);\n    }\n    const type = builder.getVectorType(this.getNodeType(builder));\n    const snippet = node.build(builder, type);\n    const nodeVar = builder.getVarFromNode(this, type);\n    if (name !== null) {\n      nodeVar.name = name;\n    }\n    const propertyName = builder.getPropertyName(nodeVar);\n    builder.addFlowCode(`${propertyName} = ${snippet}`);\n    return propertyName;\n  }\n}\nexport default VarNode;","map":{"version":3,"names":["Node","OperatorNode","VarNode","constructor","node","name","op","params","assign","add","sub","mul","div","getHash","builder","getNodeType","generate","isTempNode","build","type","getVectorType","snippet","nodeVar","getVarFromNode","propertyName","getPropertyName","addFlowCode"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/core/VarNode.js"],"sourcesContent":["import Node from './Node.js';\nimport OperatorNode from '../math/OperatorNode.js';\n\nclass VarNode extends Node {\n\n\tconstructor( node, name = null ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.name = name;\n\n\t}\n\n\top( op, ...params ) {\n\n\t\tthis.node = new OperatorNode( op, this.node, ...params );\n\n\t\treturn this;\n\n\t}\n\n\tassign( ...params ) {\n\n\t\treturn this.op( '=', ...params );\n\n\t}\n\n\tadd( ...params ) {\n\n\t\treturn this.op( '+', ...params );\n\n\t}\n\n\tsub( ...params ) {\n\n\t\treturn this.op( '-', ...params );\n\n\t}\n\n\tmul( ...params ) {\n\n\t\treturn this.op( '*', ...params );\n\n\t}\n\n\tdiv( ...params ) {\n\n\t\treturn this.op( '/', ...params );\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.name || super.getHash( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst node = this.node;\n\t\tconst name = this.name;\n\n\t\tif ( name === null && node.isTempNode === true ) {\n\n\t\t\treturn node.build( builder );\n\n\t\t}\n\n\t\tconst type = builder.getVectorType( this.getNodeType( builder ) );\n\n\t\tconst snippet = node.build( builder, type );\n\t\tconst nodeVar = builder.getVarFromNode( this, type );\n\n\t\tif ( name !== null ) {\n\n\t\t\tnodeVar.name = name;\n\n\t\t}\n\n\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\tbuilder.addFlowCode( `${propertyName} = ${snippet}` );\n\n\t\treturn propertyName;\n\n\t}\n\n}\n\nexport default VarNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAC5B,OAAOC,YAAY,MAAM,yBAAyB;AAElD,MAAMC,OAAO,SAASF,IAAI,CAAC;EAE1BG,WAAW,CAAEC,IAAI,EAAgB;IAAA,IAAdC,IAAI,uEAAG,IAAI;IAE7B,KAAK,EAAE;IAEP,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAEjB;EAEAC,EAAE,CAAEA,EAAE,EAAc;IAAA,kCAATC,MAAM;MAANA,MAAM;IAAA;IAEhB,IAAI,CAACH,IAAI,GAAG,IAAIH,YAAY,CAAEK,EAAE,EAAE,IAAI,CAACF,IAAI,EAAE,GAAGG,MAAM,CAAE;IAExD,OAAO,IAAI;EAEZ;EAEAC,MAAM,GAAc;IAAA,mCAATD,MAAM;MAANA,MAAM;IAAA;IAEhB,OAAO,IAAI,CAACD,EAAE,CAAE,GAAG,EAAE,GAAGC,MAAM,CAAE;EAEjC;EAEAE,GAAG,GAAc;IAAA,mCAATF,MAAM;MAANA,MAAM;IAAA;IAEb,OAAO,IAAI,CAACD,EAAE,CAAE,GAAG,EAAE,GAAGC,MAAM,CAAE;EAEjC;EAEAG,GAAG,GAAc;IAAA,mCAATH,MAAM;MAANA,MAAM;IAAA;IAEb,OAAO,IAAI,CAACD,EAAE,CAAE,GAAG,EAAE,GAAGC,MAAM,CAAE;EAEjC;EAEAI,GAAG,GAAc;IAAA,mCAATJ,MAAM;MAANA,MAAM;IAAA;IAEb,OAAO,IAAI,CAACD,EAAE,CAAE,GAAG,EAAE,GAAGC,MAAM,CAAE;EAEjC;EAEAK,GAAG,GAAc;IAAA,mCAATL,MAAM;MAANA,MAAM;IAAA;IAEb,OAAO,IAAI,CAACD,EAAE,CAAE,GAAG,EAAE,GAAGC,MAAM,CAAE;EAEjC;EAEAM,OAAO,CAAEC,OAAO,EAAG;IAElB,OAAO,IAAI,CAACT,IAAI,IAAI,KAAK,CAACQ,OAAO,CAAEC,OAAO,CAAE;EAE7C;EAEAC,WAAW,CAAED,OAAO,EAAG;IAEtB,OAAO,IAAI,CAACV,IAAI,CAACW,WAAW,CAAED,OAAO,CAAE;EAExC;EAEAE,QAAQ,CAAEF,OAAO,EAAG;IAEnB,MAAMV,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMC,IAAI,GAAG,IAAI,CAACA,IAAI;IAEtB,IAAKA,IAAI,KAAK,IAAI,IAAID,IAAI,CAACa,UAAU,KAAK,IAAI,EAAG;MAEhD,OAAOb,IAAI,CAACc,KAAK,CAAEJ,OAAO,CAAE;IAE7B;IAEA,MAAMK,IAAI,GAAGL,OAAO,CAACM,aAAa,CAAE,IAAI,CAACL,WAAW,CAAED,OAAO,CAAE,CAAE;IAEjE,MAAMO,OAAO,GAAGjB,IAAI,CAACc,KAAK,CAAEJ,OAAO,EAAEK,IAAI,CAAE;IAC3C,MAAMG,OAAO,GAAGR,OAAO,CAACS,cAAc,CAAE,IAAI,EAAEJ,IAAI,CAAE;IAEpD,IAAKd,IAAI,KAAK,IAAI,EAAG;MAEpBiB,OAAO,CAACjB,IAAI,GAAGA,IAAI;IAEpB;IAEA,MAAMmB,YAAY,GAAGV,OAAO,CAACW,eAAe,CAAEH,OAAO,CAAE;IAEvDR,OAAO,CAACY,WAAW,CAAG,GAAEF,YAAa,MAAKH,OAAQ,EAAC,CAAE;IAErD,OAAOG,YAAY;EAEpB;AAED;AAEA,eAAetB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}