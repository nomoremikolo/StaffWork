{"ast":null,"code":"import NodeMaterial from './NodeMaterial.js';\nimport LineBasicNodeMaterial from './LineBasicNodeMaterial.js';\nimport MeshBasicNodeMaterial from './MeshBasicNodeMaterial.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\nimport MeshPhysicalNodeMaterial from './MeshPhysicalNodeMaterial.js';\nimport PointsNodeMaterial from './PointsNodeMaterial.js';\nimport SpriteNodeMaterial from './SpriteNodeMaterial.js';\nexport { NodeMaterial, LineBasicNodeMaterial, MeshBasicNodeMaterial, MeshStandardNodeMaterial, MeshPhysicalNodeMaterial, PointsNodeMaterial, SpriteNodeMaterial };\nNodeMaterial.fromMaterial = function (material) {\n  const materialLib = {\n    NodeMaterial,\n    LineBasicNodeMaterial,\n    MeshBasicNodeMaterial,\n    MeshStandardNodeMaterial,\n    MeshPhysicalNodeMaterial,\n    PointsNodeMaterial,\n    SpriteNodeMaterial\n  };\n  const type = material.type.replace('Material', 'NodeMaterial');\n  if (materialLib[type] === undefined) {\n    if (material.isNodeMaterial !== true) {\n      throw new Error(`NodeMaterial: Material \"${material.type}\" is not compatible.`);\n    }\n    return material; // is already a node material\n  }\n\n  const nodeMaterial = new materialLib[type]();\n  for (const key in material) {\n    nodeMaterial[key] = material[key];\n  }\n  return nodeMaterial;\n};","map":{"version":3,"names":["NodeMaterial","LineBasicNodeMaterial","MeshBasicNodeMaterial","MeshStandardNodeMaterial","MeshPhysicalNodeMaterial","PointsNodeMaterial","SpriteNodeMaterial","fromMaterial","material","materialLib","type","replace","undefined","isNodeMaterial","Error","nodeMaterial","key"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/materials/Materials.js"],"sourcesContent":["import NodeMaterial from './NodeMaterial.js';\nimport LineBasicNodeMaterial from './LineBasicNodeMaterial.js';\nimport MeshBasicNodeMaterial from './MeshBasicNodeMaterial.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\nimport MeshPhysicalNodeMaterial from './MeshPhysicalNodeMaterial.js';\nimport PointsNodeMaterial from './PointsNodeMaterial.js';\nimport SpriteNodeMaterial from './SpriteNodeMaterial.js';\n\nexport {\n\tNodeMaterial,\n\tLineBasicNodeMaterial,\n\tMeshBasicNodeMaterial,\n\tMeshStandardNodeMaterial,\n\tMeshPhysicalNodeMaterial,\n\tPointsNodeMaterial,\n\tSpriteNodeMaterial\n};\n\nNodeMaterial.fromMaterial = function ( material ) {\n\n\tconst materialLib = {\n\t\tNodeMaterial,\n\t\tLineBasicNodeMaterial,\n\t\tMeshBasicNodeMaterial,\n\t\tMeshStandardNodeMaterial,\n\t\tMeshPhysicalNodeMaterial,\n\t\tPointsNodeMaterial,\n\t\tSpriteNodeMaterial\n\t};\n\n\tconst type = material.type.replace( 'Material', 'NodeMaterial' );\n\n\tif ( materialLib[ type ] === undefined ) {\n\n\t\tif ( material.isNodeMaterial !== true ) {\n\n\t\t\tthrow new Error( `NodeMaterial: Material \"${ material.type }\" is not compatible.` );\n\n\t\t}\n\n\t\treturn material; // is already a node material\n\n\t}\n\n\tconst nodeMaterial = new materialLib[ type ]();\n\n\tfor ( const key in material ) {\n\n\t\tnodeMaterial[ key ] = material[ key ];\n\n\t}\n\n\treturn nodeMaterial;\n\n};\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,qBAAqB,MAAM,4BAA4B;AAC9D,OAAOC,qBAAqB,MAAM,4BAA4B;AAC9D,OAAOC,wBAAwB,MAAM,+BAA+B;AACpE,OAAOC,wBAAwB,MAAM,+BAA+B;AACpE,OAAOC,kBAAkB,MAAM,yBAAyB;AACxD,OAAOC,kBAAkB,MAAM,yBAAyB;AAExD,SACCN,YAAY,EACZC,qBAAqB,EACrBC,qBAAqB,EACrBC,wBAAwB,EACxBC,wBAAwB,EACxBC,kBAAkB,EAClBC,kBAAkB;AAGnBN,YAAY,CAACO,YAAY,GAAG,UAAWC,QAAQ,EAAG;EAEjD,MAAMC,WAAW,GAAG;IACnBT,YAAY;IACZC,qBAAqB;IACrBC,qBAAqB;IACrBC,wBAAwB;IACxBC,wBAAwB;IACxBC,kBAAkB;IAClBC;EACD,CAAC;EAED,MAAMI,IAAI,GAAGF,QAAQ,CAACE,IAAI,CAACC,OAAO,CAAE,UAAU,EAAE,cAAc,CAAE;EAEhE,IAAKF,WAAW,CAAEC,IAAI,CAAE,KAAKE,SAAS,EAAG;IAExC,IAAKJ,QAAQ,CAACK,cAAc,KAAK,IAAI,EAAG;MAEvC,MAAM,IAAIC,KAAK,CAAG,2BAA2BN,QAAQ,CAACE,IAAM,sBAAqB,CAAE;IAEpF;IAEA,OAAOF,QAAQ,CAAC,CAAC;EAElB;;EAEA,MAAMO,YAAY,GAAG,IAAIN,WAAW,CAAEC,IAAI,CAAE,EAAE;EAE9C,KAAM,MAAMM,GAAG,IAAIR,QAAQ,EAAG;IAE7BO,YAAY,CAAEC,GAAG,CAAE,GAAGR,QAAQ,CAAEQ,GAAG,CAAE;EAEtC;EAEA,OAAOD,YAAY;AAEpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}