{"ast":null,"code":"import TempNode from '../core/Node.js';\nimport { ShaderNode, vec3, pow, mul, sub, mix, vec4, lessThanEqual } from '../shadernode/ShaderNodeBaseElements.js';\nimport { LinearEncoding, sRGBEncoding } from 'three';\nexport const LinearToLinear = new ShaderNode(inputs => {\n  return inputs.value;\n});\nexport const LinearTosRGB = new ShaderNode(inputs => {\n  const {\n    value\n  } = inputs;\n  const rgb = value.rgb;\n  const a = sub(mul(pow(value.rgb, vec3(0.41666)), 1.055), vec3(0.055));\n  const b = mul(rgb, 12.92);\n  const factor = vec3(lessThanEqual(rgb, vec3(0.0031308)));\n  const rgbResult = mix(a, b, factor);\n  return vec4(rgbResult, value.a);\n});\nconst EncodingLib = {\n  LinearToLinear,\n  LinearTosRGB\n};\nclass ColorSpaceNode extends TempNode {\n  static LINEAR_TO_LINEAR = 'LinearToLinear';\n  static LINEAR_TO_SRGB = 'LinearTosRGB';\n  constructor(method, node) {\n    super('vec4');\n    this.method = method;\n    this.node = node;\n  }\n  fromEncoding(encoding) {\n    let method = null;\n    if (encoding === LinearEncoding) {\n      method = 'Linear';\n    } else if (encoding === sRGBEncoding) {\n      method = 'sRGB';\n    }\n    this.method = 'LinearTo' + method;\n    return this;\n  }\n  construct() {\n    const method = this.method;\n    const node = this.node;\n    let outputNode = null;\n    if (method !== ColorSpaceNode.LINEAR_TO_LINEAR) {\n      const encodingFunctionNode = EncodingLib[method];\n      outputNode = encodingFunctionNode.call({\n        value: node\n      });\n    } else {\n      outputNode = node;\n    }\n    return outputNode;\n  }\n}\nexport default ColorSpaceNode;","map":{"version":3,"names":["TempNode","ShaderNode","vec3","pow","mul","sub","mix","vec4","lessThanEqual","LinearEncoding","sRGBEncoding","LinearToLinear","inputs","value","LinearTosRGB","rgb","a","b","factor","rgbResult","EncodingLib","ColorSpaceNode","LINEAR_TO_LINEAR","LINEAR_TO_SRGB","constructor","method","node","fromEncoding","encoding","construct","outputNode","encodingFunctionNode","call"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/display/ColorSpaceNode.js"],"sourcesContent":["import TempNode from '../core/Node.js';\nimport { ShaderNode, vec3, pow, mul, sub, mix, vec4, lessThanEqual } from '../shadernode/ShaderNodeBaseElements.js';\n\nimport { LinearEncoding, sRGBEncoding } from 'three';\n\nexport const LinearToLinear = new ShaderNode( ( inputs ) => {\n\n\treturn inputs.value;\n\n} );\n\nexport const LinearTosRGB = new ShaderNode( ( inputs ) => {\n\n\tconst { value } = inputs;\n\n\tconst rgb = value.rgb;\n\n\tconst a = sub( mul( pow( value.rgb, vec3( 0.41666 ) ), 1.055 ), vec3( 0.055 ) );\n\tconst b = mul( rgb, 12.92 );\n\tconst factor = vec3( lessThanEqual( rgb, vec3( 0.0031308 ) ) );\n\n\tconst rgbResult = mix( a, b, factor );\n\n\treturn vec4( rgbResult, value.a );\n\n} );\n\nconst EncodingLib = {\n\tLinearToLinear,\n\tLinearTosRGB\n};\n\nclass ColorSpaceNode extends TempNode {\n\n\tstatic LINEAR_TO_LINEAR = 'LinearToLinear';\n\tstatic LINEAR_TO_SRGB = 'LinearTosRGB';\n\n\tconstructor( method, node ) {\n\n\t\tsuper( 'vec4' );\n\n\t\tthis.method = method;\n\n\t\tthis.node = node;\n\n\t}\n\n\tfromEncoding( encoding ) {\n\n\t\tlet method = null;\n\n\t\tif ( encoding === LinearEncoding ) {\n\n\t\t\tmethod = 'Linear';\n\n\t\t} else if ( encoding === sRGBEncoding ) {\n\n\t\t\tmethod = 'sRGB';\n\n\t\t}\n\n\t\tthis.method = 'LinearTo' + method;\n\n\t\treturn this;\n\n\t}\n\n\tconstruct() {\n\n\t\tconst method = this.method;\n\t\tconst node = this.node;\n\n\t\tlet outputNode = null;\n\n\t\tif ( method !== ColorSpaceNode.LINEAR_TO_LINEAR ) {\n\n\t\t\tconst encodingFunctionNode = EncodingLib[ method ];\n\n\t\t\toutputNode = encodingFunctionNode.call( {\n\t\t\t\tvalue: node\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\toutputNode = node;\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default ColorSpaceNode;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,iBAAiB;AACtC,SAASC,UAAU,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,aAAa,QAAQ,yCAAyC;AAEnH,SAASC,cAAc,EAAEC,YAAY,QAAQ,OAAO;AAEpD,OAAO,MAAMC,cAAc,GAAG,IAAIV,UAAU,CAAIW,MAAM,IAAM;EAE3D,OAAOA,MAAM,CAACC,KAAK;AAEpB,CAAC,CAAE;AAEH,OAAO,MAAMC,YAAY,GAAG,IAAIb,UAAU,CAAIW,MAAM,IAAM;EAEzD,MAAM;IAAEC;EAAM,CAAC,GAAGD,MAAM;EAExB,MAAMG,GAAG,GAAGF,KAAK,CAACE,GAAG;EAErB,MAAMC,CAAC,GAAGX,GAAG,CAAED,GAAG,CAAED,GAAG,CAAEU,KAAK,CAACE,GAAG,EAAEb,IAAI,CAAE,OAAO,CAAE,CAAE,EAAE,KAAK,CAAE,EAAEA,IAAI,CAAE,KAAK,CAAE,CAAE;EAC/E,MAAMe,CAAC,GAAGb,GAAG,CAAEW,GAAG,EAAE,KAAK,CAAE;EAC3B,MAAMG,MAAM,GAAGhB,IAAI,CAAEM,aAAa,CAAEO,GAAG,EAAEb,IAAI,CAAE,SAAS,CAAE,CAAE,CAAE;EAE9D,MAAMiB,SAAS,GAAGb,GAAG,CAAEU,CAAC,EAAEC,CAAC,EAAEC,MAAM,CAAE;EAErC,OAAOX,IAAI,CAAEY,SAAS,EAAEN,KAAK,CAACG,CAAC,CAAE;AAElC,CAAC,CAAE;AAEH,MAAMI,WAAW,GAAG;EACnBT,cAAc;EACdG;AACD,CAAC;AAED,MAAMO,cAAc,SAASrB,QAAQ,CAAC;EAErC,OAAOsB,gBAAgB,GAAG,gBAAgB;EAC1C,OAAOC,cAAc,GAAG,cAAc;EAEtCC,WAAW,CAAEC,MAAM,EAAEC,IAAI,EAAG;IAE3B,KAAK,CAAE,MAAM,CAAE;IAEf,IAAI,CAACD,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAEjB;EAEAC,YAAY,CAAEC,QAAQ,EAAG;IAExB,IAAIH,MAAM,GAAG,IAAI;IAEjB,IAAKG,QAAQ,KAAKnB,cAAc,EAAG;MAElCgB,MAAM,GAAG,QAAQ;IAElB,CAAC,MAAM,IAAKG,QAAQ,KAAKlB,YAAY,EAAG;MAEvCe,MAAM,GAAG,MAAM;IAEhB;IAEA,IAAI,CAACA,MAAM,GAAG,UAAU,GAAGA,MAAM;IAEjC,OAAO,IAAI;EAEZ;EAEAI,SAAS,GAAG;IAEX,MAAMJ,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,IAAI,GAAG,IAAI,CAACA,IAAI;IAEtB,IAAII,UAAU,GAAG,IAAI;IAErB,IAAKL,MAAM,KAAKJ,cAAc,CAACC,gBAAgB,EAAG;MAEjD,MAAMS,oBAAoB,GAAGX,WAAW,CAAEK,MAAM,CAAE;MAElDK,UAAU,GAAGC,oBAAoB,CAACC,IAAI,CAAE;QACvCnB,KAAK,EAAEa;MACR,CAAC,CAAE;IAEJ,CAAC,MAAM;MAENI,UAAU,GAAGJ,IAAI;IAElB;IAEA,OAAOI,UAAU;EAElB;AAED;AAEA,eAAeT,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}