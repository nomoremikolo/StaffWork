{"ast":null,"code":"import { Vector3 } from '../../math/Vector3.js';\nimport { Curve } from '../core/Curve.js';\n\n/**\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n  let c0 = 0,\n    c1 = 0,\n    c2 = 0,\n    c3 = 0;\n\n  /*\n   * Compute coefficients for a cubic polynomial\n   *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n   * such that\n   *   p(0) = x0, p(1) = x1\n   *  and\n   *   p'(0) = t0, p'(1) = t1.\n   */\n  function init(x0, x1, t0, t1) {\n    c0 = x0;\n    c1 = t0;\n    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n    c3 = 2 * x0 - 2 * x1 + t0 + t1;\n  }\n  return {\n    initCatmullRom: function (x0, x1, x2, x3, tension) {\n      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n    },\n    initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n      // compute tangents when parameterized in [t1,t2]\n      let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n      let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;\n\n      // rescale tangents for parametrization in [0,1]\n      t1 *= dt1;\n      t2 *= dt1;\n      init(x1, x2, t1, t2);\n    },\n    calc: function (t) {\n      const t2 = t * t;\n      const t3 = t2 * t;\n      return c0 + c1 * t + c2 * t2 + c3 * t3;\n    }\n  };\n}\n\n//\n\nconst tmp = /*@__PURE__*/new Vector3();\nconst px = /*@__PURE__*/new CubicPoly();\nconst py = /*@__PURE__*/new CubicPoly();\nconst pz = /*@__PURE__*/new CubicPoly();\nclass CatmullRomCurve3 extends Curve {\n  constructor() {\n    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let closed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let curveType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'centripetal';\n    let tension = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n    super();\n    this.isCatmullRomCurve3 = true;\n    this.type = 'CatmullRomCurve3';\n    this.points = points;\n    this.closed = closed;\n    this.curveType = curveType;\n    this.tension = tension;\n  }\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const point = optionalTarget;\n    const points = this.points;\n    const l = points.length;\n    const p = (l - (this.closed ? 0 : 1)) * t;\n    let intPoint = Math.floor(p);\n    let weight = p - intPoint;\n    if (this.closed) {\n      intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n    } else if (weight === 0 && intPoint === l - 1) {\n      intPoint = l - 2;\n      weight = 1;\n    }\n    let p0, p3; // 4 points (p1 & p2 defined below)\n\n    if (this.closed || intPoint > 0) {\n      p0 = points[(intPoint - 1) % l];\n    } else {\n      // extrapolate first point\n      tmp.subVectors(points[0], points[1]).add(points[0]);\n      p0 = tmp;\n    }\n    const p1 = points[intPoint % l];\n    const p2 = points[(intPoint + 1) % l];\n    if (this.closed || intPoint + 2 < l) {\n      p3 = points[(intPoint + 2) % l];\n    } else {\n      // extrapolate last point\n      tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n      p3 = tmp;\n    }\n    if (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n      // init Centripetal / Chordal Catmull-Rom\n      const pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n      let dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n      let dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n      let dt2 = Math.pow(p2.distanceToSquared(p3), pow);\n\n      // safety check for repeated points\n      if (dt1 < 1e-4) dt1 = 1.0;\n      if (dt0 < 1e-4) dt0 = dt1;\n      if (dt2 < 1e-4) dt2 = dt1;\n      px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n      py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n      pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n    } else if (this.curveType === 'catmullrom') {\n      px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n      py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n      pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n    }\n    point.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n    return point;\n  }\n  copy(source) {\n    super.copy(source);\n    this.points = [];\n    for (let i = 0, l = source.points.length; i < l; i++) {\n      const point = source.points[i];\n      this.points.push(point.clone());\n    }\n    this.closed = source.closed;\n    this.curveType = source.curveType;\n    this.tension = source.tension;\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.points = [];\n    for (let i = 0, l = this.points.length; i < l; i++) {\n      const point = this.points[i];\n      data.points.push(point.toArray());\n    }\n    data.closed = this.closed;\n    data.curveType = this.curveType;\n    data.tension = this.tension;\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.points = [];\n    for (let i = 0, l = json.points.length; i < l; i++) {\n      const point = json.points[i];\n      this.points.push(new Vector3().fromArray(point));\n    }\n    this.closed = json.closed;\n    this.curveType = json.curveType;\n    this.tension = json.tension;\n    return this;\n  }\n}\nexport { CatmullRomCurve3 };","map":{"version":3,"names":["Vector3","Curve","CubicPoly","c0","c1","c2","c3","init","x0","x1","t0","t1","initCatmullRom","x2","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t","t3","tmp","px","py","pz","CatmullRomCurve3","constructor","points","closed","curveType","isCatmullRomCurve3","type","getPoint","optionalTarget","point","l","length","p","intPoint","Math","floor","weight","abs","p0","p3","subVectors","add","p1","p2","pow","distanceToSquared","x","y","z","set","copy","source","i","push","clone","toJSON","data","toArray","fromJSON","json","fromArray"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/extras/curves/CatmullRomCurve3.js"],"sourcesContent":["import { Vector3 } from '../../math/Vector3.js';\nimport { Curve } from '../core/Curve.js';\n\n/**\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = /*@__PURE__*/ new Vector3();\nconst px = /*@__PURE__*/ new CubicPoly();\nconst py = /*@__PURE__*/ new CubicPoly();\nconst pz = /*@__PURE__*/ new CubicPoly();\n\nclass CatmullRomCurve3 extends Curve {\n\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\tthis.isCatmullRomCurve3 = true;\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { CatmullRomCurve3 };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}