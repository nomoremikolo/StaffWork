{"ast":null,"code":"import Node from './Node.js';\nclass TempNode extends Node {\n  constructor(type) {\n    super(type);\n    this.isTempNode = true;\n  }\n  build(builder, output) {\n    const buildStage = builder.getBuildStage();\n    if (buildStage === 'generate') {\n      const type = builder.getVectorType(this.getNodeType(builder, output));\n      const nodeData = builder.getDataFromNode(this);\n      if (builder.context.tempRead !== false && nodeData.propertyName !== undefined) {\n        return builder.format(nodeData.propertyName, type, output);\n      } else if (builder.context.tempWrite !== false && type !== 'void ' && output !== 'void' && nodeData.dependenciesCount > 1) {\n        const snippet = super.build(builder, type);\n        const nodeVar = builder.getVarFromNode(this, type);\n        const propertyName = builder.getPropertyName(nodeVar);\n        builder.addFlowCode(`${propertyName} = ${snippet}`);\n        nodeData.snippet = snippet;\n        nodeData.propertyName = propertyName;\n        return builder.format(nodeData.propertyName, type, output);\n      }\n    }\n    return super.build(builder, output);\n  }\n}\nexport default TempNode;","map":{"version":3,"names":["Node","TempNode","constructor","type","isTempNode","build","builder","output","buildStage","getBuildStage","getVectorType","getNodeType","nodeData","getDataFromNode","context","tempRead","propertyName","undefined","format","tempWrite","dependenciesCount","snippet","nodeVar","getVarFromNode","getPropertyName","addFlowCode"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/core/TempNode.js"],"sourcesContent":["import Node from './Node.js';\n\nclass TempNode extends Node {\n\n\tconstructor( type ) {\n\n\t\tsuper( type );\n\n\t\tthis.isTempNode = true;\n\n\t}\n\n\tbuild( builder, output ) {\n\n\t\tconst buildStage = builder.getBuildStage();\n\n\t\tif ( buildStage === 'generate' ) {\n\n\t\t\tconst type = builder.getVectorType( this.getNodeType( builder, output ) );\n\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\tif ( builder.context.tempRead !== false && nodeData.propertyName !== undefined ) {\n\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\n\n\t\t\t} else if ( builder.context.tempWrite !== false && type !== 'void ' && output !== 'void' && nodeData.dependenciesCount > 1 ) {\n\n\t\t\t\tconst snippet = super.build( builder, type );\n\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, type );\n\t\t\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\t\t\tbuilder.addFlowCode( `${propertyName} = ${snippet}` );\n\n\t\t\t\tnodeData.snippet = snippet;\n\t\t\t\tnodeData.propertyName = propertyName;\n\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.build( builder, output );\n\n\t}\n\n}\n\nexport default TempNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAE5B,MAAMC,QAAQ,SAASD,IAAI,CAAC;EAE3BE,WAAW,CAAEC,IAAI,EAAG;IAEnB,KAAK,CAAEA,IAAI,CAAE;IAEb,IAAI,CAACC,UAAU,GAAG,IAAI;EAEvB;EAEAC,KAAK,CAAEC,OAAO,EAAEC,MAAM,EAAG;IAExB,MAAMC,UAAU,GAAGF,OAAO,CAACG,aAAa,EAAE;IAE1C,IAAKD,UAAU,KAAK,UAAU,EAAG;MAEhC,MAAML,IAAI,GAAGG,OAAO,CAACI,aAAa,CAAE,IAAI,CAACC,WAAW,CAAEL,OAAO,EAAEC,MAAM,CAAE,CAAE;MACzE,MAAMK,QAAQ,GAAGN,OAAO,CAACO,eAAe,CAAE,IAAI,CAAE;MAEhD,IAAKP,OAAO,CAACQ,OAAO,CAACC,QAAQ,KAAK,KAAK,IAAIH,QAAQ,CAACI,YAAY,KAAKC,SAAS,EAAG;QAEhF,OAAOX,OAAO,CAACY,MAAM,CAAEN,QAAQ,CAACI,YAAY,EAAEb,IAAI,EAAEI,MAAM,CAAE;MAE7D,CAAC,MAAM,IAAKD,OAAO,CAACQ,OAAO,CAACK,SAAS,KAAK,KAAK,IAAIhB,IAAI,KAAK,OAAO,IAAII,MAAM,KAAK,MAAM,IAAIK,QAAQ,CAACQ,iBAAiB,GAAG,CAAC,EAAG;QAE5H,MAAMC,OAAO,GAAG,KAAK,CAAChB,KAAK,CAAEC,OAAO,EAAEH,IAAI,CAAE;QAE5C,MAAMmB,OAAO,GAAGhB,OAAO,CAACiB,cAAc,CAAE,IAAI,EAAEpB,IAAI,CAAE;QACpD,MAAMa,YAAY,GAAGV,OAAO,CAACkB,eAAe,CAAEF,OAAO,CAAE;QAEvDhB,OAAO,CAACmB,WAAW,CAAG,GAAET,YAAa,MAAKK,OAAQ,EAAC,CAAE;QAErDT,QAAQ,CAACS,OAAO,GAAGA,OAAO;QAC1BT,QAAQ,CAACI,YAAY,GAAGA,YAAY;QAEpC,OAAOV,OAAO,CAACY,MAAM,CAAEN,QAAQ,CAACI,YAAY,EAAEb,IAAI,EAAEI,MAAM,CAAE;MAE7D;IAED;IAEA,OAAO,KAAK,CAACF,KAAK,CAAEC,OAAO,EAAEC,MAAM,CAAE;EAEtC;AAED;AAEA,eAAeN,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}