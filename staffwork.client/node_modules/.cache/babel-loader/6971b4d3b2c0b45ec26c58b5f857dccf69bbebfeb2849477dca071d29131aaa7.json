{"ast":null,"code":"import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\nclass TorusGeometry extends BufferGeometry {\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;\n    let radialSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    let tubularSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 6;\n    let arc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Math.PI * 2;\n    super();\n    this.type = 'TorusGeometry';\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      radialSegments: radialSegments,\n      tubularSegments: tubularSegments,\n      arc: arc\n    };\n    radialSegments = Math.floor(radialSegments);\n    tubularSegments = Math.floor(tubularSegments);\n\n    // buffers\n\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helper variables\n\n    const center = new Vector3();\n    const vertex = new Vector3();\n    const normal = new Vector3();\n\n    // generate vertices, normals and uvs\n\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2;\n\n        // vertex\n\n        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertex.z = tube * Math.sin(v);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        center.x = radius * Math.cos(u);\n        center.y = radius * Math.sin(u);\n        normal.subVectors(vertex, center).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(i / tubularSegments);\n        uvs.push(j / radialSegments);\n      }\n    }\n\n    // generate indices\n\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        // indices\n\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n  static fromJSON(data) {\n    return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n  }\n}\nexport { TorusGeometry };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","Vector3","TorusGeometry","constructor","radius","tube","radialSegments","tubularSegments","arc","Math","PI","type","parameters","floor","indices","vertices","normals","uvs","center","vertex","normal","j","i","u","v","x","cos","y","sin","z","push","subVectors","normalize","a","b","c","d","setIndex","setAttribute","fromJSON","data"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/geometries/TorusGeometry.js"],"sourcesContent":["import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nclass TorusGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\nexport { TorusGeometry };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,sBAAsB,QAAQ,4BAA4B;AACnE,SAASC,OAAO,QAAQ,oBAAoB;AAE5C,MAAMC,aAAa,SAASH,cAAc,CAAC;EAE1CI,WAAW,GAAuF;IAAA,IAArFC,MAAM,uEAAG,CAAC;IAAA,IAAEC,IAAI,uEAAG,GAAG;IAAA,IAAEC,cAAc,uEAAG,CAAC;IAAA,IAAEC,eAAe,uEAAG,CAAC;IAAA,IAAEC,GAAG,uEAAGC,IAAI,CAACC,EAAE,GAAG,CAAC;IAE9F,KAAK,EAAE;IAEP,IAAI,CAACC,IAAI,GAAG,eAAe;IAE3B,IAAI,CAACC,UAAU,GAAG;MACjBR,MAAM,EAAEA,MAAM;MACdC,IAAI,EAAEA,IAAI;MACVC,cAAc,EAAEA,cAAc;MAC9BC,eAAe,EAAEA,eAAe;MAChCC,GAAG,EAAEA;IACN,CAAC;IAEDF,cAAc,GAAGG,IAAI,CAACI,KAAK,CAAEP,cAAc,CAAE;IAC7CC,eAAe,GAAGE,IAAI,CAACI,KAAK,CAAEN,eAAe,CAAE;;IAE/C;;IAEA,MAAMO,OAAO,GAAG,EAAE;IAClB,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,OAAO,GAAG,EAAE;IAClB,MAAMC,GAAG,GAAG,EAAE;;IAEd;;IAEA,MAAMC,MAAM,GAAG,IAAIjB,OAAO,EAAE;IAC5B,MAAMkB,MAAM,GAAG,IAAIlB,OAAO,EAAE;IAC5B,MAAMmB,MAAM,GAAG,IAAInB,OAAO,EAAE;;IAE5B;;IAEA,KAAM,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,cAAc,EAAEe,CAAC,EAAG,EAAG;MAE5C,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,eAAe,EAAEe,CAAC,EAAG,EAAG;QAE7C,MAAMC,CAAC,GAAGD,CAAC,GAAGf,eAAe,GAAGC,GAAG;QACnC,MAAMgB,CAAC,GAAGH,CAAC,GAAGf,cAAc,GAAGG,IAAI,CAACC,EAAE,GAAG,CAAC;;QAE1C;;QAEAS,MAAM,CAACM,CAAC,GAAG,CAAErB,MAAM,GAAGC,IAAI,GAAGI,IAAI,CAACiB,GAAG,CAAEF,CAAC,CAAE,IAAKf,IAAI,CAACiB,GAAG,CAAEH,CAAC,CAAE;QAC5DJ,MAAM,CAACQ,CAAC,GAAG,CAAEvB,MAAM,GAAGC,IAAI,GAAGI,IAAI,CAACiB,GAAG,CAAEF,CAAC,CAAE,IAAKf,IAAI,CAACmB,GAAG,CAAEL,CAAC,CAAE;QAC5DJ,MAAM,CAACU,CAAC,GAAGxB,IAAI,GAAGI,IAAI,CAACmB,GAAG,CAAEJ,CAAC,CAAE;QAE/BT,QAAQ,CAACe,IAAI,CAAEX,MAAM,CAACM,CAAC,EAAEN,MAAM,CAACQ,CAAC,EAAER,MAAM,CAACU,CAAC,CAAE;;QAE7C;;QAEAX,MAAM,CAACO,CAAC,GAAGrB,MAAM,GAAGK,IAAI,CAACiB,GAAG,CAAEH,CAAC,CAAE;QACjCL,MAAM,CAACS,CAAC,GAAGvB,MAAM,GAAGK,IAAI,CAACmB,GAAG,CAAEL,CAAC,CAAE;QACjCH,MAAM,CAACW,UAAU,CAAEZ,MAAM,EAAED,MAAM,CAAE,CAACc,SAAS,EAAE;QAE/ChB,OAAO,CAACc,IAAI,CAAEV,MAAM,CAACK,CAAC,EAAEL,MAAM,CAACO,CAAC,EAAEP,MAAM,CAACS,CAAC,CAAE;;QAE5C;;QAEAZ,GAAG,CAACa,IAAI,CAAER,CAAC,GAAGf,eAAe,CAAE;QAC/BU,GAAG,CAACa,IAAI,CAAET,CAAC,GAAGf,cAAc,CAAE;MAE/B;IAED;;IAEA;;IAEA,KAAM,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,cAAc,EAAEe,CAAC,EAAG,EAAG;MAE5C,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,eAAe,EAAEe,CAAC,EAAG,EAAG;QAE7C;;QAEA,MAAMW,CAAC,GAAG,CAAE1B,eAAe,GAAG,CAAC,IAAKc,CAAC,GAAGC,CAAC,GAAG,CAAC;QAC7C,MAAMY,CAAC,GAAG,CAAE3B,eAAe,GAAG,CAAC,KAAOc,CAAC,GAAG,CAAC,CAAE,GAAGC,CAAC,GAAG,CAAC;QACrD,MAAMa,CAAC,GAAG,CAAE5B,eAAe,GAAG,CAAC,KAAOc,CAAC,GAAG,CAAC,CAAE,GAAGC,CAAC;QACjD,MAAMc,CAAC,GAAG,CAAE7B,eAAe,GAAG,CAAC,IAAKc,CAAC,GAAGC,CAAC;;QAEzC;;QAEAR,OAAO,CAACgB,IAAI,CAAEG,CAAC,EAAEC,CAAC,EAAEE,CAAC,CAAE;QACvBtB,OAAO,CAACgB,IAAI,CAAEI,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAE;MAExB;IAED;;IAEA;;IAEA,IAAI,CAACC,QAAQ,CAAEvB,OAAO,CAAE;IACxB,IAAI,CAACwB,YAAY,CAAE,UAAU,EAAE,IAAItC,sBAAsB,CAAEe,QAAQ,EAAE,CAAC,CAAE,CAAE;IAC1E,IAAI,CAACuB,YAAY,CAAE,QAAQ,EAAE,IAAItC,sBAAsB,CAAEgB,OAAO,EAAE,CAAC,CAAE,CAAE;IACvE,IAAI,CAACsB,YAAY,CAAE,IAAI,EAAE,IAAItC,sBAAsB,CAAEiB,GAAG,EAAE,CAAC,CAAE,CAAE;EAEhE;EAEA,OAAOsB,QAAQ,CAAEC,IAAI,EAAG;IAEvB,OAAO,IAAItC,aAAa,CAAEsC,IAAI,CAACpC,MAAM,EAAEoC,IAAI,CAACnC,IAAI,EAAEmC,IAAI,CAAClC,cAAc,EAAEkC,IAAI,CAACjC,eAAe,EAAEiC,IAAI,CAAChC,GAAG,CAAE;EAExG;AAED;AAEA,SAASN,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}