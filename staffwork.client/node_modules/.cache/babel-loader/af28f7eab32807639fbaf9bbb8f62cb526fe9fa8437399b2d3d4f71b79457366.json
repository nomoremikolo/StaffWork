{"ast":null,"code":"import { BackSide } from '../../constants.js';\nimport { getUnlitUniformColorSpace } from '../shaders/UniformsUtils.js';\nfunction WebGLMaterials(renderer, properties) {\n  function refreshFogUniforms(uniforms, fog) {\n    fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer));\n    if (fog.isFog) {\n      uniforms.fogNear.value = fog.near;\n      uniforms.fogFar.value = fog.far;\n    } else if (fog.isFogExp2) {\n      uniforms.fogDensity.value = fog.density;\n    }\n  }\n  function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {\n    if (material.isMeshBasicMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshLambertMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshToonMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsToon(uniforms, material);\n    } else if (material.isMeshPhongMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsPhong(uniforms, material);\n    } else if (material.isMeshStandardMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsStandard(uniforms, material);\n      if (material.isMeshPhysicalMaterial) {\n        refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\n      }\n    } else if (material.isMeshMatcapMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsMatcap(uniforms, material);\n    } else if (material.isMeshDepthMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshDistanceMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsDistance(uniforms, material);\n    } else if (material.isMeshNormalMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isLineBasicMaterial) {\n      refreshUniformsLine(uniforms, material);\n      if (material.isLineDashedMaterial) {\n        refreshUniformsDash(uniforms, material);\n      }\n    } else if (material.isPointsMaterial) {\n      refreshUniformsPoints(uniforms, material, pixelRatio, height);\n    } else if (material.isSpriteMaterial) {\n      refreshUniformsSprites(uniforms, material);\n    } else if (material.isShadowMaterial) {\n      uniforms.color.value.copy(material.color);\n      uniforms.opacity.value = material.opacity;\n    } else if (material.isShaderMaterial) {\n      material.uniformsNeedUpdate = false; // #15581\n    }\n  }\n\n  function refreshUniformsCommon(uniforms, material) {\n    uniforms.opacity.value = material.opacity;\n    if (material.color) {\n      uniforms.diffuse.value.copy(material.color);\n    }\n    if (material.emissive) {\n      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n    }\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n    if (material.specularMap) {\n      uniforms.specularMap.value = material.specularMap;\n    }\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    }\n    const envMap = properties.get(material).envMap;\n    if (envMap) {\n      uniforms.envMap.value = envMap;\n      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;\n      uniforms.reflectivity.value = material.reflectivity;\n      uniforms.ior.value = material.ior;\n      uniforms.refractionRatio.value = material.refractionRatio;\n    }\n    if (material.lightMap) {\n      uniforms.lightMap.value = material.lightMap;\n\n      // artist-friendly light intensity scaling factor\n      const scaleFactor = renderer.physicallyCorrectLights !== true ? Math.PI : 1;\n      uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;\n    }\n    if (material.aoMap) {\n      uniforms.aoMap.value = material.aoMap;\n      uniforms.aoMapIntensity.value = material.aoMapIntensity;\n    }\n\n    // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. specular map\n    // 3. displacementMap map\n    // 4. normal map\n    // 5. bump map\n    // 6. roughnessMap map\n    // 7. metalnessMap map\n    // 8. alphaMap map\n    // 9. emissiveMap map\n    // 10. clearcoat map\n    // 11. clearcoat normal map\n    // 12. clearcoat roughnessMap map\n    // 13. iridescence map\n    // 14. iridescence thickness map\n    // 15. specular intensity map\n    // 16. specular tint map\n    // 17. transmission map\n    // 18. thickness map\n\n    let uvScaleMap;\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.specularMap) {\n      uvScaleMap = material.specularMap;\n    } else if (material.displacementMap) {\n      uvScaleMap = material.displacementMap;\n    } else if (material.normalMap) {\n      uvScaleMap = material.normalMap;\n    } else if (material.bumpMap) {\n      uvScaleMap = material.bumpMap;\n    } else if (material.roughnessMap) {\n      uvScaleMap = material.roughnessMap;\n    } else if (material.metalnessMap) {\n      uvScaleMap = material.metalnessMap;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    } else if (material.emissiveMap) {\n      uvScaleMap = material.emissiveMap;\n    } else if (material.clearcoatMap) {\n      uvScaleMap = material.clearcoatMap;\n    } else if (material.clearcoatNormalMap) {\n      uvScaleMap = material.clearcoatNormalMap;\n    } else if (material.clearcoatRoughnessMap) {\n      uvScaleMap = material.clearcoatRoughnessMap;\n    } else if (material.iridescenceMap) {\n      uvScaleMap = material.iridescenceMap;\n    } else if (material.iridescenceThicknessMap) {\n      uvScaleMap = material.iridescenceThicknessMap;\n    } else if (material.specularIntensityMap) {\n      uvScaleMap = material.specularIntensityMap;\n    } else if (material.specularColorMap) {\n      uvScaleMap = material.specularColorMap;\n    } else if (material.transmissionMap) {\n      uvScaleMap = material.transmissionMap;\n    } else if (material.thicknessMap) {\n      uvScaleMap = material.thicknessMap;\n    } else if (material.sheenColorMap) {\n      uvScaleMap = material.sheenColorMap;\n    } else if (material.sheenRoughnessMap) {\n      uvScaleMap = material.sheenRoughnessMap;\n    }\n    if (uvScaleMap !== undefined) {\n      // backwards compatibility\n      if (uvScaleMap.isWebGLRenderTarget) {\n        uvScaleMap = uvScaleMap.texture;\n      }\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n\n    // uv repeat and offset setting priorities for uv2\n    // 1. ao map\n    // 2. light map\n\n    let uv2ScaleMap;\n    if (material.aoMap) {\n      uv2ScaleMap = material.aoMap;\n    } else if (material.lightMap) {\n      uv2ScaleMap = material.lightMap;\n    }\n    if (uv2ScaleMap !== undefined) {\n      // backwards compatibility\n      if (uv2ScaleMap.isWebGLRenderTarget) {\n        uv2ScaleMap = uv2ScaleMap.texture;\n      }\n      if (uv2ScaleMap.matrixAutoUpdate === true) {\n        uv2ScaleMap.updateMatrix();\n      }\n      uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n    }\n  }\n  function refreshUniformsLine(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n  }\n  function refreshUniformsDash(uniforms, material) {\n    uniforms.dashSize.value = material.dashSize;\n    uniforms.totalSize.value = material.dashSize + material.gapSize;\n    uniforms.scale.value = material.scale;\n  }\n  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.size.value = material.size * pixelRatio;\n    uniforms.scale.value = height * 0.5;\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    }\n\n    // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n    let uvScaleMap;\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n  function refreshUniformsSprites(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.rotation.value = material.rotation;\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n    if (material.alphaTest > 0) {\n      uniforms.alphaTest.value = material.alphaTest;\n    }\n\n    // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n    let uvScaleMap;\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n  function refreshUniformsPhong(uniforms, material) {\n    uniforms.specular.value.copy(material.specular);\n    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n  }\n\n  function refreshUniformsToon(uniforms, material) {\n    if (material.gradientMap) {\n      uniforms.gradientMap.value = material.gradientMap;\n    }\n  }\n  function refreshUniformsStandard(uniforms, material) {\n    uniforms.roughness.value = material.roughness;\n    uniforms.metalness.value = material.metalness;\n    if (material.roughnessMap) {\n      uniforms.roughnessMap.value = material.roughnessMap;\n    }\n    if (material.metalnessMap) {\n      uniforms.metalnessMap.value = material.metalnessMap;\n    }\n    const envMap = properties.get(material).envMap;\n    if (envMap) {\n      //uniforms.envMap.value = material.envMap; // part of uniforms common\n      uniforms.envMapIntensity.value = material.envMapIntensity;\n    }\n  }\n  function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\n    uniforms.ior.value = material.ior; // also part of uniforms common\n\n    if (material.sheen > 0) {\n      uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);\n      uniforms.sheenRoughness.value = material.sheenRoughness;\n      if (material.sheenColorMap) {\n        uniforms.sheenColorMap.value = material.sheenColorMap;\n      }\n      if (material.sheenRoughnessMap) {\n        uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n      }\n    }\n    if (material.clearcoat > 0) {\n      uniforms.clearcoat.value = material.clearcoat;\n      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n      if (material.clearcoatMap) {\n        uniforms.clearcoatMap.value = material.clearcoatMap;\n      }\n      if (material.clearcoatRoughnessMap) {\n        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n      }\n      if (material.clearcoatNormalMap) {\n        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n        if (material.side === BackSide) {\n          uniforms.clearcoatNormalScale.value.negate();\n        }\n      }\n    }\n    if (material.iridescence > 0) {\n      uniforms.iridescence.value = material.iridescence;\n      uniforms.iridescenceIOR.value = material.iridescenceIOR;\n      uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];\n      uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];\n      if (material.iridescenceMap) {\n        uniforms.iridescenceMap.value = material.iridescenceMap;\n      }\n      if (material.iridescenceThicknessMap) {\n        uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\n      }\n    }\n    if (material.transmission > 0) {\n      uniforms.transmission.value = material.transmission;\n      uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n      uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);\n      if (material.transmissionMap) {\n        uniforms.transmissionMap.value = material.transmissionMap;\n      }\n      uniforms.thickness.value = material.thickness;\n      if (material.thicknessMap) {\n        uniforms.thicknessMap.value = material.thicknessMap;\n      }\n      uniforms.attenuationDistance.value = material.attenuationDistance;\n      uniforms.attenuationColor.value.copy(material.attenuationColor);\n    }\n    uniforms.specularIntensity.value = material.specularIntensity;\n    uniforms.specularColor.value.copy(material.specularColor);\n    if (material.specularIntensityMap) {\n      uniforms.specularIntensityMap.value = material.specularIntensityMap;\n    }\n    if (material.specularColorMap) {\n      uniforms.specularColorMap.value = material.specularColorMap;\n    }\n  }\n  function refreshUniformsMatcap(uniforms, material) {\n    if (material.matcap) {\n      uniforms.matcap.value = material.matcap;\n    }\n  }\n  function refreshUniformsDistance(uniforms, material) {\n    uniforms.referencePosition.value.copy(material.referencePosition);\n    uniforms.nearDistance.value = material.nearDistance;\n    uniforms.farDistance.value = material.farDistance;\n  }\n  return {\n    refreshFogUniforms: refreshFogUniforms,\n    refreshMaterialUniforms: refreshMaterialUniforms\n  };\n}\nexport { WebGLMaterials };","map":{"version":3,"names":["BackSide","getUnlitUniformColorSpace","WebGLMaterials","renderer","properties","refreshFogUniforms","uniforms","fog","color","getRGB","fogColor","value","isFog","fogNear","near","fogFar","far","isFogExp2","fogDensity","density","refreshMaterialUniforms","material","pixelRatio","height","transmissionRenderTarget","isMeshBasicMaterial","refreshUniformsCommon","isMeshLambertMaterial","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshStandardMaterial","refreshUniformsStandard","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","isMeshDepthMaterial","isMeshDistanceMaterial","refreshUniformsDistance","isMeshNormalMaterial","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","copy","opacity","isShaderMaterial","uniformsNeedUpdate","diffuse","emissive","multiplyScalar","emissiveIntensity","map","alphaMap","bumpMap","bumpScale","side","displacementMap","displacementScale","displacementBias","emissiveMap","normalMap","normalScale","negate","specularMap","alphaTest","envMap","get","flipEnvMap","isCubeTexture","isRenderTargetTexture","reflectivity","ior","refractionRatio","lightMap","scaleFactor","physicallyCorrectLights","Math","PI","lightMapIntensity","aoMap","aoMapIntensity","uvScaleMap","roughnessMap","metalnessMap","clearcoatMap","clearcoatNormalMap","clearcoatRoughnessMap","iridescenceMap","iridescenceThicknessMap","specularIntensityMap","specularColorMap","transmissionMap","thicknessMap","sheenColorMap","sheenRoughnessMap","undefined","isWebGLRenderTarget","texture","matrixAutoUpdate","updateMatrix","uvTransform","matrix","uv2ScaleMap","uv2Transform","dashSize","totalSize","gapSize","scale","size","rotation","specular","shininess","max","gradientMap","roughness","metalness","envMapIntensity","sheen","sheenColor","sheenRoughness","clearcoat","clearcoatRoughness","clearcoatNormalScale","iridescence","iridescenceIOR","iridescenceThicknessMinimum","iridescenceThicknessRange","iridescenceThicknessMaximum","transmission","transmissionSamplerMap","transmissionSamplerSize","set","width","thickness","attenuationDistance","attenuationColor","specularIntensity","specularColor","matcap","referencePosition","nearDistance","farDistance"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/renderers/webgl/WebGLMaterials.js"],"sourcesContent":["import { BackSide } from '../../constants.js';\nimport { getUnlitUniformColorSpace } from '../shaders/UniformsUtils.js';\n\nfunction WebGLMaterials( renderer, properties ) {\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tfog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\n\t\t\t// artist-friendly light intensity scaling factor\n\t\t\tconst scaleFactor = ( renderer.physicallyCorrectLights !== true ) ? Math.PI : 1;\n\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. displacementMap map\n\t\t// 4. normal map\n\t\t// 5. bump map\n\t\t// 6. roughnessMap map\n\t\t// 7. metalnessMap map\n\t\t// 8. alphaMap map\n\t\t// 9. emissiveMap map\n\t\t// 10. clearcoat map\n\t\t// 11. clearcoat normal map\n\t\t// 12. clearcoat roughnessMap map\n\t\t// 13. iridescence map\n\t\t// 14. iridescence thickness map\n\t\t// 15. specular intensity map\n\t\t// 16. specular tint map\n\t\t// 17. transmission map\n\t\t// 18. thickness map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t} else if ( material.clearcoatMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatMap;\n\n\t\t} else if ( material.clearcoatNormalMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\n\t\t} else if ( material.clearcoatRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\n\t\t} else if ( material.iridescenceMap ) {\n\n\t\t\tuvScaleMap = material.iridescenceMap;\n\n\t\t} else if ( material.iridescenceThicknessMap ) {\n\n\t\t\tuvScaleMap = material.iridescenceThicknessMap;\n\n\t\t} else if ( material.specularIntensityMap ) {\n\n\t\t\tuvScaleMap = material.specularIntensityMap;\n\n\t\t} else if ( material.specularColorMap ) {\n\n\t\t\tuvScaleMap = material.specularColorMap;\n\n\t\t} else if ( material.transmissionMap ) {\n\n\t\t\tuvScaleMap = material.transmissionMap;\n\n\t\t} else if ( material.thicknessMap ) {\n\n\t\t\tuvScaleMap = material.thicknessMap;\n\n\t\t} else if ( material.sheenColorMap ) {\n\n\t\t\tuvScaleMap = material.sheenColorMap;\n\n\t\t} else if ( material.sheenRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.sheenRoughnessMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities for uv2\n\t\t// 1. ao map\n\t\t// 2. light map\n\n\t\tlet uv2ScaleMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t} else if ( material.lightMap ) {\n\n\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t}\n\n\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\tif ( material.sheenColorMap ) {\n\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\n\t\t\t}\n\n\t\t\tif ( material.sheenRoughnessMap ) {\n\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.iridescence > 0 ) {\n\n\t\t\tuniforms.iridescence.value = material.iridescence;\n\t\t\tuniforms.iridescenceIOR.value = material.iridescenceIOR;\n\t\t\tuniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];\n\t\t\tuniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];\n\n\t\t\tif ( material.iridescenceMap ) {\n\n\t\t\t\tuniforms.iridescenceMap.value = material.iridescenceMap;\n\n\t\t\t}\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tuniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularColor.value.copy( material.specularColor );\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t}\n\n\t\tif ( material.specularColorMap ) {\n\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nexport { WebGLMaterials };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}