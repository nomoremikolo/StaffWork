{"ast":null,"code":"import { Color } from '../math/Color.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\nimport { ShadowMaterial, SpriteMaterial, RawShaderMaterial, ShaderMaterial, PointsMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshPhongMaterial, MeshToonMaterial, MeshNormalMaterial, MeshLambertMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshBasicMaterial, MeshMatcapMaterial, LineDashedMaterial, LineBasicMaterial, Material } from '../materials/Materials.js';\nclass MaterialLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.textures = {};\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(json) {\n    const textures = this.textures;\n    function getTexture(name) {\n      if (textures[name] === undefined) {\n        console.warn('THREE.MaterialLoader: Undefined texture', name);\n      }\n      return textures[name];\n    }\n    const material = MaterialLoader.createMaterialFromType(json.type);\n    if (json.uuid !== undefined) material.uuid = json.uuid;\n    if (json.name !== undefined) material.name = json.name;\n    if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n    if (json.roughness !== undefined) material.roughness = json.roughness;\n    if (json.metalness !== undefined) material.metalness = json.metalness;\n    if (json.sheen !== undefined) material.sheen = json.sheen;\n    if (json.sheenColor !== undefined) material.sheenColor = new Color().setHex(json.sheenColor);\n    if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;\n    if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n    if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n    if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;\n    if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);\n    if (json.shininess !== undefined) material.shininess = json.shininess;\n    if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n    if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n    if (json.iridescence !== undefined) material.iridescence = json.iridescence;\n    if (json.iridescenceIOR !== undefined) material.iridescenceIOR = json.iridescenceIOR;\n    if (json.iridescenceThicknessRange !== undefined) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n    if (json.transmission !== undefined) material.transmission = json.transmission;\n    if (json.thickness !== undefined) material.thickness = json.thickness;\n    if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;\n    if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);\n    if (json.fog !== undefined) material.fog = json.fog;\n    if (json.flatShading !== undefined) material.flatShading = json.flatShading;\n    if (json.blending !== undefined) material.blending = json.blending;\n    if (json.combine !== undefined) material.combine = json.combine;\n    if (json.side !== undefined) material.side = json.side;\n    if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\n    if (json.opacity !== undefined) material.opacity = json.opacity;\n    if (json.transparent !== undefined) material.transparent = json.transparent;\n    if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n    if (json.depthTest !== undefined) material.depthTest = json.depthTest;\n    if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n    if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n    if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n    if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n    if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n    if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n    if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n    if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n    if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n    if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n    if (json.wireframe !== undefined) material.wireframe = json.wireframe;\n    if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n    if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n    if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n    if (json.rotation !== undefined) material.rotation = json.rotation;\n    if (json.linewidth !== 1) material.linewidth = json.linewidth;\n    if (json.dashSize !== undefined) material.dashSize = json.dashSize;\n    if (json.gapSize !== undefined) material.gapSize = json.gapSize;\n    if (json.scale !== undefined) material.scale = json.scale;\n    if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n    if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n    if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n    if (json.dithering !== undefined) material.dithering = json.dithering;\n    if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\n    if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;\n    if (json.visible !== undefined) material.visible = json.visible;\n    if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n    if (json.userData !== undefined) material.userData = json.userData;\n    if (json.vertexColors !== undefined) {\n      if (typeof json.vertexColors === 'number') {\n        material.vertexColors = json.vertexColors > 0 ? true : false;\n      } else {\n        material.vertexColors = json.vertexColors;\n      }\n    }\n\n    // Shader Material\n\n    if (json.uniforms !== undefined) {\n      for (const name in json.uniforms) {\n        const uniform = json.uniforms[name];\n        material.uniforms[name] = {};\n        switch (uniform.type) {\n          case 't':\n            material.uniforms[name].value = getTexture(uniform.value);\n            break;\n          case 'c':\n            material.uniforms[name].value = new Color().setHex(uniform.value);\n            break;\n          case 'v2':\n            material.uniforms[name].value = new Vector2().fromArray(uniform.value);\n            break;\n          case 'v3':\n            material.uniforms[name].value = new Vector3().fromArray(uniform.value);\n            break;\n          case 'v4':\n            material.uniforms[name].value = new Vector4().fromArray(uniform.value);\n            break;\n          case 'm3':\n            material.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n            break;\n          case 'm4':\n            material.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n            break;\n          default:\n            material.uniforms[name].value = uniform.value;\n        }\n      }\n    }\n    if (json.defines !== undefined) material.defines = json.defines;\n    if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n    if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n    if (json.glslVersion !== undefined) material.glslVersion = json.glslVersion;\n    if (json.extensions !== undefined) {\n      for (const key in json.extensions) {\n        material.extensions[key] = json.extensions[key];\n      }\n    }\n\n    // for PointsMaterial\n\n    if (json.size !== undefined) material.size = json.size;\n    if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;\n\n    // maps\n\n    if (json.map !== undefined) material.map = getTexture(json.map);\n    if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n    if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n    if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n    if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n    if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n    if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n    if (json.normalScale !== undefined) {\n      let normalScale = json.normalScale;\n      if (Array.isArray(normalScale) === false) {\n        // Blender exporter used to export a scalar. See #7459\n\n        normalScale = [normalScale, normalScale];\n      }\n      material.normalScale = new Vector2().fromArray(normalScale);\n    }\n    if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n    if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n    if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n    if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n    if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n    if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n    if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n    if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n    if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);\n    if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);\n    if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n    if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n    if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n    if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n    if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n    if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n    if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n    if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n    if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n    if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n    if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n    if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n    if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n    if (json.iridescenceMap !== undefined) material.iridescenceMap = getTexture(json.iridescenceMap);\n    if (json.iridescenceThicknessMap !== undefined) material.iridescenceThicknessMap = getTexture(json.iridescenceThicknessMap);\n    if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n    if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\n    if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);\n    if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);\n    return material;\n  }\n  setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n  static createMaterialFromType(type) {\n    const materialLib = {\n      ShadowMaterial,\n      SpriteMaterial,\n      RawShaderMaterial,\n      ShaderMaterial,\n      PointsMaterial,\n      MeshPhysicalMaterial,\n      MeshStandardMaterial,\n      MeshPhongMaterial,\n      MeshToonMaterial,\n      MeshNormalMaterial,\n      MeshLambertMaterial,\n      MeshDepthMaterial,\n      MeshDistanceMaterial,\n      MeshBasicMaterial,\n      MeshMatcapMaterial,\n      LineDashedMaterial,\n      LineBasicMaterial,\n      Material\n    };\n    return new materialLib[type]();\n  }\n}\nexport { MaterialLoader };","map":{"version":3,"names":["Color","Vector2","Vector3","Vector4","Matrix3","Matrix4","FileLoader","Loader","ShadowMaterial","SpriteMaterial","RawShaderMaterial","ShaderMaterial","PointsMaterial","MeshPhysicalMaterial","MeshStandardMaterial","MeshPhongMaterial","MeshToonMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshDepthMaterial","MeshDistanceMaterial","MeshBasicMaterial","MeshMatcapMaterial","LineDashedMaterial","LineBasicMaterial","Material","MaterialLoader","constructor","manager","textures","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","JSON","e","console","error","itemError","json","getTexture","name","undefined","warn","material","createMaterialFromType","type","uuid","color","setHex","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","iridescence","iridescenceIOR","iridescenceThicknessRange","transmission","thickness","attenuationDistance","attenuationColor","fog","flatShading","blending","combine","side","shadowSide","opacity","transparent","alphaTest","depthTest","depthWrite","colorWrite","stencilWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","rotation","linewidth","dashSize","gapSize","scale","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","visible","toneMapped","userData","vertexColors","uniforms","uniform","value","fromArray","defines","vertexShader","fragmentShader","glslVersion","extensions","key","size","sizeAttenuation","map","matcap","alphaMap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","Array","isArray","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","emissiveIntensity","specularMap","specularIntensityMap","specularColorMap","envMap","envMapIntensity","reflectivity","refractionRatio","lightMap","lightMapIntensity","aoMap","aoMapIntensity","gradientMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","iridescenceMap","iridescenceThicknessMap","transmissionMap","thicknessMap","sheenColorMap","sheenRoughnessMap","setTextures","materialLib"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/loaders/MaterialLoader.js"],"sourcesContent":["import { Color } from '../math/Color.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\nimport {\n\tShadowMaterial,\n\tSpriteMaterial,\n\tRawShaderMaterial,\n\tShaderMaterial,\n\tPointsMaterial,\n\tMeshPhysicalMaterial,\n\tMeshStandardMaterial,\n\tMeshPhongMaterial,\n\tMeshToonMaterial,\n\tMeshNormalMaterial,\n\tMeshLambertMaterial,\n\tMeshDepthMaterial,\n\tMeshDistanceMaterial,\n\tMeshBasicMaterial,\n\tMeshMatcapMaterial,\n\tLineDashedMaterial,\n\tLineBasicMaterial,\n\tMaterial,\n} from '../materials/Materials.js';\n\nclass MaterialLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\t\tthis.textures = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = MaterialLoader.createMaterialFromType( json.type );\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\tstatic createMaterialFromType( type ) {\n\n\t\tconst materialLib = {\n\t\t\tShadowMaterial,\n\t\t\tSpriteMaterial,\n\t\t\tRawShaderMaterial,\n\t\t\tShaderMaterial,\n\t\t\tPointsMaterial,\n\t\t\tMeshPhysicalMaterial,\n\t\t\tMeshStandardMaterial,\n\t\t\tMeshPhongMaterial,\n\t\t\tMeshToonMaterial,\n\t\t\tMeshNormalMaterial,\n\t\t\tMeshLambertMaterial,\n\t\t\tMeshDepthMaterial,\n\t\t\tMeshDistanceMaterial,\n\t\t\tMeshBasicMaterial,\n\t\t\tMeshMatcapMaterial,\n\t\t\tLineDashedMaterial,\n\t\t\tLineBasicMaterial,\n\t\t\tMaterial\n\t\t};\n\n\t\treturn new materialLib[ type ]();\n\n\t}\n\n}\n\nexport { MaterialLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}