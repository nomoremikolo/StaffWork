{"ast":null,"code":"import { Vector3 } from '../math/Vector3.js';\nimport { Object3D } from '../core/Object3D.js';\nconst _v1 = /*@__PURE__*/new Vector3();\nconst _v2 = /*@__PURE__*/new Vector3();\nclass LOD extends Object3D {\n  constructor() {\n    super();\n    this._currentLevel = 0;\n    this.type = 'LOD';\n    Object.defineProperties(this, {\n      levels: {\n        enumerable: true,\n        value: []\n      },\n      isLOD: {\n        value: true\n      }\n    });\n    this.autoUpdate = true;\n  }\n  copy(source) {\n    super.copy(source, false);\n    const levels = source.levels;\n    for (let i = 0, l = levels.length; i < l; i++) {\n      const level = levels[i];\n      this.addLevel(level.object.clone(), level.distance, level.hysteresis);\n    }\n    this.autoUpdate = source.autoUpdate;\n    return this;\n  }\n  addLevel(object) {\n    let distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let hysteresis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    distance = Math.abs(distance);\n    const levels = this.levels;\n    let l;\n    for (l = 0; l < levels.length; l++) {\n      if (distance < levels[l].distance) {\n        break;\n      }\n    }\n    levels.splice(l, 0, {\n      distance: distance,\n      hysteresis: hysteresis,\n      object: object\n    });\n    this.add(object);\n    return this;\n  }\n  getCurrentLevel() {\n    return this._currentLevel;\n  }\n  getObjectForDistance(distance) {\n    const levels = this.levels;\n    if (levels.length > 0) {\n      let i, l;\n      for (i = 1, l = levels.length; i < l; i++) {\n        let levelDistance = levels[i].distance;\n        if (levels[i].object.visible) {\n          levelDistance -= levelDistance * levels[i].hysteresis;\n        }\n        if (distance < levelDistance) {\n          break;\n        }\n      }\n      return levels[i - 1].object;\n    }\n    return null;\n  }\n  raycast(raycaster, intersects) {\n    const levels = this.levels;\n    if (levels.length > 0) {\n      _v1.setFromMatrixPosition(this.matrixWorld);\n      const distance = raycaster.ray.origin.distanceTo(_v1);\n      this.getObjectForDistance(distance).raycast(raycaster, intersects);\n    }\n  }\n  update(camera) {\n    const levels = this.levels;\n    if (levels.length > 1) {\n      _v1.setFromMatrixPosition(camera.matrixWorld);\n      _v2.setFromMatrixPosition(this.matrixWorld);\n      const distance = _v1.distanceTo(_v2) / camera.zoom;\n      levels[0].object.visible = true;\n      let i, l;\n      for (i = 1, l = levels.length; i < l; i++) {\n        let levelDistance = levels[i].distance;\n        if (levels[i].object.visible) {\n          levelDistance -= levelDistance * levels[i].hysteresis;\n        }\n        if (distance >= levelDistance) {\n          levels[i - 1].object.visible = false;\n          levels[i].object.visible = true;\n        } else {\n          break;\n        }\n      }\n      this._currentLevel = i - 1;\n      for (; i < l; i++) {\n        levels[i].object.visible = false;\n      }\n    }\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    if (this.autoUpdate === false) data.object.autoUpdate = false;\n    data.object.levels = [];\n    const levels = this.levels;\n    for (let i = 0, l = levels.length; i < l; i++) {\n      const level = levels[i];\n      data.object.levels.push({\n        object: level.object.uuid,\n        distance: level.distance,\n        hysteresis: level.hysteresis\n      });\n    }\n    return data;\n  }\n}\nexport { LOD };","map":{"version":3,"names":["Vector3","Object3D","_v1","_v2","LOD","constructor","_currentLevel","type","Object","defineProperties","levels","enumerable","value","isLOD","autoUpdate","copy","source","i","l","length","level","addLevel","object","clone","distance","hysteresis","Math","abs","splice","add","getCurrentLevel","getObjectForDistance","levelDistance","visible","raycast","raycaster","intersects","setFromMatrixPosition","matrixWorld","ray","origin","distanceTo","update","camera","zoom","toJSON","meta","data","push","uuid"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/objects/LOD.js"],"sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Object3D } from '../core/Object3D.js';\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\n\nclass LOD extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tisLOD: {\n\t\t\t\tvalue: true,\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance, level.hysteresis );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\taddLevel( object, distance = 0, hysteresis = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, hysteresis: hysteresis, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\n\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance < levelDistance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1.distanceTo( _v2 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance >= levelDistance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance,\n\t\t\t\thysteresis: level.hysteresis\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\n\nexport { LOD };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,QAAQ,QAAQ,qBAAqB;AAE9C,MAAMC,GAAG,GAAG,aAAc,IAAIF,OAAO,EAAE;AACvC,MAAMG,GAAG,GAAG,aAAc,IAAIH,OAAO,EAAE;AAEvC,MAAMI,GAAG,SAASH,QAAQ,CAAC;EAE1BI,WAAW,GAAG;IAEb,KAAK,EAAE;IAEP,IAAI,CAACC,aAAa,GAAG,CAAC;IAEtB,IAAI,CAACC,IAAI,GAAG,KAAK;IAEjBC,MAAM,CAACC,gBAAgB,CAAE,IAAI,EAAE;MAC9BC,MAAM,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAE;MACR,CAAC;MACDC,KAAK,EAAE;QACND,KAAK,EAAE;MACR;IACD,CAAC,CAAE;IAEH,IAAI,CAACE,UAAU,GAAG,IAAI;EAEvB;EAEAC,IAAI,CAAEC,MAAM,EAAG;IAEd,KAAK,CAACD,IAAI,CAAEC,MAAM,EAAE,KAAK,CAAE;IAE3B,MAAMN,MAAM,GAAGM,MAAM,CAACN,MAAM;IAE5B,KAAM,IAAIO,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGR,MAAM,CAACS,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAEjD,MAAMG,KAAK,GAAGV,MAAM,CAAEO,CAAC,CAAE;MAEzB,IAAI,CAACI,QAAQ,CAAED,KAAK,CAACE,MAAM,CAACC,KAAK,EAAE,EAAEH,KAAK,CAACI,QAAQ,EAAEJ,KAAK,CAACK,UAAU,CAAE;IAExE;IAEA,IAAI,CAACX,UAAU,GAAGE,MAAM,CAACF,UAAU;IAEnC,OAAO,IAAI;EAEZ;EAEAO,QAAQ,CAAEC,MAAM,EAAiC;IAAA,IAA/BE,QAAQ,uEAAG,CAAC;IAAA,IAAEC,UAAU,uEAAG,CAAC;IAE7CD,QAAQ,GAAGE,IAAI,CAACC,GAAG,CAAEH,QAAQ,CAAE;IAE/B,MAAMd,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,IAAIQ,CAAC;IAEL,KAAMA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,MAAM,CAACS,MAAM,EAAED,CAAC,EAAG,EAAG;MAEtC,IAAKM,QAAQ,GAAGd,MAAM,CAAEQ,CAAC,CAAE,CAACM,QAAQ,EAAG;QAEtC;MAED;IAED;IAEAd,MAAM,CAACkB,MAAM,CAAEV,CAAC,EAAE,CAAC,EAAE;MAAEM,QAAQ,EAAEA,QAAQ;MAAEC,UAAU,EAAEA,UAAU;MAAEH,MAAM,EAAEA;IAAO,CAAC,CAAE;IAErF,IAAI,CAACO,GAAG,CAAEP,MAAM,CAAE;IAElB,OAAO,IAAI;EAEZ;EAEAQ,eAAe,GAAG;IAEjB,OAAO,IAAI,CAACxB,aAAa;EAE1B;EAIAyB,oBAAoB,CAAEP,QAAQ,EAAG;IAEhC,MAAMd,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,IAAKA,MAAM,CAACS,MAAM,GAAG,CAAC,EAAG;MAExB,IAAIF,CAAC,EAAEC,CAAC;MAER,KAAMD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGR,MAAM,CAACS,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;QAE7C,IAAIe,aAAa,GAAGtB,MAAM,CAAEO,CAAC,CAAE,CAACO,QAAQ;QAExC,IAAKd,MAAM,CAAEO,CAAC,CAAE,CAACK,MAAM,CAACW,OAAO,EAAG;UAEjCD,aAAa,IAAIA,aAAa,GAAGtB,MAAM,CAAEO,CAAC,CAAE,CAACQ,UAAU;QAExD;QAEA,IAAKD,QAAQ,GAAGQ,aAAa,EAAG;UAE/B;QAED;MAED;MAEA,OAAOtB,MAAM,CAAEO,CAAC,GAAG,CAAC,CAAE,CAACK,MAAM;IAE9B;IAEA,OAAO,IAAI;EAEZ;EAEAY,OAAO,CAAEC,SAAS,EAAEC,UAAU,EAAG;IAEhC,MAAM1B,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,IAAKA,MAAM,CAACS,MAAM,GAAG,CAAC,EAAG;MAExBjB,GAAG,CAACmC,qBAAqB,CAAE,IAAI,CAACC,WAAW,CAAE;MAE7C,MAAMd,QAAQ,GAAGW,SAAS,CAACI,GAAG,CAACC,MAAM,CAACC,UAAU,CAAEvC,GAAG,CAAE;MAEvD,IAAI,CAAC6B,oBAAoB,CAAEP,QAAQ,CAAE,CAACU,OAAO,CAAEC,SAAS,EAAEC,UAAU,CAAE;IAEvE;EAED;EAEAM,MAAM,CAAEC,MAAM,EAAG;IAEhB,MAAMjC,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,IAAKA,MAAM,CAACS,MAAM,GAAG,CAAC,EAAG;MAExBjB,GAAG,CAACmC,qBAAqB,CAAEM,MAAM,CAACL,WAAW,CAAE;MAC/CnC,GAAG,CAACkC,qBAAqB,CAAE,IAAI,CAACC,WAAW,CAAE;MAE7C,MAAMd,QAAQ,GAAGtB,GAAG,CAACuC,UAAU,CAAEtC,GAAG,CAAE,GAAGwC,MAAM,CAACC,IAAI;MAEpDlC,MAAM,CAAE,CAAC,CAAE,CAACY,MAAM,CAACW,OAAO,GAAG,IAAI;MAEjC,IAAIhB,CAAC,EAAEC,CAAC;MAER,KAAMD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGR,MAAM,CAACS,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;QAE7C,IAAIe,aAAa,GAAGtB,MAAM,CAAEO,CAAC,CAAE,CAACO,QAAQ;QAExC,IAAKd,MAAM,CAAEO,CAAC,CAAE,CAACK,MAAM,CAACW,OAAO,EAAG;UAEjCD,aAAa,IAAIA,aAAa,GAAGtB,MAAM,CAAEO,CAAC,CAAE,CAACQ,UAAU;QAExD;QAEA,IAAKD,QAAQ,IAAIQ,aAAa,EAAG;UAEhCtB,MAAM,CAAEO,CAAC,GAAG,CAAC,CAAE,CAACK,MAAM,CAACW,OAAO,GAAG,KAAK;UACtCvB,MAAM,CAAEO,CAAC,CAAE,CAACK,MAAM,CAACW,OAAO,GAAG,IAAI;QAElC,CAAC,MAAM;UAEN;QAED;MAED;MAEA,IAAI,CAAC3B,aAAa,GAAGW,CAAC,GAAG,CAAC;MAE1B,OAAQA,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;QAErBP,MAAM,CAAEO,CAAC,CAAE,CAACK,MAAM,CAACW,OAAO,GAAG,KAAK;MAEnC;IAED;EAED;EAEAY,MAAM,CAAEC,IAAI,EAAG;IAEd,MAAMC,IAAI,GAAG,KAAK,CAACF,MAAM,CAAEC,IAAI,CAAE;IAEjC,IAAK,IAAI,CAAChC,UAAU,KAAK,KAAK,EAAGiC,IAAI,CAACzB,MAAM,CAACR,UAAU,GAAG,KAAK;IAE/DiC,IAAI,CAACzB,MAAM,CAACZ,MAAM,GAAG,EAAE;IAEvB,MAAMA,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,KAAM,IAAIO,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGR,MAAM,CAACS,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAEjD,MAAMG,KAAK,GAAGV,MAAM,CAAEO,CAAC,CAAE;MAEzB8B,IAAI,CAACzB,MAAM,CAACZ,MAAM,CAACsC,IAAI,CAAE;QACxB1B,MAAM,EAAEF,KAAK,CAACE,MAAM,CAAC2B,IAAI;QACzBzB,QAAQ,EAAEJ,KAAK,CAACI,QAAQ;QACxBC,UAAU,EAAEL,KAAK,CAACK;MACnB,CAAC,CAAE;IAEJ;IAEA,OAAOsB,IAAI;EAEZ;AAED;AAGA,SAAS3C,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}