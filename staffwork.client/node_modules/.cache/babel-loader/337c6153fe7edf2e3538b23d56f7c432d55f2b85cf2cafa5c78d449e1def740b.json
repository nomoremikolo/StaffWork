{"ast":null,"code":"import { wareReducer } from \"../reducers/wareReducer\";\nimport axios from \"axios\";\nimport { GraphQlEndpoint } from \"../../global_variables\";\nexport const create_new_category = (name, callback) => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation createC{\n                  ware{\n                    createCategory(categoryName: \"${name}\"){\n                      category{\n                        id\n                        name\n                      },\n                      errors,\n                      statusCode\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.createCategory;\n    callback(r.statusCode);\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const confirmOrder = callback => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation confirmO {\n                  ware {\n                    confirmOrder {\n                      errors\n                      statusCode\n                      wares {\n                        basketId\n                        count\n                          id\n                          name\n                          brandId\n                          categoryId\n                          description\n                          sizes\n                          price\n                          oldPrice\n                          isDiscount\n                          countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.confirmOrder;\n    callback();\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const delete_ware = (id, callback) => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation deleteW{\n                  ware{\n                    deleteWare(wareId: ${id}){\n                      errors\n                      statusCode\n                      ware{\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.deleteWare;\n    callback();\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const create_ware = ware => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation newWare {\n                  ware {\n                    createWare(\n                      ware: {\n                        name: \"${ware.name}\"\n                        brandId: ${ware.brandId}\n                        categoryId: ${ware.categoryId}\n                        countInStorage: ${ware.countInStorage}\n                        isDiscount: ${ware.isDiscount}\n                        oldPrice: ${ware.oldPrice}\n                        price: ${ware.price}\n                        sizes: \"${ware.sizes}\"\n                        description: \"\"\"${ware.description}\"\"\"\n                        thumbnail: \"\"\"${ware.thumbnail}\"\"\"\n                        images: \"\"\"${ware.images}\"\"\"\n                      }\n                    ) {\n                      errors\n                      statusCode\n                      ware {\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    // let r = response.data.data.ware.confirmOrder\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const clearBasket = callback => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation clearB{\n                  ware{\n                    clearCart{\n                      errors\n                      statusCode\n                      ware{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.clearCart;\n    if (callback) callback();\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const add_to_cart = id => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation addWTB {\n                  ware {\n                    addWareToBasket(ware: { count: 1, wareId: ${id} }) {\n                      errors\n                      statusCode\n                      ware {\n                        basketId\n                        count\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.addWareToBasket;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const changeBasketWareCount = (WareId, Count) => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation changeBWC{\n                  ware{\n                    changeCount(ware: {\n                      count: ${Count},\n                      wareId: ${WareId}\n                    }){\n                      errors\n                      statusCode\n                      ware{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.addWareToBasket;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const removeFromBasket = WareId => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation removeWFB {\n                  ware {\n                    removeWareFromBasket(wareId: ${WareId}) {\n                      errors\n                      statusCode\n                      ware {\n                         basketId\n                        count\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.addWareToBasket;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const fetch_discount_wares_authorized = settings => async dispatch => {\n  dispatch(wareReducer.actions.GET_DISCOUNT_WARES());\n  try {\n    var _settings$categoryId, _settings$countOfReco, _settings$sortBy$isRe, _settings$sortBy, _settings$sortBy$valu, _settings$sortBy2;\n    const graphqlQuery = {\n      \"query\": `\n                query getaware{\n                  ware{\n                    getAllWaresAuthorized(settings: {\n                      categoryId: ${(_settings$categoryId = settings === null || settings === void 0 ? void 0 : settings.categoryId) !== null && _settings$categoryId !== void 0 ? _settings$categoryId : \"null\"},\n                      countOfRecords: ${(_settings$countOfReco = settings === null || settings === void 0 ? void 0 : settings.countOfRecords) !== null && _settings$countOfReco !== void 0 ? _settings$countOfReco : 20},\n                      sortParam: {\n                        isReverse: ${(_settings$sortBy$isRe = settings === null || settings === void 0 ? void 0 : (_settings$sortBy = settings.sortBy) === null || _settings$sortBy === void 0 ? void 0 : _settings$sortBy.isReverse) !== null && _settings$sortBy$isRe !== void 0 ? _settings$sortBy$isRe : \"false\"},\n                        value: \"${(_settings$sortBy$valu = settings === null || settings === void 0 ? void 0 : (_settings$sortBy2 = settings.sortBy) === null || _settings$sortBy2 === void 0 ? void 0 : _settings$sortBy2.value) !== null && _settings$sortBy$valu !== void 0 ? _settings$sortBy$valu : \"name\"}\",\n                        },\n                      filter: \"Discount\"\n                    }){\n                      errors\n                      statusCode\n                      wares{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        isFavorite  \n                        countInStorage\n                        thumbnail\n                        images\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getAllWaresAuthorized;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_DISCOUNT_WARES_SUCCESS(r.wares));\n    } else {\n      dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_cart_wares = () => async dispatch => {\n  dispatch(wareReducer.actions.GET_CART_WARES());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                query getWFB {\n                  ware {\n                    getWaresFromBasket {\n                      errors\n                      statusCode\n                      wares {\n                        basketId\n                        count\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                        thumbnail\n                        images\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getWaresFromBasket;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_CART_WARES_SUCCESS(r.wares));\n    } else {\n      dispatch(wareReducer.actions.GET_CART_WARES_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_CART_WARES_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_favorite_wares = () => async dispatch => {\n  dispatch(wareReducer.actions.GET_FAVORITE_WARES());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n            query getfwares {\n              ware {\n                getFavoriteWares {\n                  errors\n                  statusCode\n                  wares {\n                    wareId\n                    favoriteId\n                    name\n                    brandId\n                    categoryId\n                    description\n                    sizes\n                    price\n                    oldPrice\n                    isDiscount\n                    countInStorage\n                    thumbnail\n                  }\n                }\n              }\n            }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getFavoriteWares;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_FAVORITE_WARES_SUCCESS(r.wares));\n    } else {\n      dispatch(wareReducer.actions.GET_FAVORITE_WARES_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_FAVORITE_WARES_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_all_categories = () => async dispatch => {\n  dispatch(wareReducer.actions.GET_CATEGORIES());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                query GetAC{\n                  ware{\n                    getAllCategories{\n                      errors\n                      statusCode\n                      categories{\n                        id\n                        name\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getAllCategories;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_CATEGORIES_SUCCESS(r.categories));\n    } else {\n      dispatch(wareReducer.actions.GET_CATEGORIES_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_CATEGORIES_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_all_brands = () => async dispatch => {\n  dispatch(wareReducer.actions.GET_BRANDS());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                query getAB{\n                  ware{\n                    getAllBrands{\n                      statusCode\n                      errors\n                      brands{\n                        id\n                        name\n                        countryManufactured\n                        phone\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getAllBrands;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_BRANDS_SUCCESS(r.brands));\n    } else {\n      dispatch(wareReducer.actions.GET_BRANDS_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_BRANDS_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_discount_wares = settings => async dispatch => {\n  dispatch(wareReducer.actions.GET_DISCOUNT_WARES());\n  try {\n    var _settings$categoryId2, _settings$countOfReco2, _settings$sortBy$isRe2, _settings$sortBy3, _settings$sortBy$valu2, _settings$sortBy4;\n    const graphqlQuery = {\n      \"query\": `\n                query getaware{\n                  ware{\n                    getAllWares(settings: {\n                      categoryId: ${(_settings$categoryId2 = settings.categoryId) !== null && _settings$categoryId2 !== void 0 ? _settings$categoryId2 : \"null\"},\n                      countOfRecords: ${(_settings$countOfReco2 = settings.countOfRecords) !== null && _settings$countOfReco2 !== void 0 ? _settings$countOfReco2 : 20},\n                      sortParam: {\n                        isReverse: ${(_settings$sortBy$isRe2 = (_settings$sortBy3 = settings.sortBy) === null || _settings$sortBy3 === void 0 ? void 0 : _settings$sortBy3.isReverse) !== null && _settings$sortBy$isRe2 !== void 0 ? _settings$sortBy$isRe2 : \"false\"},\n                        value: \"${(_settings$sortBy$valu2 = (_settings$sortBy4 = settings.sortBy) === null || _settings$sortBy4 === void 0 ? void 0 : _settings$sortBy4.value) !== null && _settings$sortBy$valu2 !== void 0 ? _settings$sortBy$valu2 : \"name\"}\",\n                        }\n                      filter: \"Discount\"\n                    }){\n                      errors\n                      statusCode\n                      wares{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                        thumbnail\n                        images\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getAllWares;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_DISCOUNT_WARES_SUCCESS(r.wares));\n    } else {\n      dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_all_wares = settings => async dispatch => {\n  dispatch(wareReducer.actions.GET_WARES());\n  try {\n    var _settings$categoryId3, _settings$countOfReco3, _settings$sortBy$isRe3, _settings$sortBy5, _settings$sortBy$valu3, _settings$sortBy6;\n    const graphqlQuery = {\n      \"query\": `\n\n                query getaware{\n                  ware{\n                    getAllWares(settings: {\n                      categoryId: ${(_settings$categoryId3 = settings === null || settings === void 0 ? void 0 : settings.categoryId) !== null && _settings$categoryId3 !== void 0 ? _settings$categoryId3 : \"null\"},\n                      countOfRecords: ${(_settings$countOfReco3 = settings === null || settings === void 0 ? void 0 : settings.countOfRecords) !== null && _settings$countOfReco3 !== void 0 ? _settings$countOfReco3 : 20},\n                      sortParam: {\n                        isReverse: ${(_settings$sortBy$isRe3 = settings === null || settings === void 0 ? void 0 : (_settings$sortBy5 = settings.sortBy) === null || _settings$sortBy5 === void 0 ? void 0 : _settings$sortBy5.isReverse) !== null && _settings$sortBy$isRe3 !== void 0 ? _settings$sortBy$isRe3 : \"false\"},\n                        value: \"${(_settings$sortBy$valu3 = settings === null || settings === void 0 ? void 0 : (_settings$sortBy6 = settings.sortBy) === null || _settings$sortBy6 === void 0 ? void 0 : _settings$sortBy6.value) !== null && _settings$sortBy$valu3 !== void 0 ? _settings$sortBy$valu3 : \"name\"}\",\n                      }\n                    }){\n                      errors\n                      statusCode\n                      wares{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                        thumbnail  \n                        images\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getAllWares;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_WARES_SUCCESS(r.wares));\n    } else {\n      dispatch(wareReducer.actions.GET_WARES_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_WARES_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_all_wares_with_favorites = settings => async dispatch => {\n  dispatch(wareReducer.actions.GET_WARES());\n  try {\n    var _settings$categoryId4, _settings$countOfReco4, _settings$sortBy$isRe4, _settings$sortBy7, _settings$sortBy$valu4, _settings$sortBy8;\n    const graphqlQuery = {\n      \"query\": `\n                query getAWA    {\n                  ware{\n                    getAllWaresAuthorized(settings: {\n                      categoryId: ${(_settings$categoryId4 = settings.categoryId) !== null && _settings$categoryId4 !== void 0 ? _settings$categoryId4 : \"null\"},\n                      countOfRecords: ${(_settings$countOfReco4 = settings.countOfRecords) !== null && _settings$countOfReco4 !== void 0 ? _settings$countOfReco4 : 20},\n                      sortParam: {\n                        isReverse: ${(_settings$sortBy$isRe4 = (_settings$sortBy7 = settings.sortBy) === null || _settings$sortBy7 === void 0 ? void 0 : _settings$sortBy7.isReverse) !== null && _settings$sortBy$isRe4 !== void 0 ? _settings$sortBy$isRe4 : \"false\"},\n                        value: \"${(_settings$sortBy$valu4 = (_settings$sortBy8 = settings.sortBy) === null || _settings$sortBy8 === void 0 ? void 0 : _settings$sortBy8.value) !== null && _settings$sortBy$valu4 !== void 0 ? _settings$sortBy$valu4 : \"name\"}\",\n                      }\n                    }){\n                      errors\n                      statusCode\n                      wares {\n                        id\n                        isFavorite\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                        thumbnail\n                        images\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getAllWares;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_WARES_SUCCESS(r.wares));\n    } else {\n      dispatch(wareReducer.actions.GET_WARES_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_WARES_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_ware_by_id = id => async dispatch => {\n  dispatch(wareReducer.actions.GET_WARE_BY_ID());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                query getwarebi{\n                  ware{\n                    getWareById(wareId: ${id}){\n                      errors\n                      statusCode\n                      ware{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                        thumbnail  \n                        images\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getWareById;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_WARE_BY_ID_SUCCESS(r.ware));\n    } else {\n      dispatch(wareReducer.actions.GET_WARE_BY_ID_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_WARE_BY_ID_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_novelty_wares = settings => async dispatch => {\n  dispatch(wareReducer.actions.GET_NOVELTY_WARES());\n  try {\n    var _settings$categoryId5, _settings$countOfReco5, _settings$sortBy$isRe5, _settings$sortBy9, _settings$sortBy$valu5, _settings$sortBy10;\n    const graphqlQuery = {\n      \"query\": `\n                query getaware{\n                  ware{\n                    getAllWares(settings: {\n                      categoryId: ${(_settings$categoryId5 = settings.categoryId) !== null && _settings$categoryId5 !== void 0 ? _settings$categoryId5 : \"null\"},\n                      countOfRecords: ${(_settings$countOfReco5 = settings.countOfRecords) !== null && _settings$countOfReco5 !== void 0 ? _settings$countOfReco5 : 20},\n                      sortParam: {\n                        isReverse: ${(_settings$sortBy$isRe5 = (_settings$sortBy9 = settings.sortBy) === null || _settings$sortBy9 === void 0 ? void 0 : _settings$sortBy9.isReverse) !== null && _settings$sortBy$isRe5 !== void 0 ? _settings$sortBy$isRe5 : \"false\"},\n                        value: \"${(_settings$sortBy$valu5 = (_settings$sortBy10 = settings.sortBy) === null || _settings$sortBy10 === void 0 ? void 0 : _settings$sortBy10.value) !== null && _settings$sortBy$valu5 !== void 0 ? _settings$sortBy$valu5 : \"name\"}\",\n                        }\n                      filter: \"Novelty\"\n                    }){\n                      errors\n                      statusCode\n                      wares{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                        thumbnail\n                        images\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getAllWares;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_NOVELTY_WARES_SUCCESS(r.wares));\n    } else {\n      dispatch(wareReducer.actions.GET_NOVELTY_WARES_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_NOVELTY_WARES_ERROR(e));\n    console.log(e);\n  }\n};\nexport const add_to_favorite = id => async dispatch => {\n  dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation addfav{\n                  ware{\n                    addToFavorite(wareId: ${id}){\n                      errors\n                      statusCode\n                      ware{\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                        \n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.addToFavorite;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE_SUCCESS());\n    } else {\n      dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE_ERROR(e));\n    console.log(e);\n  }\n};\nexport const remove_from_favorite = (id, callback) => async dispatch => {\n  dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation removeFF {\n                  ware {\n                    removeFromFavorite(wareId: ${id}) {\n                      errors\n                      statusCode\n                      ware {\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.removeFromFavorite;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.REMOVE_WARE_FROM_FAVORITE_SUCCESS());\n      if (callback) callback();\n    } else {\n      dispatch(wareReducer.actions.REMOVE_WARE_FROM_FAVORITE_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.REMOVE_WARE_FROM_FAVORITE_ERROR(e));\n    console.log(e);\n  }\n};","map":{"version":3,"names":["wareReducer","axios","GraphQlEndpoint","create_new_category","name","callback","dispatch","graphqlQuery","response","url","method","withCredentials","headers","localStorage","getItem","data","r","ware","createCategory","statusCode","e","console","log","confirmOrder","delete_ware","id","deleteWare","create_ware","brandId","categoryId","countInStorage","isDiscount","oldPrice","price","sizes","description","thumbnail","images","clearBasket","clearCart","add_to_cart","addWareToBasket","changeBasketWareCount","WareId","Count","removeFromBasket","fetch_discount_wares_authorized","settings","actions","GET_DISCOUNT_WARES","countOfRecords","sortBy","isReverse","value","getAllWaresAuthorized","GET_DISCOUNT_WARES_SUCCESS","wares","GET_DISCOUNT_WARES_ERROR","errors","fetch_cart_wares","GET_CART_WARES","getWaresFromBasket","GET_CART_WARES_SUCCESS","GET_CART_WARES_ERROR","fetch_favorite_wares","GET_FAVORITE_WARES","getFavoriteWares","GET_FAVORITE_WARES_SUCCESS","GET_FAVORITE_WARES_ERROR","fetch_all_categories","GET_CATEGORIES","getAllCategories","GET_CATEGORIES_SUCCESS","categories","GET_CATEGORIES_ERROR","fetch_all_brands","GET_BRANDS","getAllBrands","GET_BRANDS_SUCCESS","brands","GET_BRANDS_ERROR","fetch_discount_wares","getAllWares","fetch_all_wares","GET_WARES","GET_WARES_SUCCESS","GET_WARES_ERROR","fetch_all_wares_with_favorites","fetch_ware_by_id","GET_WARE_BY_ID","getWareById","GET_WARE_BY_ID_SUCCESS","GET_WARE_BY_ID_ERROR","fetch_novelty_wares","GET_NOVELTY_WARES","GET_NOVELTY_WARES_SUCCESS","GET_NOVELTY_WARES_ERROR","add_to_favorite","ADD_WARE_TO_FAVORITE","addToFavorite","ADD_WARE_TO_FAVORITE_SUCCESS","ADD_WARE_TO_FAVORITE_ERROR","remove_from_favorite","removeFromFavorite","REMOVE_WARE_FROM_FAVORITE_SUCCESS","REMOVE_WARE_FROM_FAVORITE_ERROR"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/src/redux/action_creators/ware_action_creator.ts"],"sourcesContent":["import {AppDispatch} from \"../store\";\r\nimport {wareReducer} from \"../reducers/wareReducer\";\r\nimport axios from \"axios\";\r\nimport {GraphQlEndpoint} from \"../../global_variables\";\r\nimport {INewWare, ISortType} from \"../../types/ware\";\r\n\r\nexport const create_new_category = (name: string, callback: (statusCode) => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation createC{\r\n                  ware{\r\n                    createCategory(categoryName: \"${name}\"){\r\n                      category{\r\n                        id\r\n                        name\r\n                      },\r\n                      errors,\r\n                      statusCode\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.createCategory\r\n        callback(r.statusCode)\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const confirmOrder = (callback: () => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation confirmO {\r\n                  ware {\r\n                    confirmOrder {\r\n                      errors\r\n                      statusCode\r\n                      wares {\r\n                        basketId\r\n                        count\r\n                          id\r\n                          name\r\n                          brandId\r\n                          categoryId\r\n                          description\r\n                          sizes\r\n                          price\r\n                          oldPrice\r\n                          isDiscount\r\n                          countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.confirmOrder\r\n        callback()\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const delete_ware = (id: number, callback: () => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation deleteW{\r\n                  ware{\r\n                    deleteWare(wareId: ${id}){\r\n                      errors\r\n                      statusCode\r\n                      ware{\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.deleteWare\r\n        callback()\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const create_ware = (ware: INewWare) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation newWare {\r\n                  ware {\r\n                    createWare(\r\n                      ware: {\r\n                        name: \"${ware.name}\"\r\n                        brandId: ${ware.brandId}\r\n                        categoryId: ${ware.categoryId}\r\n                        countInStorage: ${ware.countInStorage}\r\n                        isDiscount: ${ware.isDiscount}\r\n                        oldPrice: ${ware.oldPrice}\r\n                        price: ${ware.price}\r\n                        sizes: \"${ware.sizes}\"\r\n                        description: \"\"\"${ware.description}\"\"\"\r\n                        thumbnail: \"\"\"${ware.thumbnail}\"\"\"\r\n                        images: \"\"\"${ware.images}\"\"\"\r\n                      }\r\n                    ) {\r\n                      errors\r\n                      statusCode\r\n                      ware {\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        // let r = response.data.data.ware.confirmOrder\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const clearBasket = (callback?: () => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation clearB{\r\n                  ware{\r\n                    clearCart{\r\n                      errors\r\n                      statusCode\r\n                      ware{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.clearCart\r\n        if(callback)\r\n            callback()\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const add_to_cart = (id: number) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation addWTB {\r\n                  ware {\r\n                    addWareToBasket(ware: { count: 1, wareId: ${id} }) {\r\n                      errors\r\n                      statusCode\r\n                      ware {\r\n                        basketId\r\n                        count\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.addWareToBasket\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const changeBasketWareCount = (WareId: number, Count: number) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation changeBWC{\r\n                  ware{\r\n                    changeCount(ware: {\r\n                      count: ${Count},\r\n                      wareId: ${WareId}\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      ware{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.addWareToBasket\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const removeFromBasket = (WareId: number) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation removeWFB {\r\n                  ware {\r\n                    removeWareFromBasket(wareId: ${WareId}) {\r\n                      errors\r\n                      statusCode\r\n                      ware {\r\n                         basketId\r\n                        count\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.addWareToBasket\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\ninterface IFetch_discount_wares {\r\n    sortBy?: ISortType | null,\r\n    categoryId?: number | null,\r\n    countOfRecords?: number | null\r\n}\r\nexport const fetch_discount_wares_authorized = (settings?: IFetch_discount_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_DISCOUNT_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getaware{\r\n                  ware{\r\n                    getAllWaresAuthorized(settings: {\r\n                      categoryId: ${settings?.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings?.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings?.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings?.sortBy?.value ?? \"name\"}\",\r\n                        },\r\n                      filter: \"Discount\"\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        isFavorite  \r\n                        countInStorage\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWaresAuthorized\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_DISCOUNT_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_cart_wares = () => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_CART_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getWFB {\r\n                  ware {\r\n                    getWaresFromBasket {\r\n                      errors\r\n                      statusCode\r\n                      wares {\r\n                        basketId\r\n                        count\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getWaresFromBasket\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_CART_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_CART_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_CART_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_favorite_wares = () => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_FAVORITE_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n            query getfwares {\r\n              ware {\r\n                getFavoriteWares {\r\n                  errors\r\n                  statusCode\r\n                  wares {\r\n                    wareId\r\n                    favoriteId\r\n                    name\r\n                    brandId\r\n                    categoryId\r\n                    description\r\n                    sizes\r\n                    price\r\n                    oldPrice\r\n                    isDiscount\r\n                    countInStorage\r\n                    thumbnail\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getFavoriteWares\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_FAVORITE_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_FAVORITE_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_FAVORITE_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_all_categories = () => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_CATEGORIES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query GetAC{\r\n                  ware{\r\n                    getAllCategories{\r\n                      errors\r\n                      statusCode\r\n                      categories{\r\n                        id\r\n                        name\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllCategories\r\n\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_CATEGORIES_SUCCESS(r.categories))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_CATEGORIES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_CATEGORIES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_all_brands = () => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_BRANDS())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getAB{\r\n                  ware{\r\n                    getAllBrands{\r\n                      statusCode\r\n                      errors\r\n                      brands{\r\n                        id\r\n                        name\r\n                        countryManufactured\r\n                        phone\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllBrands\r\n\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_BRANDS_SUCCESS(r.brands))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_BRANDS_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_BRANDS_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_discount_wares = (settings: IFetch_discount_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_DISCOUNT_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getaware{\r\n                  ware{\r\n                    getAllWares(settings: {\r\n                      categoryId: ${settings.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings.sortBy?.value ?? \"name\"}\",\r\n                        }\r\n                      filter: \"Discount\"\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWares\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_DISCOUNT_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\ninterface IFetch_all_wares {\r\n    sortBy?: ISortType | null,\r\n    categoryId?: number | null,\r\n    countOfRecords?: number | null\r\n}\r\n\r\nexport const fetch_all_wares = (settings?: IFetch_all_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n\r\n                query getaware{\r\n                  ware{\r\n                    getAllWares(settings: {\r\n                      categoryId: ${settings?.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings?.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings?.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings?.sortBy?.value ?? \"name\"}\",\r\n                      }\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail  \r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWares\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const fetch_all_wares_with_favorites = (settings: IFetch_all_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getAWA    {\r\n                  ware{\r\n                    getAllWaresAuthorized(settings: {\r\n                      categoryId: ${settings.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings.sortBy?.value ?? \"name\"}\",\r\n                      }\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares {\r\n                        id\r\n                        isFavorite\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWares\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const fetch_ware_by_id = (id: number) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARE_BY_ID())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getwarebi{\r\n                  ware{\r\n                    getWareById(wareId: ${id}){\r\n                      errors\r\n                      statusCode\r\n                      ware{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail  \r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getWareById\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_WARE_BY_ID_SUCCESS(r.ware))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_WARE_BY_ID_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_WARE_BY_ID_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\ninterface IFetch_novelty_wares {\r\n    sortBy?: ISortType | null,\r\n    categoryId?: number | null,\r\n    countOfRecords?: number | null,\r\n    filter?: string | null,\r\n}\r\n\r\nexport const fetch_novelty_wares = (settings: IFetch_novelty_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_NOVELTY_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getaware{\r\n                  ware{\r\n                    getAllWares(settings: {\r\n                      categoryId: ${settings.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings.sortBy?.value ?? \"name\"}\",\r\n                        }\r\n                      filter: \"Novelty\"\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWares\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_NOVELTY_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_NOVELTY_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_NOVELTY_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const add_to_favorite = (id: number) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation addfav{\r\n                  ware{\r\n                    addToFavorite(wareId: ${id}){\r\n                      errors\r\n                      statusCode\r\n                      ware{\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        \r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.addToFavorite\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE_SUCCESS())\r\n        } else {\r\n            dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const remove_from_favorite = (id: number, callback?: () => void) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation removeFF {\r\n                  ware {\r\n                    removeFromFavorite(wareId: ${id}) {\r\n                      errors\r\n                      statusCode\r\n                      ware {\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.removeFromFavorite\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.REMOVE_WARE_FROM_FAVORITE_SUCCESS())\r\n            if (callback)\r\n                callback()\r\n        } else {\r\n            dispatch(wareReducer.actions.REMOVE_WARE_FROM_FAVORITE_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.REMOVE_WARE_FROM_FAVORITE_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}