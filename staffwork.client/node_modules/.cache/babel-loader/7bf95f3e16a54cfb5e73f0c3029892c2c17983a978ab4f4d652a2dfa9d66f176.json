{"ast":null,"code":"import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\nclass FunctionNode extends CodeNode {\n  constructor() {\n    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let includes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(code, includes);\n    this.keywords = {};\n  }\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n    return nodeFunction;\n  }\n  call() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new FunctionCallNode(this, parameters);\n  }\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n    if (name !== '') {\n      // use a custom property name\n\n      nodeCode.name = name;\n    }\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n    nodeCode.code = code;\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n}\nexport default FunctionNode;","map":{"version":3,"names":["CodeNode","FunctionCallNode","FunctionNode","constructor","code","includes","keywords","getNodeType","builder","getNodeFunction","type","getInputs","inputs","nodeData","getDataFromNode","nodeFunction","undefined","parser","parseFunction","call","parameters","generate","output","name","nodeCode","getCodeFromNode","propertyName","getPropertyName","getCode","keywordsProperties","Object","keys","length","property","propertyRegExp","RegExp","nodeProperty","build","replace","format"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/core/FunctionNode.js"],"sourcesContent":["import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\n\nclass FunctionNode extends CodeNode {\n\n\tconstructor( code = '', includes = [] ) {\n\n\t\tsuper( code, includes );\n\n\t\tthis.keywords = {};\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.getNodeFunction( builder ).type;\n\n\t}\n\n\tgetInputs( builder ) {\n\n\t\treturn this.getNodeFunction( builder ).inputs;\n\n\t}\n\n\tgetNodeFunction( builder ) {\n\n\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\tlet nodeFunction = nodeData.nodeFunction;\n\n\t\tif ( nodeFunction === undefined ) {\n\n\t\t\tnodeFunction = builder.parser.parseFunction( this.code );\n\n\t\t\tnodeData.nodeFunction = nodeFunction;\n\n\t\t}\n\n\t\treturn nodeFunction;\n\n\t}\n\n\tcall( parameters = {} ) {\n\n\t\treturn new FunctionCallNode( this, parameters );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tsuper.generate( builder );\n\n\t\tconst nodeFunction = this.getNodeFunction( builder );\n\n\t\tconst name = nodeFunction.name;\n\t\tconst type = nodeFunction.type;\n\n\t\tconst nodeCode = builder.getCodeFromNode( this, type );\n\n\t\tif ( name !== '' ) {\n\n\t\t\t// use a custom property name\n\n\t\t\tnodeCode.name = name;\n\n\t\t}\n\n\t\tconst propertyName = builder.getPropertyName( nodeCode );\n\n\t\tlet code = this.getNodeFunction( builder ).getCode( propertyName );\n\n\t\tconst keywords = this.keywords;\n\t\tconst keywordsProperties = Object.keys( keywords );\n\n\t\tif ( keywordsProperties.length > 0 ) {\n\n\t\t\tfor ( const property of keywordsProperties ) {\n\n\t\t\t\tconst propertyRegExp = new RegExp( `\\\\b${property}\\\\b`, 'g' );\n\t\t\t\tconst nodeProperty = keywords[ property ].build( builder, 'property' );\n\n\t\t\t\tcode = code.replace( propertyRegExp, nodeProperty );\n\n\t\t\t}\n\n\t\t}\n\n\t\tnodeCode.code = code;\n\n\t\tif ( output === 'property' ) {\n\n\t\t\treturn propertyName;\n\n\t\t} else {\n\n\t\t\treturn builder.format( `${ propertyName }()`, type, output );\n\n\t\t}\n\n\t}\n\n}\n\nexport default FunctionNode;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,eAAe;AACpC,OAAOC,gBAAgB,MAAM,uBAAuB;AAEpD,MAAMC,YAAY,SAASF,QAAQ,CAAC;EAEnCG,WAAW,GAA6B;IAAA,IAA3BC,IAAI,uEAAG,EAAE;IAAA,IAAEC,QAAQ,uEAAG,EAAE;IAEpC,KAAK,CAAED,IAAI,EAAEC,QAAQ,CAAE;IAEvB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EAEnB;EAEAC,WAAW,CAAEC,OAAO,EAAG;IAEtB,OAAO,IAAI,CAACC,eAAe,CAAED,OAAO,CAAE,CAACE,IAAI;EAE5C;EAEAC,SAAS,CAAEH,OAAO,EAAG;IAEpB,OAAO,IAAI,CAACC,eAAe,CAAED,OAAO,CAAE,CAACI,MAAM;EAE9C;EAEAH,eAAe,CAAED,OAAO,EAAG;IAE1B,MAAMK,QAAQ,GAAGL,OAAO,CAACM,eAAe,CAAE,IAAI,CAAE;IAEhD,IAAIC,YAAY,GAAGF,QAAQ,CAACE,YAAY;IAExC,IAAKA,YAAY,KAAKC,SAAS,EAAG;MAEjCD,YAAY,GAAGP,OAAO,CAACS,MAAM,CAACC,aAAa,CAAE,IAAI,CAACd,IAAI,CAAE;MAExDS,QAAQ,CAACE,YAAY,GAAGA,YAAY;IAErC;IAEA,OAAOA,YAAY;EAEpB;EAEAI,IAAI,GAAoB;IAAA,IAAlBC,UAAU,uEAAG,CAAC,CAAC;IAEpB,OAAO,IAAInB,gBAAgB,CAAE,IAAI,EAAEmB,UAAU,CAAE;EAEhD;EAEAC,QAAQ,CAAEb,OAAO,EAAEc,MAAM,EAAG;IAE3B,KAAK,CAACD,QAAQ,CAAEb,OAAO,CAAE;IAEzB,MAAMO,YAAY,GAAG,IAAI,CAACN,eAAe,CAAED,OAAO,CAAE;IAEpD,MAAMe,IAAI,GAAGR,YAAY,CAACQ,IAAI;IAC9B,MAAMb,IAAI,GAAGK,YAAY,CAACL,IAAI;IAE9B,MAAMc,QAAQ,GAAGhB,OAAO,CAACiB,eAAe,CAAE,IAAI,EAAEf,IAAI,CAAE;IAEtD,IAAKa,IAAI,KAAK,EAAE,EAAG;MAElB;;MAEAC,QAAQ,CAACD,IAAI,GAAGA,IAAI;IAErB;IAEA,MAAMG,YAAY,GAAGlB,OAAO,CAACmB,eAAe,CAAEH,QAAQ,CAAE;IAExD,IAAIpB,IAAI,GAAG,IAAI,CAACK,eAAe,CAAED,OAAO,CAAE,CAACoB,OAAO,CAAEF,YAAY,CAAE;IAElE,MAAMpB,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,MAAMuB,kBAAkB,GAAGC,MAAM,CAACC,IAAI,CAAEzB,QAAQ,CAAE;IAElD,IAAKuB,kBAAkB,CAACG,MAAM,GAAG,CAAC,EAAG;MAEpC,KAAM,MAAMC,QAAQ,IAAIJ,kBAAkB,EAAG;QAE5C,MAAMK,cAAc,GAAG,IAAIC,MAAM,CAAG,MAAKF,QAAS,KAAI,EAAE,GAAG,CAAE;QAC7D,MAAMG,YAAY,GAAG9B,QAAQ,CAAE2B,QAAQ,CAAE,CAACI,KAAK,CAAE7B,OAAO,EAAE,UAAU,CAAE;QAEtEJ,IAAI,GAAGA,IAAI,CAACkC,OAAO,CAAEJ,cAAc,EAAEE,YAAY,CAAE;MAEpD;IAED;IAEAZ,QAAQ,CAACpB,IAAI,GAAGA,IAAI;IAEpB,IAAKkB,MAAM,KAAK,UAAU,EAAG;MAE5B,OAAOI,YAAY;IAEpB,CAAC,MAAM;MAEN,OAAOlB,OAAO,CAAC+B,MAAM,CAAG,GAAGb,YAAc,IAAG,EAAEhB,IAAI,EAAEY,MAAM,CAAE;IAE7D;EAED;AAED;AAEA,eAAepB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}