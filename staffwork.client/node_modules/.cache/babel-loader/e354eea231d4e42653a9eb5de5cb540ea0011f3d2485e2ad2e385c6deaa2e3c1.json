{"ast":null,"code":"import { Light } from './Light.js';\nimport { PointLightShadow } from './PointLightShadow.js';\nclass PointLight extends Light {\n  constructor(color, intensity) {\n    let distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let decay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n    super(color, intensity);\n    this.isPointLight = true;\n    this.type = 'PointLight';\n    this.distance = distance;\n    this.decay = decay;\n    this.shadow = new PointLightShadow();\n  }\n  get power() {\n    // compute the light's luminous power (in lumens) from its intensity (in candela)\n    // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n    return this.intensity * 4 * Math.PI;\n  }\n  set power(power) {\n    // set the light's intensity (in candela) from the desired luminous power (in lumens)\n    this.intensity = power / (4 * Math.PI);\n  }\n  dispose() {\n    this.shadow.dispose();\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.distance = source.distance;\n    this.decay = source.decay;\n    this.shadow = source.shadow.clone();\n    return this;\n  }\n}\nexport { PointLight };","map":{"version":3,"names":["Light","PointLightShadow","PointLight","constructor","color","intensity","distance","decay","isPointLight","type","shadow","power","Math","PI","dispose","copy","source","recursive","clone"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/lights/PointLight.js"],"sourcesContent":["import { Light } from './Light.js';\nimport { PointLightShadow } from './PointLightShadow.js';\n\nclass PointLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isPointLight = true;\n\n\t\tthis.type = 'PointLight';\n\n\t\tthis.distance = distance;\n\t\tthis.decay = decay;\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { PointLight };\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,YAAY;AAClC,SAASC,gBAAgB,QAAQ,uBAAuB;AAExD,MAAMC,UAAU,SAASF,KAAK,CAAC;EAE9BG,WAAW,CAAEC,KAAK,EAAEC,SAAS,EAA4B;IAAA,IAA1BC,QAAQ,uEAAG,CAAC;IAAA,IAAEC,KAAK,uEAAG,CAAC;IAErD,KAAK,CAAEH,KAAK,EAAEC,SAAS,CAAE;IAEzB,IAAI,CAACG,YAAY,GAAG,IAAI;IAExB,IAAI,CAACC,IAAI,GAAG,YAAY;IAExB,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACG,MAAM,GAAG,IAAIT,gBAAgB,EAAE;EAErC;EAEA,IAAIU,KAAK,GAAG;IAEX;IACA;IACA,OAAO,IAAI,CAACN,SAAS,GAAG,CAAC,GAAGO,IAAI,CAACC,EAAE;EAEpC;EAEA,IAAIF,KAAK,CAAEA,KAAK,EAAG;IAElB;IACA,IAAI,CAACN,SAAS,GAAGM,KAAK,IAAK,CAAC,GAAGC,IAAI,CAACC,EAAE,CAAE;EAEzC;EAEAC,OAAO,GAAG;IAET,IAAI,CAACJ,MAAM,CAACI,OAAO,EAAE;EAEtB;EAEAC,IAAI,CAAEC,MAAM,EAAEC,SAAS,EAAG;IAEzB,KAAK,CAACF,IAAI,CAAEC,MAAM,EAAEC,SAAS,CAAE;IAE/B,IAAI,CAACX,QAAQ,GAAGU,MAAM,CAACV,QAAQ;IAC/B,IAAI,CAACC,KAAK,GAAGS,MAAM,CAACT,KAAK;IAEzB,IAAI,CAACG,MAAM,GAAGM,MAAM,CAACN,MAAM,CAACQ,KAAK,EAAE;IAEnC,OAAO,IAAI;EAEZ;AAED;AAEA,SAAShB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}