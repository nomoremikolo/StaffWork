{"ast":null,"code":"import { authorizationReducer } from \"../reducers/authorizationReducer\";\nimport axios from \"axios\";\nimport { GraphQlEndpoint } from \"../../global_variables\";\nexport const login = (username, password) => async dispatch => {\n  const graphqlQuery = {\n    \"query\": `\n            query login{\n                authorization{\n                  login(userLogin: {\n                    username: \"${username}\"\n                    password: \"${password}\"\n                  }){\n                    errors\n                    refreshToken\n                    statusCode\n                    token\n                    user{\n                      id\n                      username\n                      name\n                      surname\n                      age\n                      email\n                      adress\n                      role\n                      isActivated\n                      permissions\n                    }\n                  }\n                }\n              }\n        `\n  };\n  dispatch(authorizationReducer.actions.LOGIN());\n  try {\n    const response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.authorization.login;\n    if (r.statusCode === 200) {\n      dispatch(authorizationReducer.actions.LOGIN_SUCCESS(r.user));\n      localStorage.setItem('accessToken', r.token);\n    } else {\n      dispatch(authorizationReducer.actions.LOGIN_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(authorizationReducer.actions.LOGIN_ERROR(e));\n    localStorage.removeItem('accessToken');\n  }\n};\nexport const refresh_token = () => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation refresh{\n                  authorization{\n                    refreshToken{\n                      errors\n                      refreshToken\n                      statusCode\n                      token\n                      user{\n                        id\n                        username\n                        name\n                        surname\n                        age\n                        email\n                        adress\n                        role\n                        isActivated\n                        permissions\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    dispatch(authorizationReducer.actions.REFRESH_TOKEN());\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.authorization.refreshToken;\n    if (r.statusCode === 200) {\n      dispatch(authorizationReducer.actions.REFRESH_TOKEN_SUCCESS(r.user));\n      localStorage.setItem('accessToken', r.token);\n    } else {\n      dispatch(authorizationReducer.actions.REFRESH_TOKEN_ERROR(r.errors));\n      localStorage.removeItem('accessToken');\n    }\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const sign_out = () => async dispatch => {\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                mutation sign_out{\n                  authorization{\n                    signOut{\n                      errors\n                      statusCode\n                    }\n                  }\n                }\n            `\n    };\n    dispatch(authorizationReducer.actions.SIGN_OUT());\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.authorization.signOut;\n    if (r.statusCode === 200) {\n      dispatch(authorizationReducer.actions.SIGN_OUT_SUCCESS());\n      localStorage.removeItem('accessToken');\n    } else {\n      dispatch(authorizationReducer.actions.SIGN_OUT_ERROR(r.errors));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n};","map":{"version":3,"names":["authorizationReducer","axios","GraphQlEndpoint","login","username","password","dispatch","graphqlQuery","actions","LOGIN","response","url","method","withCredentials","headers","data","r","authorization","statusCode","LOGIN_SUCCESS","user","localStorage","setItem","token","LOGIN_ERROR","errors","e","removeItem","refresh_token","REFRESH_TOKEN","refreshToken","REFRESH_TOKEN_SUCCESS","REFRESH_TOKEN_ERROR","console","log","sign_out","SIGN_OUT","getItem","signOut","SIGN_OUT_SUCCESS","SIGN_OUT_ERROR"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/src/redux/action_creators/authorization_action_creator.ts"],"sourcesContent":["import {AppDispatch} from \"../store\";\r\nimport {authorizationReducer} from \"../reducers/authorizationReducer\";\r\nimport axios from \"axios\";\r\nimport {GraphQlEndpoint} from \"../../global_variables\";\r\n\r\nexport const login = (username: string, password: string) => async (dispatch: AppDispatch) => {\r\n    const graphqlQuery = {\r\n        \"query\": `\r\n            query login{\r\n                authorization{\r\n                  login(userLogin: {\r\n                    username: \"${username}\"\r\n                    password: \"${password}\"\r\n                  }){\r\n                    errors\r\n                    refreshToken\r\n                    statusCode\r\n                    token\r\n                    user{\r\n                      id\r\n                      username\r\n                      name\r\n                      surname\r\n                      age\r\n                      email\r\n                      adress\r\n                      role\r\n                      isActivated\r\n                      permissions\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n        `,\r\n    };\r\n    dispatch(authorizationReducer.actions.LOGIN())\r\n    try {\r\n        const response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.authorization.login\r\n        if (r.statusCode === 200){\r\n            dispatch(authorizationReducer.actions.LOGIN_SUCCESS(r.user))\r\n            localStorage.setItem('accessToken', r.token)\r\n        }else{\r\n            dispatch(authorizationReducer.actions.LOGIN_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(authorizationReducer.actions.LOGIN_ERROR(e))\r\n        localStorage.removeItem('accessToken')\r\n    }\r\n}\r\n\r\nexport const refresh_token = () => async (dispatch: AppDispatch) => {\r\n    try{\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation refresh{\r\n                  authorization{\r\n                    refreshToken{\r\n                      errors\r\n                      refreshToken\r\n                      statusCode\r\n                      token\r\n                      user{\r\n                        id\r\n                        username\r\n                        name\r\n                        surname\r\n                        age\r\n                        email\r\n                        adress\r\n                        role\r\n                        isActivated\r\n                        permissions\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        dispatch(authorizationReducer.actions.REFRESH_TOKEN())\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n\r\n        let r = response.data.data.authorization.refreshToken\r\n        if (r.statusCode === 200){\r\n            dispatch(authorizationReducer.actions.REFRESH_TOKEN_SUCCESS(r.user))\r\n            localStorage.setItem('accessToken', r.token)\r\n        }else{\r\n            dispatch(authorizationReducer.actions.REFRESH_TOKEN_ERROR(r.errors))\r\n            localStorage.removeItem('accessToken')\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const sign_out = () => async (dispatch: AppDispatch) => {\r\n    try{\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation sign_out{\r\n                  authorization{\r\n                    signOut{\r\n                      errors\r\n                      statusCode\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        dispatch(authorizationReducer.actions.SIGN_OUT())\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.authorization.signOut\r\n        if (r.statusCode === 200){\r\n            dispatch(authorizationReducer.actions.SIGN_OUT_SUCCESS())\r\n            localStorage.removeItem('accessToken')\r\n        }else{\r\n            dispatch(authorizationReducer.actions.SIGN_OUT_ERROR(r.errors))\r\n        }\r\n    }\r\n    catch (e){\r\n        console.log(e)\r\n    }\r\n}\r\n"],"mappings":"AACA,SAAQA,oBAAoB,QAAO,kCAAkC;AACrE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,eAAe,QAAO,wBAAwB;AAEtD,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAgB,EAAEC,QAAgB,KAAK,MAAOC,QAAqB,IAAK;EAC1F,MAAMC,YAAY,GAAG;IACjB,OAAO,EAAG;AAClB;AACA;AACA;AACA,iCAAiCH,QAAS;AAC1C,iCAAiCC,QAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC;EACDC,QAAQ,CAACN,oBAAoB,CAACQ,OAAO,CAACC,KAAK,EAAE,CAAC;EAC9C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAAC;MACzBU,GAAG,EAAET,eAAe;MACpBU,MAAM,EAAE,MAAM;MACdC,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAER;IACV,CAAC,CAAC;IACF,IAAIS,CAAC,GAAGN,QAAQ,CAACK,IAAI,CAACA,IAAI,CAACE,aAAa,CAACd,KAAK;IAC9C,IAAIa,CAAC,CAACE,UAAU,KAAK,GAAG,EAAC;MACrBZ,QAAQ,CAACN,oBAAoB,CAACQ,OAAO,CAACW,aAAa,CAACH,CAAC,CAACI,IAAI,CAAC,CAAC;MAC5DC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEN,CAAC,CAACO,KAAK,CAAC;IAChD,CAAC,MAAI;MACDjB,QAAQ,CAACN,oBAAoB,CAACQ,OAAO,CAACgB,WAAW,CAACR,CAAC,CAACS,MAAM,CAAC,CAAC;IAChE;EACJ,CAAC,CAAC,OAAOC,CAAC,EAAE;IACRpB,QAAQ,CAACN,oBAAoB,CAACQ,OAAO,CAACgB,WAAW,CAACE,CAAC,CAAC,CAAC;IACrDL,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;EAC1C;AACJ,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAOtB,QAAqB,IAAK;EAChE,IAAG;IACC,MAAMC,YAAY,GAAG;MACjB,OAAO,EAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,CAAC;IACDD,QAAQ,CAACN,oBAAoB,CAACQ,OAAO,CAACqB,aAAa,EAAE,CAAC;IACtD,IAAInB,QAAQ,GAAG,MAAMT,KAAK,CAAC;MACvBU,GAAG,EAAET,eAAe;MACpBU,MAAM,EAAE,MAAM;MACdC,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAER;IACV,CAAC,CAAC;IAEF,IAAIS,CAAC,GAAGN,QAAQ,CAACK,IAAI,CAACA,IAAI,CAACE,aAAa,CAACa,YAAY;IACrD,IAAId,CAAC,CAACE,UAAU,KAAK,GAAG,EAAC;MACrBZ,QAAQ,CAACN,oBAAoB,CAACQ,OAAO,CAACuB,qBAAqB,CAACf,CAAC,CAACI,IAAI,CAAC,CAAC;MACpEC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEN,CAAC,CAACO,KAAK,CAAC;IAChD,CAAC,MAAI;MACDjB,QAAQ,CAACN,oBAAoB,CAACQ,OAAO,CAACwB,mBAAmB,CAAChB,CAAC,CAACS,MAAM,CAAC,CAAC;MACpEJ,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IAC1C;EACJ,CAAC,CACD,OAAOD,CAAC,EAAE;IACNO,OAAO,CAACC,GAAG,CAACR,CAAC,CAAC;EAClB;AACJ,CAAC;AAED,OAAO,MAAMS,QAAQ,GAAG,MAAM,MAAO7B,QAAqB,IAAK;EAC3D,IAAG;IACC,MAAMC,YAAY,GAAG;MACjB,OAAO,EAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,CAAC;IACDD,QAAQ,CAACN,oBAAoB,CAACQ,OAAO,CAAC4B,QAAQ,EAAE,CAAC;IACjD,IAAI1B,QAAQ,GAAG,MAAMT,KAAK,CAAC;MACvBU,GAAG,EAAET,eAAe;MACpBU,MAAM,EAAE,MAAM;MACdC,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASO,YAAY,CAACgB,OAAO,CAAC,aAAa,CAAE;MACnE,CAAC;MACDtB,IAAI,EAAER;IACV,CAAC,CAAC;IACF,IAAIS,CAAC,GAAGN,QAAQ,CAACK,IAAI,CAACA,IAAI,CAACE,aAAa,CAACqB,OAAO;IAChD,IAAItB,CAAC,CAACE,UAAU,KAAK,GAAG,EAAC;MACrBZ,QAAQ,CAACN,oBAAoB,CAACQ,OAAO,CAAC+B,gBAAgB,EAAE,CAAC;MACzDlB,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IAC1C,CAAC,MAAI;MACDrB,QAAQ,CAACN,oBAAoB,CAACQ,OAAO,CAACgC,cAAc,CAACxB,CAAC,CAACS,MAAM,CAAC,CAAC;IACnE;EACJ,CAAC,CACD,OAAOC,CAAC,EAAC;IACLO,OAAO,CAACC,GAAG,CAACR,CAAC,CAAC;EAClB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}