{"ast":null,"code":"import { wareReducer } from \"../reducers/wareReducer\";\nimport axios from \"axios\";\nimport { GraphQlEndpoint } from \"../../global_variables\";\nexport const fetch_discount_wares = () => async dispatch => {\n  dispatch(wareReducer.actions.GET_WARE());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                query getdware{\n                  ware{\n                    getDiscountWares{\n                      errors\n                      statusCode\n                      wares{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getDiscountWares;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_WARE_SUCCESS(r.wares));\n    } else {\n      dispatch(wareReducer.actions.GET_WARE_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_WARE_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_all_wares = () => async dispatch => {\n  dispatch(wareReducer.actions.GET_WARE());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                query getaware{\n                  ware{\n                    getAllWares{\n                      errors\n                      statusCode\n                      wares{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getAllWares;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_WARE_SUCCESS(r.wares));\n    } else {\n      dispatch(wareReducer.actions.GET_WARE_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_WARE_ERROR(e));\n    console.log(e);\n  }\n};\nexport const fetch_category_wares = CategoryId => async dispatch => {\n  dispatch(wareReducer.actions.GET_WARE());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                query getcware{\n                  ware{\n                    getWaresByCategoryId(categoryId: ${CategoryId}){\n                      errors\n                      statusCode\n                      wares{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getWaresByCategoryId;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_WARE_SUCCESS(r.wares));\n    } else {\n      dispatch(wareReducer.actions.GET_WARE_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_WARE_ERROR(e));\n    console.log(e);\n  }\n};","map":{"version":3,"names":["wareReducer","axios","GraphQlEndpoint","fetch_discount_wares","dispatch","actions","GET_WARE","graphqlQuery","response","url","method","withCredentials","headers","localStorage","getItem","data","r","ware","getDiscountWares","statusCode","GET_WARE_SUCCESS","wares","GET_WARE_ERROR","errors","e","console","log","fetch_all_wares","getAllWares","fetch_category_wares","CategoryId","getWaresByCategoryId"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/src/redux/action_creators/ware_action_creator.ts"],"sourcesContent":["import {AppDispatch} from \"../store\";\r\nimport {wareReducer} from \"../reducers/wareReducer\";\r\nimport axios from \"axios\";\r\nimport {GraphQlEndpoint} from \"../../global_variables\";\r\nimport {authorizationReducer} from \"../reducers/authorizationReducer\";\r\n\r\nexport const fetch_discount_wares = () => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARE())\r\n    try{\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getdware{\r\n                  ware{\r\n                    getDiscountWares{\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getDiscountWares\r\n        if (r.statusCode === 200){\r\n            dispatch(wareReducer.actions.GET_WARE_SUCCESS(r.wares))\r\n        }else{\r\n            dispatch(wareReducer.actions.GET_WARE_ERROR(r.errors))\r\n        }\r\n\r\n    }\r\n    catch (e){\r\n        dispatch(wareReducer.actions.GET_WARE_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const fetch_all_wares = () => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARE())\r\n    try{\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getaware{\r\n                  ware{\r\n                    getAllWares{\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWares\r\n        if (r.statusCode === 200){\r\n            dispatch(wareReducer.actions.GET_WARE_SUCCESS(r.wares))\r\n        }else{\r\n            dispatch(wareReducer.actions.GET_WARE_ERROR(r.errors))\r\n        }\r\n\r\n    }\r\n    catch (e){\r\n        dispatch(wareReducer.actions.GET_WARE_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const fetch_category_wares = (CategoryId: number) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARE())\r\n    try{\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getcware{\r\n                  ware{\r\n                    getWaresByCategoryId(categoryId: ${CategoryId}){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getWaresByCategoryId\r\n        if (r.statusCode === 200){\r\n            dispatch(wareReducer.actions.GET_WARE_SUCCESS(r.wares))\r\n        }else{\r\n            dispatch(wareReducer.actions.GET_WARE_ERROR(r.errors))\r\n        }\r\n\r\n    }\r\n    catch (e){\r\n        dispatch(wareReducer.actions.GET_WARE_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}