{"ast":null,"code":"import { Material } from './Material.js';\nimport { cloneUniforms, cloneUniformsGroups } from '../renderers/shaders/UniformsUtils.js';\nimport default_vertex from '../renderers/shaders/ShaderChunk/default_vertex.glsl.js';\nimport default_fragment from '../renderers/shaders/ShaderChunk/default_fragment.glsl.js';\nclass ShaderMaterial extends Material {\n  constructor(parameters) {\n    super();\n    this.isShaderMaterial = true;\n    this.type = 'ShaderMaterial';\n    this.defines = {};\n    this.uniforms = {};\n    this.uniformsGroups = [];\n    this.vertexShader = default_vertex;\n    this.fragmentShader = default_fragment;\n    this.linewidth = 1;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.fog = false; // set to use scene fog\n    this.lights = false; // set to use scene lights\n    this.clipping = false; // set to use user-defined clipping planes\n\n    this.extensions = {\n      derivatives: false,\n      // set to use derivatives\n      fragDepth: false,\n      // set to use fragment depth values\n      drawBuffers: false,\n      // set to use draw buffers\n      shaderTextureLOD: false // set to use shader texture LOD\n    };\n\n    // When rendered geometry doesn't include these attributes but the material does,\n    // use these default values in WebGL. This avoids errors when buffer data is missing.\n    this.defaultAttributeValues = {\n      'color': [1, 1, 1],\n      'uv': [0, 0],\n      'uv2': [0, 0]\n    };\n    this.index0AttributeName = undefined;\n    this.uniformsNeedUpdate = false;\n    this.glslVersion = null;\n    if (parameters !== undefined) {\n      this.setValues(parameters);\n    }\n  }\n  copy(source) {\n    super.copy(source);\n    this.fragmentShader = source.fragmentShader;\n    this.vertexShader = source.vertexShader;\n    this.uniforms = cloneUniforms(source.uniforms);\n    this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);\n    this.defines = Object.assign({}, source.defines);\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.fog = source.fog;\n    this.lights = source.lights;\n    this.clipping = source.clipping;\n    this.extensions = Object.assign({}, source.extensions);\n    this.glslVersion = source.glslVersion;\n    return this;\n  }\n  toJSON(meta) {\n    const data = super.toJSON(meta);\n    data.glslVersion = this.glslVersion;\n    data.uniforms = {};\n    for (const name in this.uniforms) {\n      const uniform = this.uniforms[name];\n      const value = uniform.value;\n      if (value && value.isTexture) {\n        data.uniforms[name] = {\n          type: 't',\n          value: value.toJSON(meta).uuid\n        };\n      } else if (value && value.isColor) {\n        data.uniforms[name] = {\n          type: 'c',\n          value: value.getHex()\n        };\n      } else if (value && value.isVector2) {\n        data.uniforms[name] = {\n          type: 'v2',\n          value: value.toArray()\n        };\n      } else if (value && value.isVector3) {\n        data.uniforms[name] = {\n          type: 'v3',\n          value: value.toArray()\n        };\n      } else if (value && value.isVector4) {\n        data.uniforms[name] = {\n          type: 'v4',\n          value: value.toArray()\n        };\n      } else if (value && value.isMatrix3) {\n        data.uniforms[name] = {\n          type: 'm3',\n          value: value.toArray()\n        };\n      } else if (value && value.isMatrix4) {\n        data.uniforms[name] = {\n          type: 'm4',\n          value: value.toArray()\n        };\n      } else {\n        data.uniforms[name] = {\n          value: value\n        };\n\n        // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n      }\n    }\n\n    if (Object.keys(this.defines).length > 0) data.defines = this.defines;\n    data.vertexShader = this.vertexShader;\n    data.fragmentShader = this.fragmentShader;\n    const extensions = {};\n    for (const key in this.extensions) {\n      if (this.extensions[key] === true) extensions[key] = true;\n    }\n    if (Object.keys(extensions).length > 0) data.extensions = extensions;\n    return data;\n  }\n}\nexport { ShaderMaterial };","map":{"version":3,"names":["Material","cloneUniforms","cloneUniformsGroups","default_vertex","default_fragment","ShaderMaterial","constructor","parameters","isShaderMaterial","type","defines","uniforms","uniformsGroups","vertexShader","fragmentShader","linewidth","wireframe","wireframeLinewidth","fog","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","undefined","uniformsNeedUpdate","glslVersion","setValues","copy","source","Object","assign","toJSON","meta","data","name","uniform","value","isTexture","uuid","isColor","getHex","isVector2","toArray","isVector3","isVector4","isMatrix3","isMatrix4","keys","length","key"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/materials/ShaderMaterial.js"],"sourcesContent":["import { Material } from './Material.js';\nimport { cloneUniforms, cloneUniformsGroups } from '../renderers/shaders/UniformsUtils.js';\n\nimport default_vertex from '../renderers/shaders/ShaderChunk/default_vertex.glsl.js';\nimport default_fragment from '../renderers/shaders/ShaderChunk/default_fragment.glsl.js';\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShaderMaterial = true;\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.uniformsGroups = [];\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { ShaderMaterial };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}