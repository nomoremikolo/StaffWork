{"ast":null,"code":"import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, sRGBEncoding, LinearEncoding, UnsignedByteType, _SRGBAFormat } from '../../constants.js';\nimport * as MathUtils from '../../math/MathUtils.js';\nimport { ImageUtils } from '../../extras/ImageUtils.js';\nimport { createElementNS } from '../../utils.js';\nfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n  const isWebGL2 = capabilities.isWebGL2;\n  const maxTextures = capabilities.maxTextures;\n  const maxCubemapSize = capabilities.maxCubemapSize;\n  const maxTextureSize = capabilities.maxTextureSize;\n  const maxSamples = capabilities.maxSamples;\n  const multisampledRTTExt = extensions.has('WEBGL_multisampled_render_to_texture') ? extensions.get('WEBGL_multisampled_render_to_texture') : null;\n  const supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test(navigator.userAgent);\n  const _videoTextures = new WeakMap();\n  let _canvas;\n  const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n\n  // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n  // also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n  // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n  let useOffscreenCanvas = false;\n  try {\n    useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n    // eslint-disable-next-line compat/compat\n    && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n  } catch (err) {\n\n    // Ignore any errors\n  }\n  function createCanvas(width, height) {\n    // Use OffscreenCanvas when available. Specially needed in web workers\n\n    return useOffscreenCanvas ?\n    // eslint-disable-next-line compat/compat\n    new OffscreenCanvas(width, height) : createElementNS('canvas');\n  }\n  function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n    let scale = 1;\n\n    // handle case if texture exceeds max size\n\n    if (image.width > maxSize || image.height > maxSize) {\n      scale = maxSize / Math.max(image.width, image.height);\n    }\n\n    // only perform resize if necessary\n\n    if (scale < 1 || needsPowerOfTwo === true) {\n      // only perform resize for certain image types\n\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        const floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n        const width = floor(scale * image.width);\n        const height = floor(scale * image.height);\n        if (_canvas === undefined) _canvas = createCanvas(width, height);\n\n        // cube textures can't reuse the same canvas\n\n        const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, width, height);\n        console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n        return canvas;\n      } else {\n        if ('data' in image) {\n          console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n        }\n        return image;\n      }\n    }\n    return image;\n  }\n  function isPowerOfTwo(image) {\n    return MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n  }\n  function textureNeedsPowerOfTwo(texture) {\n    if (isWebGL2) return false;\n    return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n  }\n  function textureNeedsGenerateMipmaps(texture, supportsMips) {\n    return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n  }\n  function generateMipmap(target) {\n    _gl.generateMipmap(target);\n  }\n  function getInternalFormat(internalFormatName, glFormat, glType, encoding) {\n    let forceLinearEncoding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    if (isWebGL2 === false) return glFormat;\n    if (internalFormatName !== null) {\n      if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n      console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n    }\n    let internalFormat = glFormat;\n    if (glFormat === _gl.RED) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n    }\n    if (glFormat === _gl.RG) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;\n    }\n    if (glFormat === _gl.RGBA) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = encoding === sRGBEncoding && forceLinearEncoding === false ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n      if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;\n      if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;\n    }\n    if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n      extensions.get('EXT_color_buffer_float');\n    }\n    return internalFormat;\n  }\n  function getMipLevels(texture, image, supportsMips) {\n    if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n      return Math.log2(Math.max(image.width, image.height)) + 1;\n    } else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) {\n      // user-defined mipmaps\n\n      return texture.mipmaps.length;\n    } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {\n      return image.mipmaps.length;\n    } else {\n      // texture without mipmaps (only base level)\n\n      return 1;\n    }\n  }\n\n  // Fallback filters for non-power-of-2 textures\n\n  function filterFallback(f) {\n    if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n      return _gl.NEAREST;\n    }\n    return _gl.LINEAR;\n  }\n\n  //\n\n  function onTextureDispose(event) {\n    const texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    deallocateTexture(texture);\n    if (texture.isVideoTexture) {\n      _videoTextures.delete(texture);\n    }\n  }\n  function onRenderTargetDispose(event) {\n    const renderTarget = event.target;\n    renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n    deallocateRenderTarget(renderTarget);\n  }\n\n  //\n\n  function deallocateTexture(texture) {\n    const textureProperties = properties.get(texture);\n    if (textureProperties.__webglInit === undefined) return;\n\n    // check if it's necessary to remove the WebGLTexture object\n\n    const source = texture.source;\n    const webglTextures = _sources.get(source);\n    if (webglTextures) {\n      const webglTexture = webglTextures[textureProperties.__cacheKey];\n      webglTexture.usedTimes--;\n\n      // the WebGLTexture object is not used anymore, remove it\n\n      if (webglTexture.usedTimes === 0) {\n        deleteTexture(texture);\n      }\n\n      // remove the weak map entry if no WebGLTexture uses the source anymore\n\n      if (Object.keys(webglTextures).length === 0) {\n        _sources.delete(source);\n      }\n    }\n    properties.remove(texture);\n  }\n  function deleteTexture(texture) {\n    const textureProperties = properties.get(texture);\n    _gl.deleteTexture(textureProperties.__webglTexture);\n    const source = texture.source;\n    const webglTextures = _sources.get(source);\n    delete webglTextures[textureProperties.__cacheKey];\n    info.memory.textures--;\n  }\n  function deallocateRenderTarget(renderTarget) {\n    const texture = renderTarget.texture;\n    const renderTargetProperties = properties.get(renderTarget);\n    const textureProperties = properties.get(texture);\n    if (textureProperties.__webglTexture !== undefined) {\n      _gl.deleteTexture(textureProperties.__webglTexture);\n      info.memory.textures--;\n    }\n    if (renderTarget.depthTexture) {\n      renderTarget.depthTexture.dispose();\n    }\n    if (renderTarget.isWebGLCubeRenderTarget) {\n      for (let i = 0; i < 6; i++) {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n      }\n    } else {\n      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n      if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n      if (renderTargetProperties.__webglColorRenderbuffer) {\n        for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {\n          if (renderTargetProperties.__webglColorRenderbuffer[i]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);\n        }\n      }\n      if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n    }\n    if (renderTarget.isWebGLMultipleRenderTargets) {\n      for (let i = 0, il = texture.length; i < il; i++) {\n        const attachmentProperties = properties.get(texture[i]);\n        if (attachmentProperties.__webglTexture) {\n          _gl.deleteTexture(attachmentProperties.__webglTexture);\n          info.memory.textures--;\n        }\n        properties.remove(texture[i]);\n      }\n    }\n    properties.remove(texture);\n    properties.remove(renderTarget);\n  }\n\n  //\n\n  let textureUnits = 0;\n  function resetTextureUnits() {\n    textureUnits = 0;\n  }\n  function allocateTextureUnit() {\n    const textureUnit = textureUnits;\n    if (textureUnit >= maxTextures) {\n      console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n    }\n    textureUnits += 1;\n    return textureUnit;\n  }\n  function getTextureCacheKey(texture) {\n    const array = [];\n    array.push(texture.wrapS);\n    array.push(texture.wrapT);\n    array.push(texture.wrapR || 0);\n    array.push(texture.magFilter);\n    array.push(texture.minFilter);\n    array.push(texture.anisotropy);\n    array.push(texture.internalFormat);\n    array.push(texture.format);\n    array.push(texture.type);\n    array.push(texture.generateMipmaps);\n    array.push(texture.premultiplyAlpha);\n    array.push(texture.flipY);\n    array.push(texture.unpackAlignment);\n    array.push(texture.encoding);\n    return array.join();\n  }\n\n  //\n\n  function setTexture2D(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.isVideoTexture) updateVideoTexture(texture);\n    if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {\n      const image = texture.image;\n      if (image === null) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');\n      } else if (image.complete === false) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n      } else {\n        uploadTexture(textureProperties, texture, slot);\n        return;\n      }\n    }\n    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n  function setTexture2DArray(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n    state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n  function setTexture3D(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n    state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n  function setTextureCube(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadCubeTexture(textureProperties, texture, slot);\n      return;\n    }\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n  const wrappingToGL = {\n    [RepeatWrapping]: _gl.REPEAT,\n    [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n    [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n  };\n  const filterToGL = {\n    [NearestFilter]: _gl.NEAREST,\n    [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n    [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n    [LinearFilter]: _gl.LINEAR,\n    [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n    [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n  };\n  function setTextureParameters(textureType, texture, supportsMips) {\n    if (supportsMips) {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n      }\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n    } else {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n      }\n      if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n      }\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n      if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n      }\n    }\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      const extension = extensions.get('EXT_texture_filter_anisotropic');\n      if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n      if (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n        properties.get(texture).__currentAnisotropy = texture.anisotropy;\n      }\n    }\n  }\n  function initTexture(textureProperties, texture) {\n    let forceUpload = false;\n    if (textureProperties.__webglInit === undefined) {\n      textureProperties.__webglInit = true;\n      texture.addEventListener('dispose', onTextureDispose);\n    }\n\n    // create Source <-> WebGLTextures mapping if necessary\n\n    const source = texture.source;\n    let webglTextures = _sources.get(source);\n    if (webglTextures === undefined) {\n      webglTextures = {};\n      _sources.set(source, webglTextures);\n    }\n\n    // check if there is already a WebGLTexture object for the given texture parameters\n\n    const textureCacheKey = getTextureCacheKey(texture);\n    if (textureCacheKey !== textureProperties.__cacheKey) {\n      // if not, create a new instance of WebGLTexture\n\n      if (webglTextures[textureCacheKey] === undefined) {\n        // create new entry\n\n        webglTextures[textureCacheKey] = {\n          texture: _gl.createTexture(),\n          usedTimes: 0\n        };\n        info.memory.textures++;\n\n        // when a new instance of WebGLTexture was created, a texture upload is required\n        // even if the image contents are identical\n\n        forceUpload = true;\n      }\n      webglTextures[textureCacheKey].usedTimes++;\n\n      // every time the texture cache key changes, it's necessary to check if an instance of\n      // WebGLTexture can be deleted in order to avoid a memory leak.\n\n      const webglTexture = webglTextures[textureProperties.__cacheKey];\n      if (webglTexture !== undefined) {\n        webglTextures[textureProperties.__cacheKey].usedTimes--;\n        if (webglTexture.usedTimes === 0) {\n          deleteTexture(texture);\n        }\n      }\n\n      // store references to cache key and WebGLTexture object\n\n      textureProperties.__cacheKey = textureCacheKey;\n      textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;\n    }\n    return forceUpload;\n  }\n  function uploadTexture(textureProperties, texture, slot) {\n    let textureType = _gl.TEXTURE_2D;\n    if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;\n    if (texture.isData3DTexture) textureType = _gl.TEXTURE_3D;\n    const forceUpload = initTexture(textureProperties, texture);\n    const source = texture.source;\n    state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n    const sourceProperties = properties.get(source);\n    if (source.version !== sourceProperties.__version || forceUpload === true) {\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n      const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n      let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n      image = verifyColorSpace(texture, image);\n      const supportsMips = isPowerOfTwo(image) || isWebGL2,\n        glFormat = utils.convert(texture.format, texture.encoding);\n      let glType = utils.convert(texture.type),\n        glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);\n      setTextureParameters(textureType, texture, supportsMips);\n      let mipmap;\n      const mipmaps = texture.mipmaps;\n      const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;\n      const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;\n      const levels = getMipLevels(texture, image, supportsMips);\n      if (texture.isDepthTexture) {\n        // populate depth texture with dummy data\n\n        glInternalFormat = _gl.DEPTH_COMPONENT;\n        if (isWebGL2) {\n          if (texture.type === FloatType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT32F;\n          } else if (texture.type === UnsignedIntType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT24;\n          } else if (texture.type === UnsignedInt248Type) {\n            glInternalFormat = _gl.DEPTH24_STENCIL8;\n          } else {\n            glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n          }\n        } else {\n          if (texture.type === FloatType) {\n            console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n          }\n        }\n\n        // validation checks for WebGL 1\n\n        if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n          // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n          // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n            console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n            texture.type = UnsignedIntType;\n            glType = utils.convert(texture.type);\n          }\n        }\n        if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n          // Depth stencil textures need the DEPTH_STENCIL internal format\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          glInternalFormat = _gl.DEPTH_STENCIL;\n\n          // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n          // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          if (texture.type !== UnsignedInt248Type) {\n            console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n            texture.type = UnsignedInt248Type;\n            glType = utils.convert(texture.type);\n          }\n        }\n\n        //\n\n        if (allocateMemory) {\n          if (useTexStorage) {\n            state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n          }\n        }\n      } else if (texture.isDataTexture) {\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n\n        if (mipmaps.length > 0 && supportsMips) {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n          }\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n            } else {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n            }\n          }\n          texture.generateMipmaps = false;\n        } else {\n          if (useTexStorage) {\n            if (allocateMemory) {\n              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n            }\n            state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n          }\n        }\n      } else if (texture.isCompressedTexture) {\n        if (texture.isCompressedArrayTexture) {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);\n          }\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            if (texture.format !== RGBAFormat) {\n              if (glFormat !== null) {\n                if (useTexStorage) {\n                  state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0);\n                } else {\n                  state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);\n                }\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n              }\n            } else {\n              if (useTexStorage) {\n                state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);\n              } else {\n                state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        } else {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n          }\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            if (texture.format !== RGBAFormat) {\n              if (glFormat !== null) {\n                if (useTexStorage) {\n                  state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n                } else {\n                  state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                }\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n              }\n            } else {\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n              } else {\n                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        }\n      } else if (texture.isDataArrayTexture) {\n        if (useTexStorage) {\n          if (allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);\n          }\n          state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);\n        } else {\n          state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n        }\n      } else if (texture.isData3DTexture) {\n        if (useTexStorage) {\n          if (allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);\n          }\n          state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);\n        } else {\n          state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n        }\n      } else if (texture.isFramebufferTexture) {\n        if (allocateMemory) {\n          if (useTexStorage) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n          } else {\n            let width = image.width,\n              height = image.height;\n            for (let i = 0; i < levels; i++) {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);\n              width >>= 1;\n              height >>= 1;\n            }\n          }\n        }\n      } else {\n        // regular Texture (image, video, canvas)\n\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n\n        if (mipmaps.length > 0 && supportsMips) {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n          }\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);\n            } else {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n            }\n          }\n          texture.generateMipmaps = false;\n        } else {\n          if (useTexStorage) {\n            if (allocateMemory) {\n              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n            }\n            state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n          }\n        }\n      }\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(textureType);\n      }\n      sourceProperties.__version = source.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    }\n    textureProperties.__version = texture.version;\n  }\n  function uploadCubeTexture(textureProperties, texture, slot) {\n    if (texture.image.length !== 6) return;\n    const forceUpload = initTexture(textureProperties, texture);\n    const source = texture.source;\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n    const sourceProperties = properties.get(source);\n    if (source.version !== sourceProperties.__version || forceUpload === true) {\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n      const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;\n      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n      const cubeImage = [];\n      for (let i = 0; i < 6; i++) {\n        if (!isCompressed && !isDataTexture) {\n          cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n        } else {\n          cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n        }\n        cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);\n      }\n      const image = cubeImage[0],\n        supportsMips = isPowerOfTwo(image) || isWebGL2,\n        glFormat = utils.convert(texture.format, texture.encoding),\n        glType = utils.convert(texture.type),\n        glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n      const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;\n      const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;\n      let levels = getMipLevels(texture, image, supportsMips);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n      let mipmaps;\n      if (isCompressed) {\n        if (useTexStorage && allocateMemory) {\n          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);\n        }\n        for (let i = 0; i < 6; i++) {\n          mipmaps = cubeImage[i].mipmaps;\n          for (let j = 0; j < mipmaps.length; j++) {\n            const mipmap = mipmaps[j];\n            if (texture.format !== RGBAFormat) {\n              if (glFormat !== null) {\n                if (useTexStorage) {\n                  state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n                } else {\n                  state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                }\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n              }\n            } else {\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        }\n      } else {\n        mipmaps = texture.mipmaps;\n        if (useTexStorage && allocateMemory) {\n          // TODO: Uniformly handle mipmap definitions\n          // Normal textures and compressed cube textures define base level + mips with their mipmap array\n          // Uncompressed cube textures use their mipmap array only for mips (no base level)\n\n          if (mipmaps.length > 0) levels++;\n          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);\n        }\n        for (let i = 0; i < 6; i++) {\n          if (isDataTexture) {\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n            }\n            for (let j = 0; j < mipmaps.length; j++) {\n              const mipmap = mipmaps[j];\n              const mipmapImage = mipmap.image[i].image;\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n              }\n            }\n          } else {\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n            }\n            for (let j = 0; j < mipmaps.length; j++) {\n              const mipmap = mipmaps[j];\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n              }\n            }\n          }\n        }\n      }\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        // We assume images for cube map have the same size.\n        generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n      sourceProperties.__version = source.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    }\n    textureProperties.__version = texture.version;\n  }\n\n  // Render targets\n\n  // Setup storage for target texture and bind it to correct framebuffer\n  function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n    const glFormat = utils.convert(texture.format, texture.encoding);\n    const glType = utils.convert(texture.type);\n    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n    const renderTargetProperties = properties.get(renderTarget);\n    if (!renderTargetProperties.__hasExternalTextures) {\n      if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n        state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n      } else {\n        state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n      }\n    }\n    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n    if (useMultisampledRTT(renderTarget)) {\n      multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));\n    } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {\n      // see #24753\n\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n    }\n    state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  }\n\n  // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n      let glInternalFormat = _gl.DEPTH_COMPONENT16;\n      if (isMultisample || useMultisampledRTT(renderTarget)) {\n        const depthTexture = renderTarget.depthTexture;\n        if (depthTexture && depthTexture.isDepthTexture) {\n          if (depthTexture.type === FloatType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT32F;\n          } else if (depthTexture.type === UnsignedIntType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT24;\n          }\n        }\n        const samples = getRenderTargetSamples(renderTarget);\n        if (useMultisampledRTT(renderTarget)) {\n          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else {\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        }\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n      }\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n      const samples = getRenderTargetSamples(renderTarget);\n      if (isMultisample && useMultisampledRTT(renderTarget) === false) {\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n      } else if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n      }\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else {\n      const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n      for (let i = 0; i < textures.length; i++) {\n        const texture = textures[i];\n        const glFormat = utils.convert(texture.format, texture.encoding);\n        const glType = utils.convert(texture.type);\n        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n        const samples = getRenderTargetSamples(renderTarget);\n        if (isMultisample && useMultisampledRTT(renderTarget) === false) {\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else if (useMultisampledRTT(renderTarget)) {\n          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else {\n          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n        }\n      }\n    }\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n  }\n\n  // Setup resources for a Depth Texture for a FBO (needs an extension)\n  function setupDepthTexture(framebuffer, renderTarget) {\n    const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n    if (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n      throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n    }\n\n    // upload an empty depth texture with framebuffer size\n    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n      renderTarget.depthTexture.image.width = renderTarget.width;\n      renderTarget.depthTexture.image.height = renderTarget.height;\n      renderTarget.depthTexture.needsUpdate = true;\n    }\n    setTexture2D(renderTarget.depthTexture, 0);\n    const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n    const samples = getRenderTargetSamples(renderTarget);\n    if (renderTarget.depthTexture.format === DepthFormat) {\n      if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);\n      } else {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      }\n    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n      if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);\n      } else {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      }\n    } else {\n      throw new Error('Unknown depthTexture format');\n    }\n  }\n\n  // Setup GL resources for a non-texture depth buffer\n  function setupDepthRenderbuffer(renderTarget) {\n    const renderTargetProperties = properties.get(renderTarget);\n    const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n    if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {\n      if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n    } else {\n      if (isCube) {\n        renderTargetProperties.__webglDepthbuffer = [];\n        for (let i = 0; i < 6; i++) {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n          renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n        }\n      } else {\n        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n      }\n    }\n    state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  }\n\n  // rebind framebuffer with external textures\n  function rebindTextures(renderTarget, colorTexture, depthTexture) {\n    const renderTargetProperties = properties.get(renderTarget);\n    if (colorTexture !== undefined) {\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);\n    }\n    if (depthTexture !== undefined) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  }\n\n  // Set up GL resources for the render target\n  function setupRenderTarget(renderTarget) {\n    const texture = renderTarget.texture;\n    const renderTargetProperties = properties.get(renderTarget);\n    const textureProperties = properties.get(texture);\n    renderTarget.addEventListener('dispose', onRenderTargetDispose);\n    if (renderTarget.isWebGLMultipleRenderTargets !== true) {\n      if (textureProperties.__webglTexture === undefined) {\n        textureProperties.__webglTexture = _gl.createTexture();\n      }\n      textureProperties.__version = texture.version;\n      info.memory.textures++;\n    }\n    const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n    const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n\n    // Setup framebuffer\n\n    if (isCube) {\n      renderTargetProperties.__webglFramebuffer = [];\n      for (let i = 0; i < 6; i++) {\n        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n      }\n    } else {\n      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n      if (isMultipleRenderTargets) {\n        if (capabilities.drawBuffers) {\n          const textures = renderTarget.texture;\n          for (let i = 0, il = textures.length; i < il; i++) {\n            const attachmentProperties = properties.get(textures[i]);\n            if (attachmentProperties.__webglTexture === undefined) {\n              attachmentProperties.__webglTexture = _gl.createTexture();\n              info.memory.textures++;\n            }\n          }\n        } else {\n          console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n        }\n      }\n      if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {\n        const textures = isMultipleRenderTargets ? texture : [texture];\n        renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n        renderTargetProperties.__webglColorRenderbuffer = [];\n        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n        for (let i = 0; i < textures.length; i++) {\n          const texture = textures[i];\n          renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();\n          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n          const glFormat = utils.convert(texture.format, texture.encoding);\n          const glType = utils.convert(texture.type);\n          const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, renderTarget.isXRRenderTarget === true);\n          const samples = getRenderTargetSamples(renderTarget);\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n        }\n        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n        if (renderTarget.depthBuffer) {\n          renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n        }\n        state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n      }\n    }\n\n    // Setup color buffer\n\n    if (isCube) {\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n      for (let i = 0; i < 6; i++) {\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n      }\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n      state.unbindTexture();\n    } else if (isMultipleRenderTargets) {\n      const textures = renderTarget.texture;\n      for (let i = 0, il = textures.length; i < il; i++) {\n        const attachment = textures[i];\n        const attachmentProperties = properties.get(attachment);\n        state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n        setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n        if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n          generateMipmap(_gl.TEXTURE_2D);\n        }\n      }\n      state.unbindTexture();\n    } else {\n      let glTextureType = _gl.TEXTURE_2D;\n      if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {\n        if (isWebGL2) {\n          glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n        } else {\n          console.error('THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.');\n        }\n      }\n      state.bindTexture(glTextureType, textureProperties.__webglTexture);\n      setTextureParameters(glTextureType, texture, supportsMips);\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(glTextureType);\n      }\n      state.unbindTexture();\n    }\n\n    // Setup depth and stencil buffers\n\n    if (renderTarget.depthBuffer) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  }\n  function updateRenderTargetMipmap(renderTarget) {\n    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n    const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n    for (let i = 0, il = textures.length; i < il; i++) {\n      const texture = textures[i];\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n        const webglTexture = properties.get(texture).__webglTexture;\n        state.bindTexture(target, webglTexture);\n        generateMipmap(target);\n        state.unbindTexture();\n      }\n    }\n  }\n  function updateMultisampleRenderTarget(renderTarget) {\n    if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {\n      const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [renderTarget.texture];\n      const width = renderTarget.width;\n      const height = renderTarget.height;\n      let mask = _gl.COLOR_BUFFER_BIT;\n      const invalidationArray = [];\n      const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n      const renderTargetProperties = properties.get(renderTarget);\n      const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n\n      // If MRT we need to remove FBO attachments\n      if (isMultipleRenderTargets) {\n        for (let i = 0; i < textures.length; i++) {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n          _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);\n        }\n      }\n      state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n      state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n      for (let i = 0; i < textures.length; i++) {\n        invalidationArray.push(_gl.COLOR_ATTACHMENT0 + i);\n        if (renderTarget.depthBuffer) {\n          invalidationArray.push(depthStyle);\n        }\n        const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== undefined ? renderTargetProperties.__ignoreDepthValues : false;\n        if (ignoreDepthValues === false) {\n          if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n          if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n        }\n        if (isMultipleRenderTargets) {\n          _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n        }\n        if (ignoreDepthValues === true) {\n          _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [depthStyle]);\n          _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);\n        }\n        if (isMultipleRenderTargets) {\n          const webglTexture = properties.get(textures[i]).__webglTexture;\n          _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);\n        }\n        _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n        if (supportsInvalidateFramebuffer) {\n          _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);\n        }\n      }\n      state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n      state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);\n\n      // If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\n      if (isMultipleRenderTargets) {\n        for (let i = 0; i < textures.length; i++) {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n          const webglTexture = properties.get(textures[i]).__webglTexture;\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n          _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);\n        }\n      }\n      state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n    }\n  }\n  function getRenderTargetSamples(renderTarget) {\n    return Math.min(maxSamples, renderTarget.samples);\n  }\n  function useMultisampledRTT(renderTarget) {\n    const renderTargetProperties = properties.get(renderTarget);\n    return isWebGL2 && renderTarget.samples > 0 && extensions.has('WEBGL_multisampled_render_to_texture') === true && renderTargetProperties.__useRenderToTexture !== false;\n  }\n  function updateVideoTexture(texture) {\n    const frame = info.render.frame;\n\n    // Check the last frame we updated the VideoTexture\n\n    if (_videoTextures.get(texture) !== frame) {\n      _videoTextures.set(texture, frame);\n      texture.update();\n    }\n  }\n  function verifyColorSpace(texture, image) {\n    const encoding = texture.encoding;\n    const format = texture.format;\n    const type = texture.type;\n    if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat) return image;\n    if (encoding !== LinearEncoding) {\n      // sRGB\n\n      if (encoding === sRGBEncoding) {\n        if (isWebGL2 === false) {\n          // in WebGL 1, try to use EXT_sRGB extension and unsized formats\n\n          if (extensions.has('EXT_sRGB') === true && format === RGBAFormat) {\n            texture.format = _SRGBAFormat;\n\n            // it's not possible to generate mips in WebGL 1 with this extension\n\n            texture.minFilter = LinearFilter;\n            texture.generateMipmaps = false;\n          } else {\n            // slow fallback (CPU decode)\n\n            image = ImageUtils.sRGBToLinear(image);\n          }\n        } else {\n          // in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n\n          if (format !== RGBAFormat || type !== UnsignedByteType) {\n            console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');\n          }\n        }\n      } else {\n        console.error('THREE.WebGLTextures: Unsupported texture encoding:', encoding);\n      }\n    }\n    return image;\n  }\n\n  //\n\n  this.allocateTextureUnit = allocateTextureUnit;\n  this.resetTextureUnits = resetTextureUnits;\n  this.setTexture2D = setTexture2D;\n  this.setTexture2DArray = setTexture2DArray;\n  this.setTexture3D = setTexture3D;\n  this.setTextureCube = setTextureCube;\n  this.rebindTextures = rebindTextures;\n  this.setupRenderTarget = setupRenderTarget;\n  this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n  this.setupDepthRenderbuffer = setupDepthRenderbuffer;\n  this.setupFrameBufferTexture = setupFrameBufferTexture;\n  this.useMultisampledRTT = useMultisampledRTT;\n}\nexport { WebGLTextures };","map":{"version":3,"names":["LinearFilter","LinearMipmapLinearFilter","LinearMipmapNearestFilter","NearestFilter","NearestMipmapLinearFilter","NearestMipmapNearestFilter","RGBAFormat","DepthFormat","DepthStencilFormat","UnsignedShortType","UnsignedIntType","UnsignedInt248Type","FloatType","HalfFloatType","MirroredRepeatWrapping","ClampToEdgeWrapping","RepeatWrapping","sRGBEncoding","LinearEncoding","UnsignedByteType","_SRGBAFormat","MathUtils","ImageUtils","createElementNS","WebGLTextures","_gl","extensions","state","properties","capabilities","utils","info","isWebGL2","maxTextures","maxCubemapSize","maxTextureSize","maxSamples","multisampledRTTExt","has","get","supportsInvalidateFramebuffer","navigator","test","userAgent","_videoTextures","WeakMap","_canvas","_sources","useOffscreenCanvas","OffscreenCanvas","getContext","err","createCanvas","width","height","resizeImage","image","needsPowerOfTwo","needsNewCanvas","maxSize","scale","Math","max","HTMLImageElement","HTMLCanvasElement","ImageBitmap","floor","floorPowerOfTwo","undefined","canvas","context","drawImage","console","warn","isPowerOfTwo","textureNeedsPowerOfTwo","texture","wrapS","wrapT","minFilter","textureNeedsGenerateMipmaps","supportsMips","generateMipmaps","generateMipmap","target","getInternalFormat","internalFormatName","glFormat","glType","encoding","forceLinearEncoding","internalFormat","RED","FLOAT","R32F","HALF_FLOAT","R16F","UNSIGNED_BYTE","R8","RG","RG32F","RG16F","RG8","RGBA","RGBA32F","RGBA16F","SRGB8_ALPHA8","RGBA8","UNSIGNED_SHORT_4_4_4_4","RGBA4","UNSIGNED_SHORT_5_5_5_1","RGB5_A1","getMipLevels","isFramebufferTexture","log2","mipmaps","length","isCompressedTexture","Array","isArray","filterFallback","f","NEAREST","LINEAR","onTextureDispose","event","removeEventListener","deallocateTexture","isVideoTexture","delete","onRenderTargetDispose","renderTarget","deallocateRenderTarget","textureProperties","__webglInit","source","webglTextures","webglTexture","__cacheKey","usedTimes","deleteTexture","Object","keys","remove","__webglTexture","memory","textures","renderTargetProperties","depthTexture","dispose","isWebGLCubeRenderTarget","i","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","isWebGLMultipleRenderTargets","il","attachmentProperties","textureUnits","resetTextureUnits","allocateTextureUnit","textureUnit","getTextureCacheKey","array","push","wrapR","magFilter","anisotropy","format","type","premultiplyAlpha","flipY","unpackAlignment","join","setTexture2D","slot","updateVideoTexture","isRenderTargetTexture","version","__version","complete","uploadTexture","bindTexture","TEXTURE_2D","TEXTURE0","setTexture2DArray","TEXTURE_2D_ARRAY","setTexture3D","TEXTURE_3D","setTextureCube","uploadCubeTexture","TEXTURE_CUBE_MAP","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","setTextureParameters","textureType","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","extension","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","min","getMaxAnisotropy","initTexture","forceUpload","addEventListener","set","textureCacheKey","createTexture","isDataArrayTexture","isCompressedArrayTexture","isData3DTexture","sourceProperties","activeTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","verifyColorSpace","convert","glInternalFormat","mipmap","useTexStorage","allocateMemory","levels","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","error","DEPTH_STENCIL","texStorage2D","texImage2D","isDataTexture","texSubImage2D","data","texStorage3D","depth","compressedTexSubImage3D","compressedTexImage3D","texSubImage3D","texImage3D","compressedTexSubImage2D","compressedTexImage2D","onUpdate","isCompressed","cubeImage","j","TEXTURE_CUBE_MAP_POSITIVE_X","mipmapImage","setupFrameBufferTexture","framebuffer","attachment","textureTarget","__hasExternalTextures","bindFramebuffer","FRAMEBUFFER","useMultisampledRTT","framebufferTexture2DMultisampleEXT","getRenderTargetSamples","TEXTURE_CUBE_MAP_NEGATIVE_Z","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","samples","renderbufferStorageMultisampleEXT","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","setupDepthTexture","isCube","Error","needsUpdate","webglDepthTexture","setupDepthRenderbuffer","__autoAllocateDepthBuffer","createRenderbuffer","rebindTextures","colorTexture","COLOR_ATTACHMENT0","setupRenderTarget","isMultipleRenderTargets","createFramebuffer","drawBuffers","isXRRenderTarget","unbindTexture","glTextureType","isWebGL3DRenderTarget","isWebGLArrayRenderTarget","updateRenderTargetMipmap","updateMultisampleRenderTarget","mask","COLOR_BUFFER_BIT","invalidationArray","depthStyle","DRAW_FRAMEBUFFER","READ_FRAMEBUFFER","ignoreDepthValues","__ignoreDepthValues","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","invalidateFramebuffer","blitFramebuffer","__useRenderToTexture","frame","render","update","sRGBToLinear"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/renderers/webgl/WebGLTextures.js"],"sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, sRGBEncoding, LinearEncoding, UnsignedByteType, _SRGBAFormat } from '../../constants.js';\nimport * as MathUtils from '../../math/MathUtils.js';\nimport { ImageUtils } from '../../extras/ImageUtils.js';\nimport { createElementNS } from '../../utils.js';\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst maxTextures = capabilities.maxTextures;\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\tconst maxTextureSize = capabilities.maxTextureSize;\n\tconst maxSamples = capabilities.maxSamples;\n\tconst multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;\n\tconst supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );\n\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\tconst _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tconst floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\n\t\t\t\tconst width = floor( scale * image.width );\n\t\t\t\tconst height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, encoding, forceLinearEncoding = false ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === _gl.RED ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RG ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGBA ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( encoding === sRGBEncoding && forceLinearEncoding === false ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;\n\n\t\t}\n\n\t\tif ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||\n\t\t\tinternalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||\n\t\t\tinternalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tfunction getMipLevels( texture, image, supportsMips ) {\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {\n\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\n\n\t\t} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {\n\n\t\t\t// user-defined mipmaps\n\n\t\t\treturn texture.mipmaps.length;\n\n\t\t} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {\n\n\t\t\treturn image.mipmaps.length;\n\n\t\t} else {\n\n\t\t\t// texture without mipmaps (only base level)\n\n\t\t\treturn 1;\n\n\t\t}\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t// check if it's necessary to remove the WebGLTexture object\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures ) {\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\t\t\twebglTexture.usedTimes --;\n\n\t\t\t// the WebGLTexture object is not used anymore, remove it\n\n\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\tdeleteTexture( texture );\n\n\t\t\t}\n\n\t\t\t// remove the weak map entry if no WebGLTexture uses the source anymore\n\n\t\t\tif ( Object.keys( webglTextures ).length === 0 ) {\n\n\t\t\t\t_sources.delete( source );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deleteTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\t\tdelete webglTextures[ textureProperties.__cacheKey ];\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) {\n\n\t\t\t\tfor ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {\n\n\t\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = texture.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachmentProperties = properties.get( texture[ i ] );\n\n\t\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\t\tinfo.memory.textures --;\n\n\t\t\t\t}\n\n\t\t\t\tproperties.remove( texture[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tfunction getTextureCacheKey( texture ) {\n\n\t\tconst array = [];\n\n\t\tarray.push( texture.wrapS );\n\t\tarray.push( texture.wrapT );\n\t\tarray.push( texture.wrapR || 0 );\n\t\tarray.push( texture.magFilter );\n\t\tarray.push( texture.minFilter );\n\t\tarray.push( texture.anisotropy );\n\t\tarray.push( texture.internalFormat );\n\t\tarray.push( texture.format );\n\t\tarray.push( texture.type );\n\t\tarray.push( texture.generateMipmaps );\n\t\tarray.push( texture.premultiplyAlpha );\n\t\tarray.push( texture.flipY );\n\t\tarray.push( texture.unpackAlignment );\n\t\tarray.push( texture.encoding );\n\n\t\treturn array.join();\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: _gl.REPEAT,\n\t\t[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,\n\t\t[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: _gl.NEAREST,\n\t\t[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t[ LinearFilter ]: _gl.LINEAR,\n\t\t[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\t\t\tif ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tlet forceUpload = false;\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t}\n\n\t\t// create Source <-> WebGLTextures mapping if necessary\n\n\t\tconst source = texture.source;\n\t\tlet webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures === undefined ) {\n\n\t\t\twebglTextures = {};\n\t\t\t_sources.set( source, webglTextures );\n\n\t\t}\n\n\t\t// check if there is already a WebGLTexture object for the given texture parameters\n\n\t\tconst textureCacheKey = getTextureCacheKey( texture );\n\n\t\tif ( textureCacheKey !== textureProperties.__cacheKey ) {\n\n\t\t\t// if not, create a new instance of WebGLTexture\n\n\t\t\tif ( webglTextures[ textureCacheKey ] === undefined ) {\n\n\t\t\t\t// create new entry\n\n\t\t\t\twebglTextures[ textureCacheKey ] = {\n\t\t\t\t\ttexture: _gl.createTexture(),\n\t\t\t\t\tusedTimes: 0\n\t\t\t\t};\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t// when a new instance of WebGLTexture was created, a texture upload is required\n\t\t\t\t// even if the image contents are identical\n\n\t\t\t\tforceUpload = true;\n\n\t\t\t}\n\n\t\t\twebglTextures[ textureCacheKey ].usedTimes ++;\n\n\t\t\t// every time the texture cache key changes, it's necessary to check if an instance of\n\t\t\t// WebGLTexture can be deleted in order to avoid a memory leak.\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\n\t\t\tif ( webglTexture !== undefined ) {\n\n\t\t\t\twebglTextures[ textureProperties.__cacheKey ].usedTimes --;\n\n\t\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\t\tdeleteTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// store references to cache key and WebGLTexture object\n\n\t\t\ttextureProperties.__cacheKey = textureCacheKey;\n\t\t\ttextureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;\n\n\t\t}\n\n\t\treturn forceUpload;\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = _gl.TEXTURE_2D;\n\n\t\tif ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\tif ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE );\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tlet image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\t\t\timage = verifyColorSpace( texture, image );\n\n\t\t\tconst supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.encoding );\n\n\t\t\tlet glType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tconst levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedIntType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tif ( texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0 );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isFramebufferTexture ) {\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlet width = image.width, height = image.height;\n\n\t\t\t\t\t\tfor ( let i = 0; i < levels; i ++ ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );\n\n\t\t\t\t\t\t\twidth >>= 1;\n\t\t\t\t\t\t\theight >>= 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE );\n\n\t\t\tconst isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );\n\t\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );\n\n\t\t\t}\n\n\t\t\tconst image = cubeImage[ 0 ],\n\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.encoding ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tlet levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );\n\n\t\t\tlet mipmaps;\n\n\t\t\tif ( isCompressed ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t// TODO: Uniformly handle mipmap definitions\n\t\t\t\t\t// Normal textures and compressed cube textures define base level + mips with their mipmap array\n\t\t\t\t\t// Uncompressed cube textures use their mipmap array only for mips (no base level)\n\n\t\t\t\t\tif ( mipmaps.length > 0 ) levels ++;\n\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {\n\n\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\tif ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\tstate.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\n\n\t\t} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\tif ( isMultisample || useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// rebind framebuffer with external textures\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( colorTexture !== undefined ) {\n\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t}\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\n\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\t\tconst supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tif ( capabilities.drawBuffers ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\tconst textures = isMultipleRenderTargets ? texture : [ texture ];\n\n\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = [];\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst glFormat = utils.convert( texture.format, texture.encoding );\n\t\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, renderTarget.isXRRenderTarget === true );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tconst textures = renderTarget.texture;\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, attachment, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [ renderTarget.texture ];\n\t\t\tconst width = renderTarget.width;\n\t\t\tconst height = renderTarget.height;\n\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\tconst invalidationArray = [];\n\t\t\tconst depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\n\t\t\t// If MRT we need to remove FBO attachments\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tinvalidationArray.push( _gl.COLOR_ATTACHMENT0 + i );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t\t}\n\n\t\t\t\tconst ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;\n\n\t\t\t\tif ( ignoreDepthValues === false ) {\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ignoreDepthValues === true ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, [ depthStyle ] );\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );\n\n\t\t\t\tif ( supportsInvalidateFramebuffer ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArray );\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );\n\n\t\t\t// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn Math.min( maxSamples, renderTarget.samples );\n\n\t}\n\n\tfunction useMultisampledRTT( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\treturn isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\tfunction verifyColorSpace( texture, image ) {\n\n\t\tconst encoding = texture.encoding;\n\t\tconst format = texture.format;\n\t\tconst type = texture.type;\n\n\t\tif ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;\n\n\t\tif ( encoding !== LinearEncoding ) {\n\n\t\t\t// sRGB\n\n\t\t\tif ( encoding === sRGBEncoding ) {\n\n\t\t\t\tif ( isWebGL2 === false ) {\n\n\t\t\t\t\t// in WebGL 1, try to use EXT_sRGB extension and unsized formats\n\n\t\t\t\t\tif ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {\n\n\t\t\t\t\t\ttexture.format = _SRGBAFormat;\n\n\t\t\t\t\t\t// it's not possible to generate mips in WebGL 1 with this extension\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// slow fallback (CPU decode)\n\n\t\t\t\t\t\timage = ImageUtils.sRGBToLinear( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n\n\t\t\t\t\tif ( format !== RGBAFormat || type !== UnsignedByteType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.WebGLTextures: Unsupported texture encoding:', encoding );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.rebindTextures = rebindTextures;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\n\tthis.useMultisampledRTT = useMultisampledRTT;\n\n}\n\nexport { WebGLTextures };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}