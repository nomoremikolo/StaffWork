{"ast":null,"code":"import { Ray } from '../math/Ray.js';\nimport { Layers } from './Layers.js';\nclass Raycaster {\n  constructor(origin, direction) {\n    let near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n    this.ray = new Ray(origin, direction);\n    // direction is assumed to be normalized (for accurate distance calculations)\n\n    this.near = near;\n    this.far = far;\n    this.camera = null;\n    this.layers = new Layers();\n    this.params = {\n      Mesh: {},\n      Line: {\n        threshold: 1\n      },\n      LOD: {},\n      Points: {\n        threshold: 1\n      },\n      Sprite: {}\n    };\n  }\n  set(origin, direction) {\n    // direction is assumed to be normalized (for accurate distance calculations)\n\n    this.ray.set(origin, direction);\n  }\n  setFromCamera(coords, camera) {\n    if (camera.isPerspectiveCamera) {\n      this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n      this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n      this.camera = camera;\n    } else if (camera.isOrthographicCamera) {\n      this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n      this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n      this.camera = camera;\n    } else {\n      console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n    }\n  }\n  intersectObject(object) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let intersects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    intersectObject(object, this, intersects, recursive);\n    intersects.sort(ascSort);\n    return intersects;\n  }\n  intersectObjects(objects) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let intersects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    for (let i = 0, l = objects.length; i < l; i++) {\n      intersectObject(objects[i], this, intersects, recursive);\n    }\n    intersects.sort(ascSort);\n    return intersects;\n  }\n}\nfunction ascSort(a, b) {\n  return a.distance - b.distance;\n}\nfunction intersectObject(object, raycaster, intersects, recursive) {\n  if (object.layers.test(raycaster.layers)) {\n    object.raycast(raycaster, intersects);\n  }\n  if (recursive === true) {\n    const children = object.children;\n    for (let i = 0, l = children.length; i < l; i++) {\n      intersectObject(children[i], raycaster, intersects, true);\n    }\n  }\n}\nexport { Raycaster };","map":{"version":3,"names":["Ray","Layers","Raycaster","constructor","origin","direction","near","far","Infinity","ray","camera","layers","params","Mesh","Line","threshold","LOD","Points","Sprite","set","setFromCamera","coords","isPerspectiveCamera","setFromMatrixPosition","matrixWorld","x","y","unproject","sub","normalize","isOrthographicCamera","transformDirection","console","error","type","intersectObject","object","recursive","intersects","sort","ascSort","intersectObjects","objects","i","l","length","a","b","distance","raycaster","test","raycast","children"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/core/Raycaster.js"],"sourcesContent":["import { Ray } from '../math/Ray.js';\nimport { Layers } from './Layers.js';\n\nclass Raycaster {\n\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t}\n\n\tif ( recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\nexport { Raycaster };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}