{"ast":null,"code":"import BRDF_Lambert from './BSDF/BRDF_Lambert.js';\nimport BRDF_GGX from './BSDF/BRDF_GGX.js';\nimport DFGApprox from './BSDF/DFGApprox.js';\nimport { ShaderNode, vec3, mul, clamp, add, sub, dot, div, transformedNormalView, pow, exp2, dotNV, diffuseColor, specularColor, roughness, temp } from '../shadernode/ShaderNodeElements.js';\n\n// Fdez-Agüera's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\n// Approximates multiscattering in order to preserve energy.\n// http://www.jcgt.org/published/0008/01/03/\nconst computeMultiscattering = function (singleScatter, multiScatter) {\n  let specularF90 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const fab = DFGApprox.call({\n    roughness\n  });\n  const FssEss = add(mul(specularColor, fab.x), mul(specularF90, fab.y));\n  const Ess = add(fab.x, fab.y);\n  const Ems = sub(1.0, Ess);\n  const Favg = add(specularColor, mul(sub(1.0, specularColor), 0.047619)); // 1/21\n  const Fms = div(mul(FssEss, Favg), sub(1.0, mul(Ems, Favg)));\n  singleScatter.add(FssEss);\n  multiScatter.add(mul(Fms, Ems));\n};\nconst RE_IndirectSpecular_Physical = new ShaderNode(inputs => {\n  const {\n    radiance,\n    iblIrradiance,\n    reflectedLight\n  } = inputs;\n\n  // Both indirect specular and indirect diffuse light accumulate here\n\n  const singleScattering = temp(vec3());\n  const multiScattering = temp(vec3());\n  const cosineWeightedIrradiance = mul(iblIrradiance, 1 / Math.PI);\n  computeMultiscattering(singleScattering, multiScattering);\n  const diffuse = mul(diffuseColor, sub(1.0, add(singleScattering, multiScattering)));\n  reflectedLight.indirectSpecular.add(mul(radiance, singleScattering));\n  reflectedLight.indirectSpecular.add(mul(multiScattering, cosineWeightedIrradiance));\n  reflectedLight.indirectDiffuse.add(mul(diffuse, cosineWeightedIrradiance));\n});\nconst RE_IndirectDiffuse_Physical = new ShaderNode(inputs => {\n  const {\n    irradiance,\n    reflectedLight\n  } = inputs;\n  reflectedLight.indirectDiffuse.add(mul(irradiance, BRDF_Lambert.call({\n    diffuseColor\n  })));\n});\nconst RE_Direct_Physical = new ShaderNode(inputs => {\n  const {\n    lightDirection,\n    lightColor,\n    reflectedLight\n  } = inputs;\n  const dotNL = clamp(dot(transformedNormalView, lightDirection));\n  const irradiance = mul(dotNL, lightColor);\n  reflectedLight.directDiffuse.add(mul(irradiance, BRDF_Lambert.call({\n    diffuseColor: diffuseColor.rgb\n  })));\n  reflectedLight.directSpecular.add(mul(irradiance, BRDF_GGX.call({\n    lightDirection,\n    f0: specularColor,\n    f90: 1,\n    roughness\n  })));\n});\nconst RE_AmbientOcclusion_Physical = new ShaderNode(_ref => {\n  let {\n    ambientOcclusion,\n    reflectedLight\n  } = _ref;\n  const aoNV = add(dotNV, ambientOcclusion);\n  const aoExp = exp2(sub(mul(-16.0, roughness), 1.0));\n  const aoNode = clamp(add(sub(pow(aoNV, aoExp), 1.0), ambientOcclusion));\n  reflectedLight.indirectDiffuse.mul(ambientOcclusion);\n  reflectedLight.indirectSpecular.mul(aoNode);\n});\nconst PhysicalLightingModel = {\n  direct: RE_Direct_Physical,\n  indirectDiffuse: RE_IndirectDiffuse_Physical,\n  indirectSpecular: RE_IndirectSpecular_Physical,\n  ambientOcclusion: RE_AmbientOcclusion_Physical\n};\nexport default PhysicalLightingModel;","map":{"version":3,"names":["BRDF_Lambert","BRDF_GGX","DFGApprox","ShaderNode","vec3","mul","clamp","add","sub","dot","div","transformedNormalView","pow","exp2","dotNV","diffuseColor","specularColor","roughness","temp","computeMultiscattering","singleScatter","multiScatter","specularF90","fab","call","FssEss","x","y","Ess","Ems","Favg","Fms","RE_IndirectSpecular_Physical","inputs","radiance","iblIrradiance","reflectedLight","singleScattering","multiScattering","cosineWeightedIrradiance","Math","PI","diffuse","indirectSpecular","indirectDiffuse","RE_IndirectDiffuse_Physical","irradiance","RE_Direct_Physical","lightDirection","lightColor","dotNL","directDiffuse","rgb","directSpecular","f0","f90","RE_AmbientOcclusion_Physical","ambientOcclusion","aoNV","aoExp","aoNode","PhysicalLightingModel","direct"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/functions/PhysicalLightingModel.js"],"sourcesContent":["import BRDF_Lambert from './BSDF/BRDF_Lambert.js';\nimport BRDF_GGX from './BSDF/BRDF_GGX.js';\nimport DFGApprox from './BSDF/DFGApprox.js';\nimport {\n\tShaderNode,\n\tvec3, mul, clamp, add, sub, dot, div, transformedNormalView,\n\tpow, exp2, dotNV,\n\tdiffuseColor, specularColor, roughness, temp\n} from '../shadernode/ShaderNodeElements.js';\n\n// Fdez-Agüera's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\n// Approximates multiscattering in order to preserve energy.\n// http://www.jcgt.org/published/0008/01/03/\nconst computeMultiscattering = ( singleScatter, multiScatter, specularF90 = 1 ) => {\n\n\tconst fab = DFGApprox.call( { roughness } );\n\n\tconst FssEss = add( mul( specularColor, fab.x ), mul( specularF90, fab.y ) );\n\n\tconst Ess = add( fab.x, fab.y );\n\tconst Ems = sub( 1.0, Ess );\n\n\tconst Favg = add( specularColor, mul( sub( 1.0, specularColor ), 0.047619 ) ); // 1/21\n\tconst Fms = div( mul( FssEss, Favg ), sub( 1.0, mul( Ems, Favg ) ) );\n\n\tsingleScatter.add( FssEss );\n\tmultiScatter.add( mul( Fms, Ems ) );\n\n};\n\nconst RE_IndirectSpecular_Physical = new ShaderNode( ( inputs ) => {\n\n\tconst { radiance, iblIrradiance, reflectedLight } = inputs;\n\n\t// Both indirect specular and indirect diffuse light accumulate here\n\n\tconst singleScattering = temp( vec3() );\n\tconst multiScattering = temp( vec3() );\n\tconst cosineWeightedIrradiance = mul( iblIrradiance, 1 / Math.PI );\n\n\tcomputeMultiscattering( singleScattering, multiScattering );\n\n\tconst diffuse = mul( diffuseColor, sub( 1.0, add( singleScattering, multiScattering ) ) );\n\n\treflectedLight.indirectSpecular.add( mul( radiance, singleScattering ) );\n\treflectedLight.indirectSpecular.add( mul( multiScattering, cosineWeightedIrradiance ) );\n\n\treflectedLight.indirectDiffuse.add( mul( diffuse, cosineWeightedIrradiance ) );\n\n} );\n\nconst RE_IndirectDiffuse_Physical = new ShaderNode( ( inputs ) => {\n\n\tconst { irradiance, reflectedLight } = inputs;\n\n\treflectedLight.indirectDiffuse.add( mul( irradiance, BRDF_Lambert.call( { diffuseColor } ) ) );\n\n} );\n\nconst RE_Direct_Physical = new ShaderNode( ( inputs ) => {\n\n\tconst { lightDirection, lightColor, reflectedLight } = inputs;\n\n\tconst dotNL = clamp( dot( transformedNormalView, lightDirection ) );\n\tconst irradiance = mul( dotNL, lightColor );\n\n\treflectedLight.directDiffuse.add( mul( irradiance, BRDF_Lambert.call( { diffuseColor: diffuseColor.rgb } ) ) );\n\n\treflectedLight.directSpecular.add( mul( irradiance, BRDF_GGX.call( { lightDirection, f0: specularColor, f90: 1, roughness } ) ) );\n\n} );\n\nconst RE_AmbientOcclusion_Physical = new ShaderNode( ( { ambientOcclusion, reflectedLight } ) => {\n\n\tconst aoNV = add( dotNV, ambientOcclusion );\n\tconst aoExp = exp2( sub( mul( - 16.0, roughness ), 1.0 ) );\n\n\tconst aoNode = clamp( add( sub( pow( aoNV, aoExp ), 1.0 ), ambientOcclusion ) );\n\n\treflectedLight.indirectDiffuse.mul( ambientOcclusion );\n\n\treflectedLight.indirectSpecular.mul( aoNode );\n\n\n} );\n\nconst PhysicalLightingModel = {\n\tdirect: RE_Direct_Physical,\n\tindirectDiffuse: RE_IndirectDiffuse_Physical,\n\tindirectSpecular: RE_IndirectSpecular_Physical,\n\tambientOcclusion: RE_AmbientOcclusion_Physical\n};\n\nexport default PhysicalLightingModel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}