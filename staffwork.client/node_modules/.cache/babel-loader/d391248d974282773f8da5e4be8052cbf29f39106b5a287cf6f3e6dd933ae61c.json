{"ast":null,"code":"// core\n//import ArrayUniformNode from '../core/ArrayUniformNode.js';\nimport AttributeNode from '../core/AttributeNode.js';\nimport BypassNode from '../core/BypassNode.js';\nimport CodeNode from '../core/CodeNode.js';\nimport ContextNode from '../core/ContextNode.js';\nimport ExpressionNode from '../core/ExpressionNode.js';\nimport FunctionCallNode from '../core/FunctionCallNode.js';\nimport FunctionNode from '../core/FunctionNode.js';\nimport InstanceIndexNode from '../core/InstanceIndexNode.js';\nimport PropertyNode from '../core/PropertyNode.js';\nimport UniformNode from '../core/UniformNode.js';\nimport VarNode from '../core/VarNode.js';\nimport VaryingNode from '../core/VaryingNode.js';\n\n// accessors\nimport BitangentNode from '../accessors/BitangentNode.js';\nimport BufferNode from '../accessors/BufferNode.js';\nimport CameraNode from '../accessors/CameraNode.js';\nimport MaterialNode from '../accessors/MaterialNode.js';\nimport MaterialReferenceNode from '../accessors/MaterialReferenceNode.js';\nimport ModelViewProjectionNode from '../accessors/ModelViewProjectionNode.js';\nimport NormalNode from '../accessors/NormalNode.js';\nimport ModelNode from '../accessors/ModelNode.js';\nimport PointUVNode from '../accessors/PointUVNode.js';\nimport PositionNode from '../accessors/PositionNode.js';\nimport ReferenceNode from '../accessors/ReferenceNode.js';\nimport StorageBufferNode from '../accessors/StorageBufferNode.js';\nimport TangentNode from '../accessors/TangentNode.js';\nimport TextureNode from '../accessors/TextureNode.js';\nimport UserDataNode from '../accessors/UserDataNode.js';\nimport UVNode from '../accessors/UVNode.js';\n\n// display\nimport FrontFacingNode from '../display/FrontFacingNode.js';\n\n// gpgpu\nimport ComputeNode from '../gpgpu/ComputeNode.js';\n\n// math\nimport MathNode from '../math/MathNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport CondNode from '../math/CondNode.js';\n\n// utils\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\nimport ConvertNode from '../utils/ConvertNode.js';\n\n// shader node utils\nimport { ShaderNode, nodeObject, nodeObjects, nodeArray, nodeProxy, nodeImmutable, ConvertType, getConstNodeType, cacheMaps } from './ShaderNode.js';\n\n// shader node base\n\nexport { ShaderNode, nodeObject, nodeObjects, nodeArray, nodeProxy, nodeImmutable };\nexport const color = new ConvertType('color');\nexport const float = new ConvertType('float', cacheMaps.float);\nexport const int = new ConvertType('int', cacheMaps.int);\nexport const uint = new ConvertType('uint', cacheMaps.uint);\nexport const bool = new ConvertType('bool', cacheMaps.bool);\nexport const vec2 = new ConvertType('vec2');\nexport const ivec2 = new ConvertType('ivec2');\nexport const uvec2 = new ConvertType('uvec2');\nexport const bvec2 = new ConvertType('bvec2');\nexport const vec3 = new ConvertType('vec3');\nexport const ivec3 = new ConvertType('ivec3');\nexport const uvec3 = new ConvertType('uvec3');\nexport const bvec3 = new ConvertType('bvec3');\nexport const vec4 = new ConvertType('vec4');\nexport const ivec4 = new ConvertType('ivec4');\nexport const uvec4 = new ConvertType('uvec4');\nexport const bvec4 = new ConvertType('bvec4');\nexport const mat3 = new ConvertType('mat3');\nexport const imat3 = new ConvertType('imat3');\nexport const umat3 = new ConvertType('umat3');\nexport const bmat3 = new ConvertType('bmat3');\nexport const mat4 = new ConvertType('mat4');\nexport const imat4 = new ConvertType('imat4');\nexport const umat4 = new ConvertType('umat4');\nexport const bmat4 = new ConvertType('bmat4');\n\n// core\n\n// @TODO: ArrayUniformNode\n\nexport const func = (code, includes) => {\n  const node = nodeObject(new FunctionNode(code, includes));\n  const call = node.call.bind(node);\n  node.call = function () {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n    return nodeObject(call(params.length > 1 || params[0]?.isNode === true ? nodeArray(params) : nodeObjects(params[0])));\n  };\n  return node;\n};\nexport const uniform = nodeOrType => {\n  const nodeType = getConstNodeType(nodeOrType);\n\n  // @TODO: get ConstNode from .traverse() in the future\n  const value = nodeOrType.isNode === true ? nodeOrType.node?.value || nodeOrType.value : nodeOrType;\n  return nodeObject(new UniformNode(value, nodeType));\n};\nexport const fn = (code, includes) => func(code, includes).call;\nexport const attribute = (name, nodeType) => nodeObject(new AttributeNode(name, nodeType));\nexport const property = (name, nodeOrType) => nodeObject(new PropertyNode(name, getConstNodeType(nodeOrType)));\nexport const convert = (node, types) => nodeObject(new ConvertNode(nodeObject(node), types));\nexport const bypass = nodeProxy(BypassNode);\nexport const code = nodeProxy(CodeNode);\nexport const context = nodeProxy(ContextNode);\nexport const expression = nodeProxy(ExpressionNode);\nexport const call = nodeProxy(FunctionCallNode);\nexport const instanceIndex = nodeImmutable(InstanceIndexNode);\nexport const label = nodeProxy(VarNode);\nexport const temp = label;\nexport const varying = nodeProxy(VaryingNode);\n\n// math\n\nexport const EPSILON = float(1e-6);\nexport const INFINITY = float(1e6);\nexport const cond = nodeProxy(CondNode);\nexport const add = nodeProxy(OperatorNode, '+');\nexport const sub = nodeProxy(OperatorNode, '-');\nexport const mul = nodeProxy(OperatorNode, '*');\nexport const div = nodeProxy(OperatorNode, '/');\nexport const remainder = nodeProxy(OperatorNode, '%');\nexport const equal = nodeProxy(OperatorNode, '==');\nexport const assign = nodeProxy(OperatorNode, '=');\nexport const lessThan = nodeProxy(OperatorNode, '<');\nexport const greaterThan = nodeProxy(OperatorNode, '>');\nexport const lessThanEqual = nodeProxy(OperatorNode, '<=');\nexport const greaterThanEqual = nodeProxy(OperatorNode, '>=');\nexport const and = nodeProxy(OperatorNode, '&&');\nexport const or = nodeProxy(OperatorNode, '||');\nexport const xor = nodeProxy(OperatorNode, '^^');\nexport const bitAnd = nodeProxy(OperatorNode, '&');\nexport const bitOr = nodeProxy(OperatorNode, '|');\nexport const bitXor = nodeProxy(OperatorNode, '^');\nexport const shiftLeft = nodeProxy(OperatorNode, '<<');\nexport const shiftRight = nodeProxy(OperatorNode, '>>');\nexport const radians = nodeProxy(MathNode, MathNode.RADIANS);\nexport const degrees = nodeProxy(MathNode, MathNode.DEGREES);\nexport const exp = nodeProxy(MathNode, MathNode.EXP);\nexport const exp2 = nodeProxy(MathNode, MathNode.EXP2);\nexport const log = nodeProxy(MathNode, MathNode.LOG);\nexport const log2 = nodeProxy(MathNode, MathNode.LOG2);\nexport const sqrt = nodeProxy(MathNode, MathNode.SQRT);\nexport const inversesqrt = nodeProxy(MathNode, MathNode.INVERSE_SQRT);\nexport const floor = nodeProxy(MathNode, MathNode.FLOOR);\nexport const ceil = nodeProxy(MathNode, MathNode.CEIL);\nexport const normalize = nodeProxy(MathNode, MathNode.NORMALIZE);\nexport const fract = nodeProxy(MathNode, MathNode.FRACT);\nexport const sin = nodeProxy(MathNode, MathNode.SIN);\nexport const cos = nodeProxy(MathNode, MathNode.COS);\nexport const tan = nodeProxy(MathNode, MathNode.TAN);\nexport const asin = nodeProxy(MathNode, MathNode.ASIN);\nexport const acos = nodeProxy(MathNode, MathNode.ACOS);\nexport const atan = nodeProxy(MathNode, MathNode.ATAN);\nexport const abs = nodeProxy(MathNode, MathNode.ABS);\nexport const sign = nodeProxy(MathNode, MathNode.SIGN);\nexport const length = nodeProxy(MathNode, MathNode.LENGTH);\nexport const negate = nodeProxy(MathNode, MathNode.NEGATE);\nexport const invert = nodeProxy(MathNode, MathNode.INVERT);\nexport const dFdx = nodeProxy(MathNode, MathNode.DFDX);\nexport const dFdy = nodeProxy(MathNode, MathNode.DFDY);\nexport const round = nodeProxy(MathNode, MathNode.ROUND);\nexport const reciprocal = nodeProxy(MathNode, MathNode.RECIPROCAL);\nexport const atan2 = nodeProxy(MathNode, MathNode.ATAN2);\nexport const min = nodeProxy(MathNode, MathNode.MIN);\nexport const max = nodeProxy(MathNode, MathNode.MAX);\nexport const mod = nodeProxy(MathNode, MathNode.MOD);\nexport const step = nodeProxy(MathNode, MathNode.STEP);\nexport const reflect = nodeProxy(MathNode, MathNode.REFLECT);\nexport const distance = nodeProxy(MathNode, MathNode.DISTANCE);\nexport const dot = nodeProxy(MathNode, MathNode.DOT);\nexport const cross = nodeProxy(MathNode, MathNode.CROSS);\nexport const pow = nodeProxy(MathNode, MathNode.POW);\nexport const pow2 = nodeProxy(MathNode, MathNode.POW, 2);\nexport const pow3 = nodeProxy(MathNode, MathNode.POW, 3);\nexport const pow4 = nodeProxy(MathNode, MathNode.POW, 4);\nexport const transformDirection = nodeProxy(MathNode, MathNode.TRANSFORM_DIRECTION);\nexport const mix = nodeProxy(MathNode, MathNode.MIX);\nexport const clamp = function (value) {\n  let low = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let high = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return nodeObject(new MathNode(MathNode.CLAMP, nodeObject(value), nodeObject(low), nodeObject(high)));\n};\nexport const refract = nodeProxy(MathNode, MathNode.REFRACT);\nexport const smoothstep = nodeProxy(MathNode, MathNode.SMOOTHSTEP);\nexport const faceforward = nodeProxy(MathNode, MathNode.FACEFORWARD);\n\n// accessors\n\nexport const buffer = (value, nodeOrType, count) => nodeObject(new BufferNode(value, getConstNodeType(nodeOrType), count));\nexport const storage = (value, nodeOrType, count) => nodeObject(new StorageBufferNode(value, getConstNodeType(nodeOrType), count));\nexport const cameraProjectionMatrix = nodeImmutable(CameraNode, CameraNode.PROJECTION_MATRIX);\nexport const cameraViewMatrix = nodeImmutable(CameraNode, CameraNode.VIEW_MATRIX);\nexport const cameraNormalMatrix = nodeImmutable(CameraNode, CameraNode.NORMAL_MATRIX);\nexport const cameraWorldMatrix = nodeImmutable(CameraNode, CameraNode.WORLD_MATRIX);\nexport const cameraPosition = nodeImmutable(CameraNode, CameraNode.POSITION);\nexport const materialAlphaTest = nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);\nexport const materialColor = nodeImmutable(MaterialNode, MaterialNode.COLOR);\nexport const materialEmissive = nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);\nexport const materialOpacity = nodeImmutable(MaterialNode, MaterialNode.OPACITY);\n//export const materialSpecular = nodeImmutable( MaterialNode, MaterialNode.SPECULAR );\nexport const materialRoughness = nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);\nexport const materialMetalness = nodeImmutable(MaterialNode, MaterialNode.METALNESS);\nexport const materialRotation = nodeImmutable(MaterialNode, MaterialNode.ROTATION);\nexport const diffuseColor = nodeImmutable(PropertyNode, 'DiffuseColor', 'vec4');\nexport const roughness = nodeImmutable(PropertyNode, 'Roughness', 'float');\nexport const metalness = nodeImmutable(PropertyNode, 'Metalness', 'float');\nexport const alphaTest = nodeImmutable(PropertyNode, 'AlphaTest', 'float');\nexport const specularColor = nodeImmutable(PropertyNode, 'SpecularColor', 'color');\nexport const reference = (name, nodeOrType, object) => nodeObject(new ReferenceNode(name, getConstNodeType(nodeOrType), object));\nexport const materialReference = (name, nodeOrType, material) => nodeObject(new MaterialReferenceNode(name, getConstNodeType(nodeOrType), material));\nexport const userData = (name, inputType, userData) => nodeObject(new UserDataNode(name, inputType, userData));\nexport const modelViewProjection = nodeProxy(ModelViewProjectionNode);\nexport const normalGeometry = nodeImmutable(NormalNode, NormalNode.GEOMETRY);\nexport const normalLocal = nodeImmutable(NormalNode, NormalNode.LOCAL);\nexport const normalView = nodeImmutable(NormalNode, NormalNode.VIEW);\nexport const normalWorld = nodeImmutable(NormalNode, NormalNode.WORLD);\nexport const transformedNormalView = nodeImmutable(VarNode, normalView, 'TransformedNormalView');\nexport const transformedNormalWorld = normalize(transformDirection(transformedNormalView, cameraViewMatrix));\nexport const tangentGeometry = nodeImmutable(TangentNode, TangentNode.GEOMETRY);\nexport const tangentLocal = nodeImmutable(TangentNode, TangentNode.LOCAL);\nexport const tangentView = nodeImmutable(TangentNode, TangentNode.VIEW);\nexport const tangentWorld = nodeImmutable(TangentNode, TangentNode.WORLD);\nexport const transformedTangentView = nodeImmutable(VarNode, tangentView, 'TransformedTangentView');\nexport const transformedTangentWorld = normalize(transformDirection(transformedTangentView, cameraViewMatrix));\nexport const bitangentGeometry = nodeImmutable(BitangentNode, BitangentNode.GEOMETRY);\nexport const bitangentLocal = nodeImmutable(BitangentNode, BitangentNode.LOCAL);\nexport const bitangentView = nodeImmutable(BitangentNode, BitangentNode.VIEW);\nexport const bitangentWorld = nodeImmutable(BitangentNode, BitangentNode.WORLD);\nexport const transformedBitangentView = normalize(mul(cross(transformedNormalView, transformedTangentView), tangentGeometry.w));\nexport const transformedBitangentWorld = normalize(transformDirection(transformedBitangentView, cameraViewMatrix));\nexport const modelViewMatrix = nodeImmutable(ModelNode, ModelNode.VIEW_MATRIX);\nexport const modelNormalMatrix = nodeImmutable(ModelNode, ModelNode.NORMAL_MATRIX);\nexport const modelWorldMatrix = nodeImmutable(ModelNode, ModelNode.WORLD_MATRIX);\nexport const modelPosition = nodeImmutable(ModelNode, ModelNode.POSITION);\nexport const modelViewPosition = nodeImmutable(ModelNode, ModelNode.VIEW_POSITION);\nexport const positionGeometry = nodeImmutable(PositionNode, PositionNode.GEOMETRY);\nexport const positionLocal = nodeImmutable(PositionNode, PositionNode.LOCAL);\nexport const positionWorld = nodeImmutable(PositionNode, PositionNode.WORLD);\nexport const positionWorldDirection = nodeImmutable(PositionNode, PositionNode.WORLD_DIRECTION);\nexport const positionView = nodeImmutable(PositionNode, PositionNode.VIEW);\nexport const positionViewDirection = nodeImmutable(PositionNode, PositionNode.VIEW_DIRECTION);\nexport const texture = nodeProxy(TextureNode);\nexport const sampler = texture => nodeObject(new ConvertNode(texture.isNode === true ? texture : new TextureNode(texture), 'sampler'));\nexport const uv = function () {\n  for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    params[_key2] = arguments[_key2];\n  }\n  return nodeObject(new UVNode(...params));\n};\nexport const pointUV = nodeImmutable(PointUVNode);\n\n// gpgpu\n\nexport const compute = (node, count, workgroupSize) => nodeObject(new ComputeNode(nodeObject(node), count, workgroupSize));\n\n// display\n\nexport const frontFacing = nodeImmutable(FrontFacingNode);\nexport const faceDirection = sub(mul(float(frontFacing), 2), 1);\n\n// lighting\n\n// utils\n\nexport const element = nodeProxy(ArrayElementNode);\n\n// miscellaneous\n\nexport const lumaCoeffs = vec3(0.2125, 0.7154, 0.0721);\nexport const luminance = function (color) {\n  let luma = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : lumaCoeffs;\n  return dot(color, luma);\n};\nexport const difference = (a, b) => abs(sub(a, b));\nexport const dotNV = clamp(dot(transformedNormalView, positionViewDirection));\nexport const TBNViewMatrix = mat3(tangentView, bitangentView, normalView);","map":{"version":3,"names":["AttributeNode","BypassNode","CodeNode","ContextNode","ExpressionNode","FunctionCallNode","FunctionNode","InstanceIndexNode","PropertyNode","UniformNode","VarNode","VaryingNode","BitangentNode","BufferNode","CameraNode","MaterialNode","MaterialReferenceNode","ModelViewProjectionNode","NormalNode","ModelNode","PointUVNode","PositionNode","ReferenceNode","StorageBufferNode","TangentNode","TextureNode","UserDataNode","UVNode","FrontFacingNode","ComputeNode","MathNode","OperatorNode","CondNode","ArrayElementNode","ConvertNode","ShaderNode","nodeObject","nodeObjects","nodeArray","nodeProxy","nodeImmutable","ConvertType","getConstNodeType","cacheMaps","color","float","int","uint","bool","vec2","ivec2","uvec2","bvec2","vec3","ivec3","uvec3","bvec3","vec4","ivec4","uvec4","bvec4","mat3","imat3","umat3","bmat3","mat4","imat4","umat4","bmat4","func","code","includes","node","call","bind","params","length","isNode","uniform","nodeOrType","nodeType","value","fn","attribute","name","property","convert","types","bypass","context","expression","instanceIndex","label","temp","varying","EPSILON","INFINITY","cond","add","sub","mul","div","remainder","equal","assign","lessThan","greaterThan","lessThanEqual","greaterThanEqual","and","or","xor","bitAnd","bitOr","bitXor","shiftLeft","shiftRight","radians","RADIANS","degrees","DEGREES","exp","EXP","exp2","EXP2","log","LOG","log2","LOG2","sqrt","SQRT","inversesqrt","INVERSE_SQRT","floor","FLOOR","ceil","CEIL","normalize","NORMALIZE","fract","FRACT","sin","SIN","cos","COS","tan","TAN","asin","ASIN","acos","ACOS","atan","ATAN","abs","ABS","sign","SIGN","LENGTH","negate","NEGATE","invert","INVERT","dFdx","DFDX","dFdy","DFDY","round","ROUND","reciprocal","RECIPROCAL","atan2","ATAN2","min","MIN","max","MAX","mod","MOD","step","STEP","reflect","REFLECT","distance","DISTANCE","dot","DOT","cross","CROSS","pow","POW","pow2","pow3","pow4","transformDirection","TRANSFORM_DIRECTION","mix","MIX","clamp","low","high","CLAMP","refract","REFRACT","smoothstep","SMOOTHSTEP","faceforward","FACEFORWARD","buffer","count","storage","cameraProjectionMatrix","PROJECTION_MATRIX","cameraViewMatrix","VIEW_MATRIX","cameraNormalMatrix","NORMAL_MATRIX","cameraWorldMatrix","WORLD_MATRIX","cameraPosition","POSITION","materialAlphaTest","ALPHA_TEST","materialColor","COLOR","materialEmissive","EMISSIVE","materialOpacity","OPACITY","materialRoughness","ROUGHNESS","materialMetalness","METALNESS","materialRotation","ROTATION","diffuseColor","roughness","metalness","alphaTest","specularColor","reference","object","materialReference","material","userData","inputType","modelViewProjection","normalGeometry","GEOMETRY","normalLocal","LOCAL","normalView","VIEW","normalWorld","WORLD","transformedNormalView","transformedNormalWorld","tangentGeometry","tangentLocal","tangentView","tangentWorld","transformedTangentView","transformedTangentWorld","bitangentGeometry","bitangentLocal","bitangentView","bitangentWorld","transformedBitangentView","w","transformedBitangentWorld","modelViewMatrix","modelNormalMatrix","modelWorldMatrix","modelPosition","modelViewPosition","VIEW_POSITION","positionGeometry","positionLocal","positionWorld","positionWorldDirection","WORLD_DIRECTION","positionView","positionViewDirection","VIEW_DIRECTION","texture","sampler","uv","pointUV","compute","workgroupSize","frontFacing","faceDirection","element","lumaCoeffs","luminance","luma","difference","a","b","dotNV","TBNViewMatrix"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/shadernode/ShaderNodeBaseElements.js"],"sourcesContent":["// core\n//import ArrayUniformNode from '../core/ArrayUniformNode.js';\nimport AttributeNode from '../core/AttributeNode.js';\nimport BypassNode from '../core/BypassNode.js';\nimport CodeNode from '../core/CodeNode.js';\nimport ContextNode from '../core/ContextNode.js';\nimport ExpressionNode from '../core/ExpressionNode.js';\nimport FunctionCallNode from '../core/FunctionCallNode.js';\nimport FunctionNode from '../core/FunctionNode.js';\nimport InstanceIndexNode from '../core/InstanceIndexNode.js';\nimport PropertyNode from '../core/PropertyNode.js';\nimport UniformNode from '../core/UniformNode.js';\nimport VarNode from '../core/VarNode.js';\nimport VaryingNode from '../core/VaryingNode.js';\n\n// accessors\nimport BitangentNode from '../accessors/BitangentNode.js';\nimport BufferNode from '../accessors/BufferNode.js';\nimport CameraNode from '../accessors/CameraNode.js';\nimport MaterialNode from '../accessors/MaterialNode.js';\nimport MaterialReferenceNode from '../accessors/MaterialReferenceNode.js';\nimport ModelViewProjectionNode from '../accessors/ModelViewProjectionNode.js';\nimport NormalNode from '../accessors/NormalNode.js';\nimport ModelNode from '../accessors/ModelNode.js';\nimport PointUVNode from '../accessors/PointUVNode.js';\nimport PositionNode from '../accessors/PositionNode.js';\nimport ReferenceNode from '../accessors/ReferenceNode.js';\nimport StorageBufferNode from '../accessors/StorageBufferNode.js';\nimport TangentNode from '../accessors/TangentNode.js';\nimport TextureNode from '../accessors/TextureNode.js';\nimport UserDataNode from '../accessors/UserDataNode.js';\nimport UVNode from '../accessors/UVNode.js';\n\n// display\nimport FrontFacingNode from '../display/FrontFacingNode.js';\n\n// gpgpu\nimport ComputeNode from '../gpgpu/ComputeNode.js';\n\n// math\nimport MathNode from '../math/MathNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport CondNode from '../math/CondNode.js';\n\n// utils\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\nimport ConvertNode from '../utils/ConvertNode.js';\n\n// shader node utils\nimport { ShaderNode, nodeObject, nodeObjects, nodeArray, nodeProxy, nodeImmutable, ConvertType, getConstNodeType, cacheMaps } from './ShaderNode.js';\n\n// shader node base\n\nexport { ShaderNode, nodeObject, nodeObjects, nodeArray, nodeProxy, nodeImmutable };\n\nexport const color = new ConvertType( 'color' );\n\nexport const float = new ConvertType( 'float', cacheMaps.float );\nexport const int = new ConvertType( 'int', cacheMaps.int );\nexport const uint = new ConvertType( 'uint', cacheMaps.uint );\nexport const bool = new ConvertType( 'bool', cacheMaps.bool );\n\nexport const vec2 = new ConvertType( 'vec2' );\nexport const ivec2 = new ConvertType( 'ivec2' );\nexport const uvec2 = new ConvertType( 'uvec2' );\nexport const bvec2 = new ConvertType( 'bvec2' );\n\nexport const vec3 = new ConvertType( 'vec3' );\nexport const ivec3 = new ConvertType( 'ivec3' );\nexport const uvec3 = new ConvertType( 'uvec3' );\nexport const bvec3 = new ConvertType( 'bvec3' );\n\nexport const vec4 = new ConvertType( 'vec4' );\nexport const ivec4 = new ConvertType( 'ivec4' );\nexport const uvec4 = new ConvertType( 'uvec4' );\nexport const bvec4 = new ConvertType( 'bvec4' );\n\nexport const mat3 = new ConvertType( 'mat3' );\nexport const imat3 = new ConvertType( 'imat3' );\nexport const umat3 = new ConvertType( 'umat3' );\nexport const bmat3 = new ConvertType( 'bmat3' );\n\nexport const mat4 = new ConvertType( 'mat4' );\nexport const imat4 = new ConvertType( 'imat4' );\nexport const umat4 = new ConvertType( 'umat4' );\nexport const bmat4 = new ConvertType( 'bmat4' );\n\n// core\n\n// @TODO: ArrayUniformNode\n\nexport const func = ( code, includes ) => {\n\n\tconst node = nodeObject( new FunctionNode( code, includes ) );\n\n\tconst call = node.call.bind( node );\n\tnode.call = ( ...params ) => nodeObject( call( params.length > 1 || params[ 0 ]?.isNode === true ? nodeArray( params ) : nodeObjects( params[ 0 ] ) ) );\n\n\treturn node;\n\n};\n\nexport const uniform = ( nodeOrType ) => {\n\n\tconst nodeType = getConstNodeType( nodeOrType );\n\n\t// @TODO: get ConstNode from .traverse() in the future\n\tconst value = nodeOrType.isNode === true ? nodeOrType.node?.value || nodeOrType.value : nodeOrType;\n\n\treturn nodeObject( new UniformNode( value, nodeType ) );\n\n};\n\nexport const fn = ( code, includes ) => func( code, includes ).call;\n\nexport const attribute = ( name, nodeType ) => nodeObject( new AttributeNode( name, nodeType ) );\nexport const property = ( name, nodeOrType ) => nodeObject( new PropertyNode( name, getConstNodeType( nodeOrType ) ) );\n\nexport const convert = ( node, types ) => nodeObject( new ConvertNode( nodeObject( node ), types ) );\n\nexport const bypass = nodeProxy( BypassNode );\nexport const code = nodeProxy( CodeNode );\nexport const context = nodeProxy( ContextNode );\nexport const expression = nodeProxy( ExpressionNode );\nexport const call = nodeProxy( FunctionCallNode );\nexport const instanceIndex = nodeImmutable( InstanceIndexNode );\nexport const label = nodeProxy( VarNode );\nexport const temp = label;\nexport const varying = nodeProxy( VaryingNode );\n\n// math\n\nexport const EPSILON = float( 1e-6 );\nexport const INFINITY = float( 1e6 );\n\nexport const cond = nodeProxy( CondNode );\n\nexport const add = nodeProxy( OperatorNode, '+' );\nexport const sub = nodeProxy( OperatorNode, '-' );\nexport const mul = nodeProxy( OperatorNode, '*' );\nexport const div = nodeProxy( OperatorNode, '/' );\nexport const remainder = nodeProxy( OperatorNode, '%' );\nexport const equal = nodeProxy( OperatorNode, '==' );\nexport const assign = nodeProxy( OperatorNode, '=' );\nexport const lessThan = nodeProxy( OperatorNode, '<' );\nexport const greaterThan = nodeProxy( OperatorNode, '>' );\nexport const lessThanEqual = nodeProxy( OperatorNode, '<=' );\nexport const greaterThanEqual = nodeProxy( OperatorNode, '>=' );\nexport const and = nodeProxy( OperatorNode, '&&' );\nexport const or = nodeProxy( OperatorNode, '||' );\nexport const xor = nodeProxy( OperatorNode, '^^' );\nexport const bitAnd = nodeProxy( OperatorNode, '&' );\nexport const bitOr = nodeProxy( OperatorNode, '|' );\nexport const bitXor = nodeProxy( OperatorNode, '^' );\nexport const shiftLeft = nodeProxy( OperatorNode, '<<' );\nexport const shiftRight = nodeProxy( OperatorNode, '>>' );\n\nexport const radians = nodeProxy( MathNode, MathNode.RADIANS );\nexport const degrees = nodeProxy( MathNode, MathNode.DEGREES );\nexport const exp = nodeProxy( MathNode, MathNode.EXP );\nexport const exp2 = nodeProxy( MathNode, MathNode.EXP2 );\nexport const log = nodeProxy( MathNode, MathNode.LOG );\nexport const log2 = nodeProxy( MathNode, MathNode.LOG2 );\nexport const sqrt = nodeProxy( MathNode, MathNode.SQRT );\nexport const inversesqrt = nodeProxy( MathNode, MathNode.INVERSE_SQRT );\nexport const floor = nodeProxy( MathNode, MathNode.FLOOR );\nexport const ceil = nodeProxy( MathNode, MathNode.CEIL );\nexport const normalize = nodeProxy( MathNode, MathNode.NORMALIZE );\nexport const fract = nodeProxy( MathNode, MathNode.FRACT );\nexport const sin = nodeProxy( MathNode, MathNode.SIN );\nexport const cos = nodeProxy( MathNode, MathNode.COS );\nexport const tan = nodeProxy( MathNode, MathNode.TAN );\nexport const asin = nodeProxy( MathNode, MathNode.ASIN );\nexport const acos = nodeProxy( MathNode, MathNode.ACOS );\nexport const atan = nodeProxy( MathNode, MathNode.ATAN );\nexport const abs = nodeProxy( MathNode, MathNode.ABS );\nexport const sign = nodeProxy( MathNode, MathNode.SIGN );\nexport const length = nodeProxy( MathNode, MathNode.LENGTH );\nexport const negate = nodeProxy( MathNode, MathNode.NEGATE );\nexport const invert = nodeProxy( MathNode, MathNode.INVERT );\nexport const dFdx = nodeProxy( MathNode, MathNode.DFDX );\nexport const dFdy = nodeProxy( MathNode, MathNode.DFDY );\nexport const round = nodeProxy( MathNode, MathNode.ROUND );\nexport const reciprocal = nodeProxy( MathNode, MathNode.RECIPROCAL );\n\nexport const atan2 = nodeProxy( MathNode, MathNode.ATAN2 );\nexport const min = nodeProxy( MathNode, MathNode.MIN );\nexport const max = nodeProxy( MathNode, MathNode.MAX );\nexport const mod = nodeProxy( MathNode, MathNode.MOD );\nexport const step = nodeProxy( MathNode, MathNode.STEP );\nexport const reflect = nodeProxy( MathNode, MathNode.REFLECT );\nexport const distance = nodeProxy( MathNode, MathNode.DISTANCE );\nexport const dot = nodeProxy( MathNode, MathNode.DOT );\nexport const cross = nodeProxy( MathNode, MathNode.CROSS );\nexport const pow = nodeProxy( MathNode, MathNode.POW );\nexport const pow2 = nodeProxy( MathNode, MathNode.POW, 2 );\nexport const pow3 = nodeProxy( MathNode, MathNode.POW, 3 );\nexport const pow4 = nodeProxy( MathNode, MathNode.POW, 4 );\nexport const transformDirection = nodeProxy( MathNode, MathNode.TRANSFORM_DIRECTION );\n\nexport const mix = nodeProxy( MathNode, MathNode.MIX );\nexport const clamp = ( value, low = 0, high = 1 ) => nodeObject( new MathNode( MathNode.CLAMP, nodeObject( value ), nodeObject( low ), nodeObject( high ) ) );\nexport const refract = nodeProxy( MathNode, MathNode.REFRACT );\nexport const smoothstep = nodeProxy( MathNode, MathNode.SMOOTHSTEP );\nexport const faceforward = nodeProxy( MathNode, MathNode.FACEFORWARD );\n\n// accessors\n\nexport const buffer = ( value, nodeOrType, count ) => nodeObject( new BufferNode( value, getConstNodeType( nodeOrType ), count ) );\nexport const storage = ( value, nodeOrType, count ) => nodeObject( new StorageBufferNode( value, getConstNodeType( nodeOrType ), count ) );\n\nexport const cameraProjectionMatrix = nodeImmutable( CameraNode, CameraNode.PROJECTION_MATRIX );\nexport const cameraViewMatrix = nodeImmutable( CameraNode, CameraNode.VIEW_MATRIX );\nexport const cameraNormalMatrix = nodeImmutable( CameraNode, CameraNode.NORMAL_MATRIX );\nexport const cameraWorldMatrix = nodeImmutable( CameraNode, CameraNode.WORLD_MATRIX );\nexport const cameraPosition = nodeImmutable( CameraNode, CameraNode.POSITION );\n\nexport const materialAlphaTest = nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\nexport const materialColor = nodeImmutable( MaterialNode, MaterialNode.COLOR );\nexport const materialEmissive = nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\nexport const materialOpacity = nodeImmutable( MaterialNode, MaterialNode.OPACITY );\n//export const materialSpecular = nodeImmutable( MaterialNode, MaterialNode.SPECULAR );\nexport const materialRoughness = nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\nexport const materialMetalness = nodeImmutable( MaterialNode, MaterialNode.METALNESS );\nexport const materialRotation = nodeImmutable( MaterialNode, MaterialNode.ROTATION );\n\nexport const diffuseColor = nodeImmutable( PropertyNode, 'DiffuseColor', 'vec4' );\nexport const roughness = nodeImmutable( PropertyNode, 'Roughness', 'float' );\nexport const metalness = nodeImmutable( PropertyNode, 'Metalness', 'float' );\nexport const alphaTest = nodeImmutable( PropertyNode, 'AlphaTest', 'float' );\nexport const specularColor = nodeImmutable( PropertyNode, 'SpecularColor', 'color' );\n\nexport const reference = ( name, nodeOrType, object ) => nodeObject( new ReferenceNode( name, getConstNodeType( nodeOrType ), object ) );\nexport const materialReference = ( name, nodeOrType, material ) => nodeObject( new MaterialReferenceNode( name, getConstNodeType( nodeOrType ), material ) );\nexport const userData = ( name, inputType, userData ) => nodeObject( new UserDataNode( name, inputType, userData ) );\n\nexport const modelViewProjection = nodeProxy( ModelViewProjectionNode );\n\nexport const normalGeometry = nodeImmutable( NormalNode, NormalNode.GEOMETRY );\nexport const normalLocal = nodeImmutable( NormalNode, NormalNode.LOCAL );\nexport const normalView = nodeImmutable( NormalNode, NormalNode.VIEW );\nexport const normalWorld = nodeImmutable( NormalNode, NormalNode.WORLD );\nexport const transformedNormalView = nodeImmutable( VarNode, normalView, 'TransformedNormalView' );\nexport const transformedNormalWorld = normalize( transformDirection( transformedNormalView, cameraViewMatrix ) );\n\nexport const tangentGeometry = nodeImmutable( TangentNode, TangentNode.GEOMETRY );\nexport const tangentLocal = nodeImmutable( TangentNode, TangentNode.LOCAL );\nexport const tangentView = nodeImmutable( TangentNode, TangentNode.VIEW );\nexport const tangentWorld = nodeImmutable( TangentNode, TangentNode.WORLD );\nexport const transformedTangentView = nodeImmutable( VarNode, tangentView, 'TransformedTangentView' );\nexport const transformedTangentWorld = normalize( transformDirection( transformedTangentView, cameraViewMatrix ) );\n\nexport const bitangentGeometry = nodeImmutable( BitangentNode, BitangentNode.GEOMETRY );\nexport const bitangentLocal = nodeImmutable( BitangentNode, BitangentNode.LOCAL );\nexport const bitangentView = nodeImmutable( BitangentNode, BitangentNode.VIEW );\nexport const bitangentWorld = nodeImmutable( BitangentNode, BitangentNode.WORLD );\nexport const transformedBitangentView = normalize( mul( cross( transformedNormalView, transformedTangentView ), tangentGeometry.w ) );\nexport const transformedBitangentWorld = normalize( transformDirection( transformedBitangentView, cameraViewMatrix ) );\n\nexport const modelViewMatrix = nodeImmutable( ModelNode, ModelNode.VIEW_MATRIX );\nexport const modelNormalMatrix = nodeImmutable( ModelNode, ModelNode.NORMAL_MATRIX );\nexport const modelWorldMatrix = nodeImmutable( ModelNode, ModelNode.WORLD_MATRIX );\nexport const modelPosition = nodeImmutable( ModelNode, ModelNode.POSITION );\nexport const modelViewPosition = nodeImmutable( ModelNode, ModelNode.VIEW_POSITION );\n\nexport const positionGeometry = nodeImmutable( PositionNode, PositionNode.GEOMETRY );\nexport const positionLocal = nodeImmutable( PositionNode, PositionNode.LOCAL );\nexport const positionWorld = nodeImmutable( PositionNode, PositionNode.WORLD );\nexport const positionWorldDirection = nodeImmutable( PositionNode, PositionNode.WORLD_DIRECTION );\nexport const positionView = nodeImmutable( PositionNode, PositionNode.VIEW );\nexport const positionViewDirection = nodeImmutable( PositionNode, PositionNode.VIEW_DIRECTION );\n\nexport const texture = nodeProxy( TextureNode );\nexport const sampler = ( texture ) => nodeObject( new ConvertNode( texture.isNode === true ? texture : new TextureNode( texture ), 'sampler' ) );\nexport const uv = ( ...params ) => nodeObject( new UVNode( ...params ) );\nexport const pointUV = nodeImmutable( PointUVNode );\n\n// gpgpu\n\nexport const compute = ( node, count, workgroupSize ) => nodeObject( new ComputeNode( nodeObject( node ), count, workgroupSize ) );\n\n// display\n\nexport const frontFacing = nodeImmutable( FrontFacingNode );\nexport const faceDirection = sub( mul( float( frontFacing ), 2 ), 1 );\n\n// lighting\n\n\n// utils\n\nexport const element = nodeProxy( ArrayElementNode );\n\n// miscellaneous\n\nexport const lumaCoeffs = vec3( 0.2125, 0.7154, 0.0721 );\n\nexport const luminance = ( color, luma = lumaCoeffs ) => dot( color, luma );\nexport const difference = ( a, b ) => abs( sub( a, b ) );\nexport const dotNV = clamp( dot( transformedNormalView, positionViewDirection ) );\nexport const TBNViewMatrix = mat3( tangentView, bitangentView, normalView );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}