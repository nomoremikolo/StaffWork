{"ast":null,"code":"import { clamp } from '../math/MathUtils.js';\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/_generateTables();\nfunction _generateTables() {\n  // float32 to float16 helpers\n\n  const buffer = new ArrayBuffer(4);\n  const floatView = new Float32Array(buffer);\n  const uint32View = new Uint32Array(buffer);\n  const baseTable = new Uint32Array(512);\n  const shiftTable = new Uint32Array(512);\n  for (let i = 0; i < 256; ++i) {\n    const e = i - 127;\n\n    // very small number (0, -0)\n\n    if (e < -27) {\n      baseTable[i] = 0x0000;\n      baseTable[i | 0x100] = 0x8000;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n\n      // small number (denorm)\n    } else if (e < -14) {\n      baseTable[i] = 0x0400 >> -e - 14;\n      baseTable[i | 0x100] = 0x0400 >> -e - 14 | 0x8000;\n      shiftTable[i] = -e - 1;\n      shiftTable[i | 0x100] = -e - 1;\n\n      // normal number\n    } else if (e <= 15) {\n      baseTable[i] = e + 15 << 10;\n      baseTable[i | 0x100] = e + 15 << 10 | 0x8000;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n\n      // large number (Infinity, -Infinity)\n    } else if (e < 128) {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 24;\n      shiftTable[i | 0x100] = 24;\n\n      // stay (NaN, Infinity, -Infinity)\n    } else {\n      baseTable[i] = 0x7c00;\n      baseTable[i | 0x100] = 0xfc00;\n      shiftTable[i] = 13;\n      shiftTable[i | 0x100] = 13;\n    }\n  }\n\n  // float16 to float32 helpers\n\n  const mantissaTable = new Uint32Array(2048);\n  const exponentTable = new Uint32Array(64);\n  const offsetTable = new Uint32Array(64);\n  for (let i = 1; i < 1024; ++i) {\n    let m = i << 13; // zero pad mantissa bits\n    let e = 0; // zero exponent\n\n    // normalized\n    while ((m & 0x00800000) === 0) {\n      m <<= 1;\n      e -= 0x00800000; // decrement exponent\n    }\n\n    m &= ~0x00800000; // clear leading 1 bit\n    e += 0x38800000; // adjust bias\n\n    mantissaTable[i] = m | e;\n  }\n  for (let i = 1024; i < 2048; ++i) {\n    mantissaTable[i] = 0x38000000 + (i - 1024 << 13);\n  }\n  for (let i = 1; i < 31; ++i) {\n    exponentTable[i] = i << 23;\n  }\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  for (let i = 33; i < 63; ++i) {\n    exponentTable[i] = 0x80000000 + (i - 32 << 23);\n  }\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 64; ++i) {\n    if (i !== 32) {\n      offsetTable[i] = 1024;\n    }\n  }\n  return {\n    floatView: floatView,\n    uint32View: uint32View,\n    baseTable: baseTable,\n    shiftTable: shiftTable,\n    mantissaTable: mantissaTable,\n    exponentTable: exponentTable,\n    offsetTable: offsetTable\n  };\n}\n\n// float32 to float16\n\nfunction toHalfFloat(val) {\n  if (Math.abs(val) > 65504) console.warn('THREE.DataUtils.toHalfFloat(): Value out of range.');\n  val = clamp(val, -65504, 65504);\n  _tables.floatView[0] = val;\n  const f = _tables.uint32View[0];\n  const e = f >> 23 & 0x1ff;\n  return _tables.baseTable[e] + ((f & 0x007fffff) >> _tables.shiftTable[e]);\n}\n\n// float16 to float32\n\nfunction fromHalfFloat(val) {\n  const m = val >> 10;\n  _tables.uint32View[0] = _tables.mantissaTable[_tables.offsetTable[m] + (val & 0x3ff)] + _tables.exponentTable[m];\n  return _tables.floatView[0];\n}\nexport { toHalfFloat, fromHalfFloat };","map":{"version":3,"names":["clamp","_tables","_generateTables","buffer","ArrayBuffer","floatView","Float32Array","uint32View","Uint32Array","baseTable","shiftTable","i","e","mantissaTable","exponentTable","offsetTable","m","toHalfFloat","val","Math","abs","console","warn","f","fromHalfFloat"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/extras/DataUtils.js"],"sourcesContent":["import { clamp } from '../math/MathUtils.js';\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/ _generateTables();\n\nfunction _generateTables() {\n\n\t// float32 to float16 helpers\n\n\tconst buffer = new ArrayBuffer( 4 );\n\tconst floatView = new Float32Array( buffer );\n\tconst uint32View = new Uint32Array( buffer );\n\n\tconst baseTable = new Uint32Array( 512 );\n\tconst shiftTable = new Uint32Array( 512 );\n\n\tfor ( let i = 0; i < 256; ++ i ) {\n\n\t\tconst e = i - 127;\n\n\t\t// very small number (0, -0)\n\n\t\tif ( e < - 27 ) {\n\n\t\t\tbaseTable[ i ] = 0x0000;\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// small number (denorm)\n\n\t\t} else if ( e < - 14 ) {\n\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\n\t\t\tshiftTable[ i ] = - e - 1;\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\n\n\t\t\t// normal number\n\n\t\t} else if ( e <= 15 ) {\n\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t\t// large number (Infinity, -Infinity)\n\n\t\t} else if ( e < 128 ) {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// stay (NaN, Infinity, -Infinity)\n\n\t\t} else {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t}\n\n\t}\n\n\t// float16 to float32 helpers\n\n\tconst mantissaTable = new Uint32Array( 2048 );\n\tconst exponentTable = new Uint32Array( 64 );\n\tconst offsetTable = new Uint32Array( 64 );\n\n\tfor ( let i = 1; i < 1024; ++ i ) {\n\n\t\tlet m = i << 13; // zero pad mantissa bits\n\t\tlet e = 0; // zero exponent\n\n\t\t// normalized\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\n\n\t\t\tm <<= 1;\n\t\t\te -= 0x00800000; // decrement exponent\n\n\t\t}\n\n\t\tm &= ~ 0x00800000; // clear leading 1 bit\n\t\te += 0x38800000; // adjust bias\n\n\t\tmantissaTable[ i ] = m | e;\n\n\t}\n\n\tfor ( let i = 1024; i < 2048; ++ i ) {\n\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\n\n\t}\n\n\tfor ( let i = 1; i < 31; ++ i ) {\n\n\t\texponentTable[ i ] = i << 23;\n\n\t}\n\n\texponentTable[ 31 ] = 0x47800000;\n\texponentTable[ 32 ] = 0x80000000;\n\n\tfor ( let i = 33; i < 63; ++ i ) {\n\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\n\n\t}\n\n\texponentTable[ 63 ] = 0xc7800000;\n\n\tfor ( let i = 1; i < 64; ++ i ) {\n\n\t\tif ( i !== 32 ) {\n\n\t\t\toffsetTable[ i ] = 1024;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tfloatView: floatView,\n\t\tuint32View: uint32View,\n\t\tbaseTable: baseTable,\n\t\tshiftTable: shiftTable,\n\t\tmantissaTable: mantissaTable,\n\t\texponentTable: exponentTable,\n\t\toffsetTable: offsetTable\n\t};\n\n}\n\n// float32 to float16\n\nfunction toHalfFloat( val ) {\n\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\n\n\tval = clamp( val, - 65504, 65504 );\n\n\t_tables.floatView[ 0 ] = val;\n\tconst f = _tables.uint32View[ 0 ];\n\tconst e = ( f >> 23 ) & 0x1ff;\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\n\n}\n\n// float16 to float32\n\nfunction fromHalfFloat( val ) {\n\n\tconst m = val >> 10;\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\n\treturn _tables.floatView[ 0 ];\n\n}\n\nexport {\n\ttoHalfFloat,\n\tfromHalfFloat\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}