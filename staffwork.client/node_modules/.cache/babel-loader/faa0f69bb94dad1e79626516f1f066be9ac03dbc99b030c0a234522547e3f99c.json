{"ast":null,"code":"import { Vector3 } from './Vector3.js';\nconst _v0 = /*@__PURE__*/new Vector3();\nconst _v1 = /*@__PURE__*/new Vector3();\nconst _v2 = /*@__PURE__*/new Vector3();\nconst _v3 = /*@__PURE__*/new Vector3();\nconst _vab = /*@__PURE__*/new Vector3();\nconst _vac = /*@__PURE__*/new Vector3();\nconst _vbc = /*@__PURE__*/new Vector3();\nconst _vap = /*@__PURE__*/new Vector3();\nconst _vbp = /*@__PURE__*/new Vector3();\nconst _vcp = /*@__PURE__*/new Vector3();\nclass Triangle {\n  constructor() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector3();\n    this.a = a;\n    this.b = b;\n    this.c = c;\n  }\n  static getNormal(a, b, c, target) {\n    target.subVectors(c, b);\n    _v0.subVectors(a, b);\n    target.cross(_v0);\n    const targetLengthSq = target.lengthSq();\n    if (targetLengthSq > 0) {\n      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n    }\n    return target.set(0, 0, 0);\n  }\n\n  // static/instance method to calculate barycentric coordinates\n  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n  static getBarycoord(point, a, b, c, target) {\n    _v0.subVectors(c, a);\n    _v1.subVectors(b, a);\n    _v2.subVectors(point, a);\n    const dot00 = _v0.dot(_v0);\n    const dot01 = _v0.dot(_v1);\n    const dot02 = _v0.dot(_v2);\n    const dot11 = _v1.dot(_v1);\n    const dot12 = _v1.dot(_v2);\n    const denom = dot00 * dot11 - dot01 * dot01;\n\n    // collinear or singular triangle\n    if (denom === 0) {\n      // arbitrary location outside of triangle?\n      // not sure if this is the best idea, maybe should be returning undefined\n      return target.set(-2, -1, -1);\n    }\n    const invDenom = 1 / denom;\n    const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n    // barycentric coordinates must always sum to 1\n    return target.set(1 - u - v, v, u);\n  }\n  static containsPoint(point, a, b, c) {\n    this.getBarycoord(point, a, b, c, _v3);\n    return _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;\n  }\n  static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n    this.getBarycoord(point, p1, p2, p3, _v3);\n    target.set(0, 0);\n    target.addScaledVector(uv1, _v3.x);\n    target.addScaledVector(uv2, _v3.y);\n    target.addScaledVector(uv3, _v3.z);\n    return target;\n  }\n  static isFrontFacing(a, b, c, direction) {\n    _v0.subVectors(c, b);\n    _v1.subVectors(a, b);\n\n    // strictly front facing\n    return _v0.cross(_v1).dot(direction) < 0 ? true : false;\n  }\n  set(a, b, c) {\n    this.a.copy(a);\n    this.b.copy(b);\n    this.c.copy(c);\n    return this;\n  }\n  setFromPointsAndIndices(points, i0, i1, i2) {\n    this.a.copy(points[i0]);\n    this.b.copy(points[i1]);\n    this.c.copy(points[i2]);\n    return this;\n  }\n  setFromAttributeAndIndices(attribute, i0, i1, i2) {\n    this.a.fromBufferAttribute(attribute, i0);\n    this.b.fromBufferAttribute(attribute, i1);\n    this.c.fromBufferAttribute(attribute, i2);\n    return this;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  copy(triangle) {\n    this.a.copy(triangle.a);\n    this.b.copy(triangle.b);\n    this.c.copy(triangle.c);\n    return this;\n  }\n  getArea() {\n    _v0.subVectors(this.c, this.b);\n    _v1.subVectors(this.a, this.b);\n    return _v0.cross(_v1).length() * 0.5;\n  }\n  getMidpoint(target) {\n    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n  }\n  getNormal(target) {\n    return Triangle.getNormal(this.a, this.b, this.c, target);\n  }\n  getPlane(target) {\n    return target.setFromCoplanarPoints(this.a, this.b, this.c);\n  }\n  getBarycoord(point, target) {\n    return Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n  }\n  getUV(point, uv1, uv2, uv3, target) {\n    return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n  }\n  containsPoint(point) {\n    return Triangle.containsPoint(point, this.a, this.b, this.c);\n  }\n  isFrontFacing(direction) {\n    return Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n  }\n  intersectsBox(box) {\n    return box.intersectsTriangle(this);\n  }\n  closestPointToPoint(p, target) {\n    const a = this.a,\n      b = this.b,\n      c = this.c;\n    let v, w;\n\n    // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n    // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n    // under the accompanying license; see chapter 5.1.5 for detailed explanation.\n    // basically, we're distinguishing which of the voronoi regions of the triangle\n    // the point lies in with the minimum amount of redundant computation.\n\n    _vab.subVectors(b, a);\n    _vac.subVectors(c, a);\n    _vap.subVectors(p, a);\n    const d1 = _vab.dot(_vap);\n    const d2 = _vac.dot(_vap);\n    if (d1 <= 0 && d2 <= 0) {\n      // vertex region of A; barycentric coords (1, 0, 0)\n      return target.copy(a);\n    }\n    _vbp.subVectors(p, b);\n    const d3 = _vab.dot(_vbp);\n    const d4 = _vac.dot(_vbp);\n    if (d3 >= 0 && d4 <= d3) {\n      // vertex region of B; barycentric coords (0, 1, 0)\n      return target.copy(b);\n    }\n    const vc = d1 * d4 - d3 * d2;\n    if (vc <= 0 && d1 >= 0 && d3 <= 0) {\n      v = d1 / (d1 - d3);\n      // edge region of AB; barycentric coords (1-v, v, 0)\n      return target.copy(a).addScaledVector(_vab, v);\n    }\n    _vcp.subVectors(p, c);\n    const d5 = _vab.dot(_vcp);\n    const d6 = _vac.dot(_vcp);\n    if (d6 >= 0 && d5 <= d6) {\n      // vertex region of C; barycentric coords (0, 0, 1)\n      return target.copy(c);\n    }\n    const vb = d5 * d2 - d1 * d6;\n    if (vb <= 0 && d2 >= 0 && d6 <= 0) {\n      w = d2 / (d2 - d6);\n      // edge region of AC; barycentric coords (1-w, 0, w)\n      return target.copy(a).addScaledVector(_vac, w);\n    }\n    const va = d3 * d6 - d5 * d4;\n    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n      _vbc.subVectors(c, b);\n      w = (d4 - d3) / (d4 - d3 + (d5 - d6));\n      // edge region of BC; barycentric coords (0, 1-w, w)\n      return target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n    }\n\n    // face region\n    const denom = 1 / (va + vb + vc);\n    // u = va * denom\n    v = vb * denom;\n    w = vc * denom;\n    return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n  }\n  equals(triangle) {\n    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n  }\n}\nexport { Triangle };","map":{"version":3,"names":["Vector3","_v0","_v1","_v2","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","constructor","a","b","c","getNormal","target","subVectors","cross","targetLengthSq","lengthSq","multiplyScalar","Math","sqrt","set","getBarycoord","point","dot00","dot","dot01","dot02","dot11","dot12","denom","invDenom","u","v","containsPoint","x","y","getUV","p1","p2","p3","uv1","uv2","uv3","addScaledVector","z","isFrontFacing","direction","copy","setFromPointsAndIndices","points","i0","i1","i2","setFromAttributeAndIndices","attribute","fromBufferAttribute","clone","triangle","getArea","length","getMidpoint","addVectors","add","getPlane","setFromCoplanarPoints","intersectsBox","box","intersectsTriangle","closestPointToPoint","p","w","d1","d2","d3","d4","vc","d5","d6","vb","va","equals"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/math/Triangle.js"],"sourcesContent":["import { Vector3 } from './Vector3.js';\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0.subVectors( a, b );\n\t\ttarget.cross( _v0 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0.subVectors( c, a );\n\t\t_v1.subVectors( b, a );\n\t\t_v2.subVectors( point, a );\n\n\t\tconst dot00 = _v0.dot( _v0 );\n\t\tconst dot01 = _v0.dot( _v1 );\n\t\tconst dot02 = _v0.dot( _v2 );\n\t\tconst dot11 = _v1.dot( _v1 );\n\t\tconst dot12 = _v1.dot( _v2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3 );\n\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t}\n\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0.subVectors( c, b );\n\t\t_v1.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0.cross( _v1 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0.subVectors( this.c, this.b );\n\t\t_v1.subVectors( this.a, this.b );\n\n\t\treturn _v0.cross( _v1 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetUV( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nexport { Triangle };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}