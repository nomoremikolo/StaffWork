{"ast":null,"code":"import Node from '../core/Node.js';\nimport { uniform, div, vec2, invert } from '../shadernode/ShaderNodeBaseElements.js';\nimport { Vector2 } from 'three';\nimport { NodeUpdateType } from '../core/constants.js';\nlet resolution;\nclass ViewportNode extends Node {\n  static COORDINATE = 'coordinate';\n  static RESOLUTION = 'resolution';\n  static TOP_LEFT = 'topLeft';\n  static BOTTOM_LEFT = 'bottomLeft';\n  static TOP_RIGHT = 'topRight';\n  static BOTTOM_RIGHT = 'bottomRight';\n  constructor(scope) {\n    super();\n    this.scope = scope;\n    this.isViewportNode = true;\n  }\n  getNodeType() {\n    return this.scope === ViewportNode.COORDINATE ? 'vec4' : 'vec2';\n  }\n  getUpdateType() {\n    let updateType = NodeUpdateType.NONE;\n    if (this.scope === ViewportNode.RESOLUTION) {\n      updateType = NodeUpdateType.FRAME;\n    }\n    this.updateType = updateType;\n    return updateType;\n  }\n  update(_ref) {\n    let {\n      renderer\n    } = _ref;\n    renderer.getSize(resolution);\n  }\n  construct(builder) {\n    const scope = this.scope;\n    if (scope === ViewportNode.COORDINATE) return;\n    let output = null;\n    if (scope === ViewportNode.RESOLUTION) {\n      resolution ||= new Vector2();\n      output = uniform(resolution);\n    } else {\n      const coordinateNode = vec2(new ViewportNode(ViewportNode.COORDINATE));\n      const resolutionNode = new ViewportNode(ViewportNode.RESOLUTION);\n      output = div(coordinateNode, resolutionNode);\n      let outX = output.x;\n      let outY = output.y;\n      if (/top/i.test(scope) && builder.isFlipY()) outY = invert(outY);else if (/bottom/i.test(scope) && builder.isFlipY() === false) outY = invert(outY);\n      if (/right/i.test(scope)) outX = invert(outX);\n      output = vec2(outX, outY);\n    }\n    return output;\n  }\n  generate(builder) {\n    if (this.scope === ViewportNode.COORDINATE) {\n      return builder.getFragCoord();\n    }\n    return super.generate(builder);\n  }\n}\nexport default ViewportNode;","map":{"version":3,"names":["Node","uniform","div","vec2","invert","Vector2","NodeUpdateType","resolution","ViewportNode","COORDINATE","RESOLUTION","TOP_LEFT","BOTTOM_LEFT","TOP_RIGHT","BOTTOM_RIGHT","constructor","scope","isViewportNode","getNodeType","getUpdateType","updateType","NONE","FRAME","update","renderer","getSize","construct","builder","output","coordinateNode","resolutionNode","outX","x","outY","y","test","isFlipY","generate","getFragCoord"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/display/ViewportNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { uniform, div, vec2, invert } from '../shadernode/ShaderNodeBaseElements.js';\nimport { Vector2 } from 'three';\nimport { NodeUpdateType } from '../core/constants.js';\n\nlet resolution;\n\nclass ViewportNode extends Node {\n\n\tstatic COORDINATE = 'coordinate';\n\tstatic RESOLUTION = 'resolution';\n\tstatic TOP_LEFT = 'topLeft';\n\tstatic BOTTOM_LEFT = 'bottomLeft';\n\tstatic TOP_RIGHT = 'topRight';\n\tstatic BOTTOM_RIGHT = 'bottomRight';\n\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t\tthis.isViewportNode = true;\n\n\t}\n\n\tgetNodeType() {\n\n\t\treturn this.scope === ViewportNode.COORDINATE ? 'vec4' : 'vec2';\n\n\t}\n\n\tgetUpdateType() {\n\n\t\tlet updateType = NodeUpdateType.NONE;\n\n\t\tif ( this.scope === ViewportNode.RESOLUTION ) {\n\n\t\t\tupdateType = NodeUpdateType.FRAME;\n\n\t\t}\n\n\t\tthis.updateType = updateType;\n\n\t\treturn updateType;\n\n\t}\n\n\tupdate( { renderer } ) {\n\n\t\trenderer.getSize( resolution );\n\n\t}\n\n\tconstruct( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === ViewportNode.COORDINATE ) return;\n\n\t\tlet output = null;\n\n\t\tif ( scope === ViewportNode.RESOLUTION ) {\n\n\t\t\tresolution ||= new Vector2();\n\n\t\t\toutput = uniform( resolution );\n\n\t\t} else {\n\n\t\t\tconst coordinateNode = vec2( new ViewportNode( ViewportNode.COORDINATE ) );\n\t\t\tconst resolutionNode = new ViewportNode( ViewportNode.RESOLUTION );\n\n\t\t\toutput = div( coordinateNode, resolutionNode );\n\n\t\t\tlet outX = output.x;\n\t\t\tlet outY = output.y;\n\n\t\t\tif ( /top/i.test( scope ) && builder.isFlipY() ) outY = invert( outY );\n\t\t\telse if ( /bottom/i.test( scope ) && builder.isFlipY() === false ) outY = invert( outY );\n\n\t\t\tif ( /right/i.test( scope ) ) outX = invert( outX );\n\n\t\t\toutput = vec2( outX, outY );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tif ( this.scope === ViewportNode.COORDINATE ) {\n\n\t\t\treturn builder.getFragCoord();\n\n\t\t}\n\n\t\treturn super.generate( builder );\n\n\t}\n\n}\n\nexport default ViewportNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,iBAAiB;AAClC,SAASC,OAAO,EAAEC,GAAG,EAAEC,IAAI,EAAEC,MAAM,QAAQ,yCAAyC;AACpF,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,cAAc,QAAQ,sBAAsB;AAErD,IAAIC,UAAU;AAEd,MAAMC,YAAY,SAASR,IAAI,CAAC;EAE/B,OAAOS,UAAU,GAAG,YAAY;EAChC,OAAOC,UAAU,GAAG,YAAY;EAChC,OAAOC,QAAQ,GAAG,SAAS;EAC3B,OAAOC,WAAW,GAAG,YAAY;EACjC,OAAOC,SAAS,GAAG,UAAU;EAC7B,OAAOC,YAAY,GAAG,aAAa;EAEnCC,WAAW,CAAEC,KAAK,EAAG;IAEpB,KAAK,EAAE;IAEP,IAAI,CAACA,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACC,cAAc,GAAG,IAAI;EAE3B;EAEAC,WAAW,GAAG;IAEb,OAAO,IAAI,CAACF,KAAK,KAAKR,YAAY,CAACC,UAAU,GAAG,MAAM,GAAG,MAAM;EAEhE;EAEAU,aAAa,GAAG;IAEf,IAAIC,UAAU,GAAGd,cAAc,CAACe,IAAI;IAEpC,IAAK,IAAI,CAACL,KAAK,KAAKR,YAAY,CAACE,UAAU,EAAG;MAE7CU,UAAU,GAAGd,cAAc,CAACgB,KAAK;IAElC;IAEA,IAAI,CAACF,UAAU,GAAGA,UAAU;IAE5B,OAAOA,UAAU;EAElB;EAEAG,MAAM,OAAiB;IAAA,IAAf;MAAEC;IAAS,CAAC;IAEnBA,QAAQ,CAACC,OAAO,CAAElB,UAAU,CAAE;EAE/B;EAEAmB,SAAS,CAAEC,OAAO,EAAG;IAEpB,MAAMX,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAKA,KAAK,KAAKR,YAAY,CAACC,UAAU,EAAG;IAEzC,IAAImB,MAAM,GAAG,IAAI;IAEjB,IAAKZ,KAAK,KAAKR,YAAY,CAACE,UAAU,EAAG;MAExCH,UAAU,KAAK,IAAIF,OAAO,EAAE;MAE5BuB,MAAM,GAAG3B,OAAO,CAAEM,UAAU,CAAE;IAE/B,CAAC,MAAM;MAEN,MAAMsB,cAAc,GAAG1B,IAAI,CAAE,IAAIK,YAAY,CAAEA,YAAY,CAACC,UAAU,CAAE,CAAE;MAC1E,MAAMqB,cAAc,GAAG,IAAItB,YAAY,CAAEA,YAAY,CAACE,UAAU,CAAE;MAElEkB,MAAM,GAAG1B,GAAG,CAAE2B,cAAc,EAAEC,cAAc,CAAE;MAE9C,IAAIC,IAAI,GAAGH,MAAM,CAACI,CAAC;MACnB,IAAIC,IAAI,GAAGL,MAAM,CAACM,CAAC;MAEnB,IAAK,MAAM,CAACC,IAAI,CAAEnB,KAAK,CAAE,IAAIW,OAAO,CAACS,OAAO,EAAE,EAAGH,IAAI,GAAG7B,MAAM,CAAE6B,IAAI,CAAE,CAAC,KAClE,IAAK,SAAS,CAACE,IAAI,CAAEnB,KAAK,CAAE,IAAIW,OAAO,CAACS,OAAO,EAAE,KAAK,KAAK,EAAGH,IAAI,GAAG7B,MAAM,CAAE6B,IAAI,CAAE;MAExF,IAAK,QAAQ,CAACE,IAAI,CAAEnB,KAAK,CAAE,EAAGe,IAAI,GAAG3B,MAAM,CAAE2B,IAAI,CAAE;MAEnDH,MAAM,GAAGzB,IAAI,CAAE4B,IAAI,EAAEE,IAAI,CAAE;IAE5B;IAEA,OAAOL,MAAM;EAEd;EAEAS,QAAQ,CAAEV,OAAO,EAAG;IAEnB,IAAK,IAAI,CAACX,KAAK,KAAKR,YAAY,CAACC,UAAU,EAAG;MAE7C,OAAOkB,OAAO,CAACW,YAAY,EAAE;IAE9B;IAEA,OAAO,KAAK,CAACD,QAAQ,CAAEV,OAAO,CAAE;EAEjC;AAED;AAEA,eAAenB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}