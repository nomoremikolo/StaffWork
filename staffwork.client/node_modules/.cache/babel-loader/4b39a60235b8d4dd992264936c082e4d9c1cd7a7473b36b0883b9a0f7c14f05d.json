{"ast":null,"code":"import { Vector3 } from './Vector3.js';\nimport { Sphere } from './Sphere.js';\nimport { Plane } from './Plane.js';\nconst _sphere = /*@__PURE__*/new Sphere();\nconst _vector = /*@__PURE__*/new Vector3();\nclass Frustum {\n  constructor() {\n    let p0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Plane();\n    let p1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Plane();\n    let p2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Plane();\n    let p3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Plane();\n    let p4 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Plane();\n    let p5 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new Plane();\n    this.planes = [p0, p1, p2, p3, p4, p5];\n  }\n  set(p0, p1, p2, p3, p4, p5) {\n    const planes = this.planes;\n    planes[0].copy(p0);\n    planes[1].copy(p1);\n    planes[2].copy(p2);\n    planes[3].copy(p3);\n    planes[4].copy(p4);\n    planes[5].copy(p5);\n    return this;\n  }\n  copy(frustum) {\n    const planes = this.planes;\n    for (let i = 0; i < 6; i++) {\n      planes[i].copy(frustum.planes[i]);\n    }\n    return this;\n  }\n  setFromProjectionMatrix(m) {\n    const planes = this.planes;\n    const me = m.elements;\n    const me0 = me[0],\n      me1 = me[1],\n      me2 = me[2],\n      me3 = me[3];\n    const me4 = me[4],\n      me5 = me[5],\n      me6 = me[6],\n      me7 = me[7];\n    const me8 = me[8],\n      me9 = me[9],\n      me10 = me[10],\n      me11 = me[11];\n    const me12 = me[12],\n      me13 = me[13],\n      me14 = me[14],\n      me15 = me[15];\n    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n    planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n    return this;\n  }\n  intersectsObject(object) {\n    const geometry = object.geometry;\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n    return this.intersectsSphere(_sphere);\n  }\n  intersectsSprite(sprite) {\n    _sphere.center.set(0, 0, 0);\n    _sphere.radius = 0.7071067811865476;\n    _sphere.applyMatrix4(sprite.matrixWorld);\n    return this.intersectsSphere(_sphere);\n  }\n  intersectsSphere(sphere) {\n    const planes = this.planes;\n    const center = sphere.center;\n    const negRadius = -sphere.radius;\n    for (let i = 0; i < 6; i++) {\n      const distance = planes[i].distanceToPoint(center);\n      if (distance < negRadius) {\n        return false;\n      }\n    }\n    return true;\n  }\n  intersectsBox(box) {\n    const planes = this.planes;\n    for (let i = 0; i < 6; i++) {\n      const plane = planes[i];\n\n      // corner at max distance\n\n      _vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n      _vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n      _vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n      if (plane.distanceToPoint(_vector) < 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  containsPoint(point) {\n    const planes = this.planes;\n    for (let i = 0; i < 6; i++) {\n      if (planes[i].distanceToPoint(point) < 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nexport { Frustum };","map":{"version":3,"names":["Vector3","Sphere","Plane","_sphere","_vector","Frustum","constructor","p0","p1","p2","p3","p4","p5","planes","set","copy","frustum","i","setFromProjectionMatrix","m","me","elements","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","normalize","intersectsObject","object","geometry","boundingSphere","computeBoundingSphere","applyMatrix4","matrixWorld","intersectsSphere","intersectsSprite","sprite","center","radius","sphere","negRadius","distance","distanceToPoint","intersectsBox","box","plane","x","normal","max","min","y","z","containsPoint","point","clone"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/math/Frustum.js"],"sourcesContent":["import { Vector3 } from './Vector3.js';\nimport { Sphere } from './Sphere.js';\nimport { Plane } from './Plane.js';\n\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _vector = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n\nexport { Frustum };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}