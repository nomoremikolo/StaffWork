{"ast":null,"code":"import { AudioContext } from '../audio/AudioContext.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\nclass AudioLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        // Create a copy of the buffer. The `decodeAudioData` method\n        // detaches the buffer when complete, preventing reuse.\n        const bufferCopy = buffer.slice(0);\n        const context = AudioContext.getContext();\n        context.decodeAudioData(bufferCopy, function (audioBuffer) {\n          onLoad(audioBuffer);\n        });\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n}\nexport { AudioLoader };","map":{"version":3,"names":["AudioContext","FileLoader","Loader","AudioLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setResponseType","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","bufferCopy","slice","context","getContext","decodeAudioData","audioBuffer","e","console","error","itemError"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/loaders/AudioLoader.js"],"sourcesContent":["import { AudioContext } from '../audio/AudioContext.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\n\nclass AudioLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n}\n\n\nexport { AudioLoader };\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,MAAM,QAAQ,aAAa;AAEpC,MAAMC,WAAW,SAASD,MAAM,CAAC;EAEhCE,WAAW,CAAEC,OAAO,EAAG;IAEtB,KAAK,CAAEA,OAAO,CAAE;EAEjB;EAEAC,IAAI,CAAEC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAG;IAExC,MAAMC,KAAK,GAAG,IAAI;IAElB,MAAMC,MAAM,GAAG,IAAIX,UAAU,CAAE,IAAI,CAACI,OAAO,CAAE;IAC7CO,MAAM,CAACC,eAAe,CAAE,aAAa,CAAE;IACvCD,MAAM,CAACE,OAAO,CAAE,IAAI,CAACC,IAAI,CAAE;IAC3BH,MAAM,CAACI,gBAAgB,CAAE,IAAI,CAACC,aAAa,CAAE;IAC7CL,MAAM,CAACM,kBAAkB,CAAE,IAAI,CAACC,eAAe,CAAE;IACjDP,MAAM,CAACN,IAAI,CAAEC,GAAG,EAAE,UAAWa,MAAM,EAAG;MAErC,IAAI;QAEH;QACA;QACA,MAAMC,UAAU,GAAGD,MAAM,CAACE,KAAK,CAAE,CAAC,CAAE;QAEpC,MAAMC,OAAO,GAAGvB,YAAY,CAACwB,UAAU,EAAE;QACzCD,OAAO,CAACE,eAAe,CAAEJ,UAAU,EAAE,UAAWK,WAAW,EAAG;UAE7DlB,MAAM,CAAEkB,WAAW,CAAE;QAEtB,CAAC,CAAE;MAEJ,CAAC,CAAC,OAAQC,CAAC,EAAG;QAEb,IAAKjB,OAAO,EAAG;UAEdA,OAAO,CAAEiB,CAAC,CAAE;QAEb,CAAC,MAAM;UAENC,OAAO,CAACC,KAAK,CAAEF,CAAC,CAAE;QAEnB;QAEAhB,KAAK,CAACN,OAAO,CAACyB,SAAS,CAAEvB,GAAG,CAAE;MAE/B;IAED,CAAC,EAAEE,UAAU,EAAEC,OAAO,CAAE;EAEzB;AAED;AAGA,SAASP,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}