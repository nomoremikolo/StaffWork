{"ast":null,"code":"function WebGLBufferRenderer(gl, extensions, info, capabilities) {\n  const isWebGL2 = capabilities.isWebGL2;\n  let mode;\n  function setMode(value) {\n    mode = value;\n  }\n  function render(start, count) {\n    gl.drawArrays(mode, start, count);\n    info.update(count, mode, 1);\n  }\n  function renderInstances(start, count, primcount) {\n    if (primcount === 0) return;\n    let extension, methodName;\n    if (isWebGL2) {\n      extension = gl;\n      methodName = 'drawArraysInstanced';\n    } else {\n      extension = extensions.get('ANGLE_instanced_arrays');\n      methodName = 'drawArraysInstancedANGLE';\n      if (extension === null) {\n        console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n        return;\n      }\n    }\n    extension[methodName](mode, start, count, primcount);\n    info.update(count, mode, primcount);\n  }\n\n  //\n\n  this.setMode = setMode;\n  this.render = render;\n  this.renderInstances = renderInstances;\n}\nexport { WebGLBufferRenderer };","map":{"version":3,"names":["WebGLBufferRenderer","gl","extensions","info","capabilities","isWebGL2","mode","setMode","value","render","start","count","drawArrays","update","renderInstances","primcount","extension","methodName","get","console","error"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/renderers/webgl/WebGLBufferRenderer.js"],"sourcesContent":["function WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\n\nexport { WebGLBufferRenderer };\n"],"mappings":"AAAA,SAASA,mBAAmB,CAAEC,EAAE,EAAEC,UAAU,EAAEC,IAAI,EAAEC,YAAY,EAAG;EAElE,MAAMC,QAAQ,GAAGD,YAAY,CAACC,QAAQ;EAEtC,IAAIC,IAAI;EAER,SAASC,OAAO,CAAEC,KAAK,EAAG;IAEzBF,IAAI,GAAGE,KAAK;EAEb;EAEA,SAASC,MAAM,CAAEC,KAAK,EAAEC,KAAK,EAAG;IAE/BV,EAAE,CAACW,UAAU,CAAEN,IAAI,EAAEI,KAAK,EAAEC,KAAK,CAAE;IAEnCR,IAAI,CAACU,MAAM,CAAEF,KAAK,EAAEL,IAAI,EAAE,CAAC,CAAE;EAE9B;EAEA,SAASQ,eAAe,CAAEJ,KAAK,EAAEC,KAAK,EAAEI,SAAS,EAAG;IAEnD,IAAKA,SAAS,KAAK,CAAC,EAAG;IAEvB,IAAIC,SAAS,EAAEC,UAAU;IAEzB,IAAKZ,QAAQ,EAAG;MAEfW,SAAS,GAAGf,EAAE;MACdgB,UAAU,GAAG,qBAAqB;IAEnC,CAAC,MAAM;MAEND,SAAS,GAAGd,UAAU,CAACgB,GAAG,CAAE,wBAAwB,CAAE;MACtDD,UAAU,GAAG,0BAA0B;MAEvC,IAAKD,SAAS,KAAK,IAAI,EAAG;QAEzBG,OAAO,CAACC,KAAK,CAAE,gIAAgI,CAAE;QACjJ;MAED;IAED;IAEAJ,SAAS,CAAEC,UAAU,CAAE,CAAEX,IAAI,EAAEI,KAAK,EAAEC,KAAK,EAAEI,SAAS,CAAE;IAExDZ,IAAI,CAACU,MAAM,CAAEF,KAAK,EAAEL,IAAI,EAAES,SAAS,CAAE;EAEtC;;EAEA;;EAEA,IAAI,CAACR,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACE,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACK,eAAe,GAAGA,eAAe;AAEvC;AAGA,SAASd,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}