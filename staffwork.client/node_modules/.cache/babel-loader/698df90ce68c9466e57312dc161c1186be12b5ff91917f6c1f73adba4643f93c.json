{"ast":null,"code":"import TempNode from '../core/Node.js';\nimport { ShaderNode, mul, float } from '../shadernode/ShaderNodeBaseElements.js';\nimport { LinearToneMapping } from 'three';\n\n// exposure only\nexport const LinearToneMappingNode = new ShaderNode(_ref => {\n  let {\n    color,\n    exposure\n  } = _ref;\n  return mul(color, exposure);\n});\nclass ToneMappingNode extends TempNode {\n  constructor(toneMapping) {\n    let exposureNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : float(1);\n    let colorNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super('vec3');\n    this.toneMapping = toneMapping;\n    this.exposureNode = exposureNode;\n    this.colorNode = colorNode;\n  }\n  construct(builder) {\n    const colorNode = this.color || builder.context.color;\n    const toneMapping = this.toneMapping;\n    const toneMappingParams = {\n      exposure: this.exposureNode,\n      color: colorNode\n    };\n    let outputNode = null;\n    if (toneMapping === LinearToneMapping) {\n      outputNode = LinearToneMappingNode.call(toneMappingParams);\n    } else {\n      outputNode = this.colorNode;\n    }\n    return outputNode;\n  }\n}\nexport default ToneMappingNode;","map":{"version":3,"names":["TempNode","ShaderNode","mul","float","LinearToneMapping","LinearToneMappingNode","color","exposure","ToneMappingNode","constructor","toneMapping","exposureNode","colorNode","construct","builder","context","toneMappingParams","outputNode","call"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/display/ToneMappingNode.js"],"sourcesContent":["import TempNode from '../core/Node.js';\nimport { ShaderNode, mul, float } from '../shadernode/ShaderNodeBaseElements.js';\n\nimport { LinearToneMapping } from 'three';\n\n// exposure only\nexport const LinearToneMappingNode = new ShaderNode( ( { color, exposure } ) => {\n\n\treturn mul( color, exposure );\n\n} );\n\nclass ToneMappingNode extends TempNode {\n\n\tconstructor( toneMapping, exposureNode = float( 1 ), colorNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.toneMapping = toneMapping;\n\n\t\tthis.exposureNode = exposureNode;\n\t\tthis.colorNode = colorNode;\n\n\t}\n\n\tconstruct( builder ) {\n\n\t\tconst colorNode = this.color || builder.context.color;\n\n\t\tconst toneMapping = this.toneMapping;\n\t\tconst toneMappingParams = { exposure: this.exposureNode, color: colorNode };\n\n\t\tlet outputNode = null;\n\n\t\tif ( toneMapping === LinearToneMapping ) {\n\n\t\t\toutputNode = LinearToneMappingNode.call( toneMappingParams );\n\n\t\t} else {\n\n\t\t\toutputNode = this.colorNode;\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default ToneMappingNode;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,iBAAiB;AACtC,SAASC,UAAU,EAAEC,GAAG,EAAEC,KAAK,QAAQ,yCAAyC;AAEhF,SAASC,iBAAiB,QAAQ,OAAO;;AAEzC;AACA,OAAO,MAAMC,qBAAqB,GAAG,IAAIJ,UAAU,CAAE,QAA2B;EAAA,IAAzB;IAAEK,KAAK;IAAEC;EAAS,CAAC;EAEzE,OAAOL,GAAG,CAAEI,KAAK,EAAEC,QAAQ,CAAE;AAE9B,CAAC,CAAE;AAEH,MAAMC,eAAe,SAASR,QAAQ,CAAC;EAEtCS,WAAW,CAAEC,WAAW,EAAgD;IAAA,IAA9CC,YAAY,uEAAGR,KAAK,CAAE,CAAC,CAAE;IAAA,IAAES,SAAS,uEAAG,IAAI;IAEpE,KAAK,CAAE,MAAM,CAAE;IAEf,IAAI,CAACF,WAAW,GAAGA,WAAW;IAE9B,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,SAAS,GAAGA,SAAS;EAE3B;EAEAC,SAAS,CAAEC,OAAO,EAAG;IAEpB,MAAMF,SAAS,GAAG,IAAI,CAACN,KAAK,IAAIQ,OAAO,CAACC,OAAO,CAACT,KAAK;IAErD,MAAMI,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,MAAMM,iBAAiB,GAAG;MAAET,QAAQ,EAAE,IAAI,CAACI,YAAY;MAAEL,KAAK,EAAEM;IAAU,CAAC;IAE3E,IAAIK,UAAU,GAAG,IAAI;IAErB,IAAKP,WAAW,KAAKN,iBAAiB,EAAG;MAExCa,UAAU,GAAGZ,qBAAqB,CAACa,IAAI,CAAEF,iBAAiB,CAAE;IAE7D,CAAC,MAAM;MAENC,UAAU,GAAG,IAAI,CAACL,SAAS;IAE5B;IAEA,OAAOK,UAAU;EAElB;AAED;AAEA,eAAeT,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}