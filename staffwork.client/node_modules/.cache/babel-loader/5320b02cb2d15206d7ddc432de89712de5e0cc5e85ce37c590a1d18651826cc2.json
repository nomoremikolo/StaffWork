{"ast":null,"code":"import axios from \"axios\";\nimport { GraphQlEndpoint } from \"../../global_variables\";\nimport { usersReducer } from \"../reducers/usersReducer\";\nimport { NotificationReducer } from \"../reducers/NotificationReducer\";\nconst {\n  SHOW_SUCCESS_MESSAGE,\n  SHOW_ERROR_MESSAGE,\n  SHOW_WARNING_MESSAGE,\n  DEACTIVATE_MESSAGE\n} = NotificationReducer.actions;\nexport const fetch_all_users = () => async dispatch => {\n  const graphqlQuery = {\n    \"query\": `\n            query getAll {\n              user {\n                getAll {\n                  errors\n                  statusCode\n                  users {\n                    id\n                    username\n                    name\n                    surname\n                    age\n                    email\n                    adress\n                    role\n                    isActivated\n                    permissions\n                  }\n                }\n              }\n            }\n        `\n  };\n  dispatch(usersReducer.actions.GET_ALL_USERS());\n  try {\n    const response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.user.getAll;\n    if (r.statusCode === 200) {\n      dispatch(usersReducer.actions.GET_ALL_USERS_SUCCESS(r.users));\n    } else {\n      dispatch(usersReducer.actions.GET_ALL_USERS_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(usersReducer.actions.GET_ALL_USERS_ERROR(e));\n    localStorage.removeItem('accessToken');\n  }\n};\nexport const update_users = user => async dispatch => {\n  var _user$name, _user$surname, _user$username, _user$role, _user$isActivated, _user$age;\n  const graphqlQuery = {\n    \"query\": `\n            mutation updateU{\n              user{\n                updateUser(user: {\n                  id: ${user.id},\n                  name: \"${(_user$name = user.name) !== null && _user$name !== void 0 ? _user$name : \"null\"}\"\n                  surname: \"${(_user$surname = user.surname) !== null && _user$surname !== void 0 ? _user$surname : \"null\"}\",\n                  username: \"${(_user$username = user.username) !== null && _user$username !== void 0 ? _user$username : \"null\"}\",\n                  role: \"${(_user$role = user.role) !== null && _user$role !== void 0 ? _user$role : \"null\"}\",\n                  isActivated: ${(_user$isActivated = user.isActivated) !== null && _user$isActivated !== void 0 ? _user$isActivated : \"null\"},\n                  age: ${(_user$age = user.age) !== null && _user$age !== void 0 ? _user$age : \"null\"},\n                }){\n                  errors\n                  statusCode\n                  user{\n                    id\n                    username\n                    name\n                    surname\n                    age\n                    email\n                    adress\n                    role\n                    isActivated\n                    permissions\n                  }\n                }\n              }\n            }\n        `\n  };\n  dispatch(usersReducer.actions.GET_ALL_USERS());\n  try {\n    const response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.user.updateUser;\n    if (r.statusCode === 200) {\n      dispatch(SHOW_SUCCESS_MESSAGE(\"Successfully updated!\"));\n      dispatch(usersReducer.actions.GET_ALL_USERS_SUCCESS(r.users));\n    } else {\n      dispatch(SHOW_ERROR_MESSAGE(r.errors));\n      dispatch(usersReducer.actions.GET_ALL_USERS_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(usersReducer.actions.GET_ALL_USERS_ERROR(e));\n    localStorage.removeItem('accessToken');\n  }\n};","map":{"version":3,"names":["axios","GraphQlEndpoint","usersReducer","NotificationReducer","SHOW_SUCCESS_MESSAGE","SHOW_ERROR_MESSAGE","SHOW_WARNING_MESSAGE","DEACTIVATE_MESSAGE","actions","fetch_all_users","dispatch","graphqlQuery","GET_ALL_USERS","response","url","method","withCredentials","headers","localStorage","getItem","data","r","user","getAll","statusCode","GET_ALL_USERS_SUCCESS","users","GET_ALL_USERS_ERROR","errors","e","removeItem","update_users","id","name","surname","username","role","isActivated","age","updateUser"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/src/redux/action_creators/users_action_creator.ts"],"sourcesContent":["import {AppDispatch} from \"../store\";\r\nimport {authorizationReducer} from \"../reducers/authorizationReducer\";\r\nimport axios from \"axios\";\r\nimport {GraphQlEndpoint} from \"../../global_variables\";\r\nimport {usersReducer} from \"../reducers/usersReducer\";\r\nimport {NotificationReducer} from \"../reducers/NotificationReducer\";\r\nimport {IUpdatedUser} from \"../../types/user\";\r\nconst {SHOW_SUCCESS_MESSAGE, SHOW_ERROR_MESSAGE, SHOW_WARNING_MESSAGE, DEACTIVATE_MESSAGE} = NotificationReducer.actions\r\nexport const fetch_all_users = () => async (dispatch: AppDispatch) => {\r\n    const graphqlQuery = {\r\n        \"query\": `\r\n            query getAll {\r\n              user {\r\n                getAll {\r\n                  errors\r\n                  statusCode\r\n                  users {\r\n                    id\r\n                    username\r\n                    name\r\n                    surname\r\n                    age\r\n                    email\r\n                    adress\r\n                    role\r\n                    isActivated\r\n                    permissions\r\n                  }\r\n                }\r\n              }\r\n            }\r\n        `,\r\n    };\r\n    dispatch(usersReducer.actions.GET_ALL_USERS())\r\n    try {\r\n        const response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.user.getAll\r\n        if (r.statusCode === 200){\r\n            dispatch(usersReducer.actions.GET_ALL_USERS_SUCCESS(r.users))\r\n        }else{\r\n            dispatch(usersReducer.actions.GET_ALL_USERS_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(usersReducer.actions.GET_ALL_USERS_ERROR(e))\r\n        localStorage.removeItem('accessToken')\r\n    }\r\n}\r\n\r\nexport const update_users = (user: IUpdatedUser) => async (dispatch: AppDispatch) => {\r\n    const graphqlQuery = {\r\n        \"query\": `\r\n            mutation updateU{\r\n              user{\r\n                updateUser(user: {\r\n                  id: ${user.id},\r\n                  name: \"${user.name ?? \"null\"}\"\r\n                  surname: \"${user.surname ?? \"null\"}\",\r\n                  username: \"${user.username ?? \"null\"}\",\r\n                  role: \"${user.role ?? \"null\"}\",\r\n                  isActivated: ${user.isActivated ?? \"null\"},\r\n                  age: ${user.age ?? \"null\"},\r\n                }){\r\n                  errors\r\n                  statusCode\r\n                  user{\r\n                    id\r\n                    username\r\n                    name\r\n                    surname\r\n                    age\r\n                    email\r\n                    adress\r\n                    role\r\n                    isActivated\r\n                    permissions\r\n                  }\r\n                }\r\n              }\r\n            }\r\n        `,\r\n    };\r\n    dispatch(usersReducer.actions.GET_ALL_USERS())\r\n    try {\r\n        const response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.user.updateUser\r\n        if (r.statusCode === 200){\r\n            dispatch(SHOW_SUCCESS_MESSAGE(\"Successfully updated!\"))\r\n            dispatch(usersReducer.actions.GET_ALL_USERS_SUCCESS(r.users))\r\n        }else{\r\n            dispatch(SHOW_ERROR_MESSAGE(r.errors))\r\n            dispatch(usersReducer.actions.GET_ALL_USERS_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(usersReducer.actions.GET_ALL_USERS_ERROR(e))\r\n        localStorage.removeItem('accessToken')\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}