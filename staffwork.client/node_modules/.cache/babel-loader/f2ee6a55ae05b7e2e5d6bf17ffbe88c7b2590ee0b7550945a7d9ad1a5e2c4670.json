{"ast":null,"code":"import { Vector2 } from '../../math/Vector2.js';\nimport { CurvePath } from './CurvePath.js';\nimport { EllipseCurve } from '../curves/EllipseCurve.js';\nimport { SplineCurve } from '../curves/SplineCurve.js';\nimport { CubicBezierCurve } from '../curves/CubicBezierCurve.js';\nimport { QuadraticBezierCurve } from '../curves/QuadraticBezierCurve.js';\nimport { LineCurve } from '../curves/LineCurve.js';\nclass Path extends CurvePath {\n  constructor(points) {\n    super();\n    this.type = 'Path';\n    this.currentPoint = new Vector2();\n    if (points) {\n      this.setFromPoints(points);\n    }\n  }\n  setFromPoints(points) {\n    this.moveTo(points[0].x, points[0].y);\n    for (let i = 1, l = points.length; i < l; i++) {\n      this.lineTo(points[i].x, points[i].y);\n    }\n    return this;\n  }\n  moveTo(x, y) {\n    this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n    return this;\n  }\n  lineTo(x, y) {\n    const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n    this.curves.push(curve);\n    this.currentPoint.set(x, y);\n    return this;\n  }\n  quadraticCurveTo(aCPx, aCPy, aX, aY) {\n    const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n    this.curves.push(curve);\n    this.currentPoint.set(aX, aY);\n    return this;\n  }\n  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n    const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n    this.curves.push(curve);\n    this.currentPoint.set(aX, aY);\n    return this;\n  }\n  splineThru(pts /*Array of Vector*/) {\n    const npts = [this.currentPoint.clone()].concat(pts);\n    const curve = new SplineCurve(npts);\n    this.curves.push(curve);\n    this.currentPoint.copy(pts[pts.length - 1]);\n    return this;\n  }\n  arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    const x0 = this.currentPoint.x;\n    const y0 = this.currentPoint.y;\n    this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n    return this;\n  }\n  absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n    return this;\n  }\n  ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    const x0 = this.currentPoint.x;\n    const y0 = this.currentPoint.y;\n    this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n    return this;\n  }\n  absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n    if (this.curves.length > 0) {\n      // if a previous curve is present, attempt to join\n      const firstPoint = curve.getPoint(0);\n      if (!firstPoint.equals(this.currentPoint)) {\n        this.lineTo(firstPoint.x, firstPoint.y);\n      }\n    }\n    this.curves.push(curve);\n    const lastPoint = curve.getPoint(1);\n    this.currentPoint.copy(lastPoint);\n    return this;\n  }\n  copy(source) {\n    super.copy(source);\n    this.currentPoint.copy(source.currentPoint);\n    return this;\n  }\n  toJSON() {\n    const data = super.toJSON();\n    data.currentPoint = this.currentPoint.toArray();\n    return data;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    this.currentPoint.fromArray(json.currentPoint);\n    return this;\n  }\n}\nexport { Path };","map":{"version":3,"names":["Vector2","CurvePath","EllipseCurve","SplineCurve","CubicBezierCurve","QuadraticBezierCurve","LineCurve","Path","constructor","points","type","currentPoint","setFromPoints","moveTo","x","y","i","l","length","lineTo","set","curve","clone","curves","push","quadraticCurveTo","aCPx","aCPy","aX","aY","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","pts","npts","concat","copy","arc","aRadius","aStartAngle","aEndAngle","aClockwise","x0","y0","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","firstPoint","getPoint","equals","lastPoint","source","toJSON","data","toArray","fromJSON","json","fromArray"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/extras/core/Path.js"],"sourcesContent":["import { Vector2 } from '../../math/Vector2.js';\nimport { CurvePath } from './CurvePath.js';\nimport { EllipseCurve } from '../curves/EllipseCurve.js';\nimport { SplineCurve } from '../curves/SplineCurve.js';\nimport { CubicBezierCurve } from '../curves/CubicBezierCurve.js';\nimport { QuadraticBezierCurve } from '../curves/QuadraticBezierCurve.js';\nimport { LineCurve } from '../curves/LineCurve.js';\n\nclass Path extends CurvePath {\n\n\tconstructor( points ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts /*Array of Vector*/ ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\n\nexport { Path };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}