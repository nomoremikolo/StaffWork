{"ast":null,"code":"import { wareReducer } from \"../reducers/wareReducer\";\nimport axios from \"axios\";\nimport { GraphQlEndpoint } from \"../../global_variables\";\nexport const fetch_discount_wares = function () {\n  let sortBy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isReverse: false,\n    value: \"Id\"\n  };\n  let categoryId = arguments.length > 1 ? arguments[1] : undefined;\n  let countOfRecords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n  return async dispatch => {\n    dispatch(wareReducer.actions.GET_DISCOUNT_WARES());\n    try {\n      const graphqlQuery = {\n        \"query\": `\n                query getdware{\n                  ware{\n                    getDiscountWares(settings: {\n                      categoryId: ${categoryId !== null && categoryId !== void 0 ? categoryId : \"null\"},\n                      countOfRecords: ${countOfRecords},\n                      sortParam: {\n                        isReverse: ${sortBy === null || sortBy === void 0 ? void 0 : sortBy.isReverse},\n                        value: \"${sortBy === null || sortBy === void 0 ? void 0 : sortBy.value}\"\n                      }\n                    }){\n                      errors\n                      statusCode\n                      wares{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n      };\n      let response = await axios({\n        url: GraphQlEndpoint,\n        method: 'post',\n        withCredentials: true,\n        headers: {\n          \"content-type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n        },\n        data: graphqlQuery\n      });\n      let r = response.data.data.ware.getDiscountWares;\n      if (r.statusCode === 200) {\n        dispatch(wareReducer.actions.GET_DISCOUNT_WARES_SUCCESS(r.wares));\n      } else {\n        dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(r.errors));\n      }\n    } catch (e) {\n      dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(e));\n      console.log(e);\n    }\n  };\n};\nexport const fetch_all_wares = function () {\n  let sortBy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isReverse: false,\n    value: \"Id\"\n  };\n  let categoryId = arguments.length > 1 ? arguments[1] : undefined;\n  let countOfRecords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n  return async dispatch => {\n    dispatch(wareReducer.actions.GET_WARES());\n    try {\n      const graphqlQuery = {\n        \"query\": `\n                query getaware{\n                  ware{\n                    getAllWares(settings: {\n                      categoryId: ${categoryId !== null && categoryId !== void 0 ? categoryId : \"null\"},\n                      countOfRecords: ${countOfRecords},\n                      sortParam: {\n                        isReverse: ${sortBy === null || sortBy === void 0 ? void 0 : sortBy.isReverse},\n                        value: \"${sortBy === null || sortBy === void 0 ? void 0 : sortBy.value}\"\n                      }\n                    }){\n                      errors\n                      statusCode\n                      wares{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n      };\n      let response = await axios({\n        url: GraphQlEndpoint,\n        method: 'post',\n        withCredentials: true,\n        headers: {\n          \"content-type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n        },\n        data: graphqlQuery\n      });\n      let r = response.data.data.ware.getAllWares;\n      if (r.statusCode === 200) {\n        dispatch(wareReducer.actions.GET_WARES_SUCCESS(r.wares));\n      } else {\n        dispatch(wareReducer.actions.GET_WARES_ERROR(r.errors));\n      }\n    } catch (e) {\n      dispatch(wareReducer.actions.GET_WARES_ERROR(e));\n      console.log(e);\n    }\n  };\n};\nexport const fetch_ware_by_id = id => async dispatch => {\n  dispatch(wareReducer.actions.GET_WARE_BY_ID());\n  try {\n    const graphqlQuery = {\n      \"query\": `\n                query getwarebi{\n                  ware{\n                    getWareById(wareId: ${id}){\n                      errors\n                      statusCode\n                      ware{\n                        id\n                        name\n                        brandId\n                        categoryId\n                        description\n                        sizes\n                        price\n                        oldPrice\n                        isDiscount\n                        countInStorage\n                      }\n                    }\n                  }\n                }\n            `\n    };\n    let response = await axios({\n      url: GraphQlEndpoint,\n      method: 'post',\n      withCredentials: true,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`\n      },\n      data: graphqlQuery\n    });\n    let r = response.data.data.ware.getWareById;\n    if (r.statusCode === 200) {\n      dispatch(wareReducer.actions.GET_WARE_BY_ID_SUCCESS(r.ware));\n    } else {\n      dispatch(wareReducer.actions.GET_WARE_BY_ID_ERROR(r.errors));\n    }\n  } catch (e) {\n    dispatch(wareReducer.actions.GET_WARE_BY_ID_ERROR(e));\n    console.log(e);\n  }\n};","map":{"version":3,"names":["wareReducer","axios","GraphQlEndpoint","fetch_discount_wares","sortBy","isReverse","value","categoryId","countOfRecords","dispatch","actions","GET_DISCOUNT_WARES","graphqlQuery","response","url","method","withCredentials","headers","localStorage","getItem","data","r","ware","getDiscountWares","statusCode","GET_DISCOUNT_WARES_SUCCESS","wares","GET_DISCOUNT_WARES_ERROR","errors","e","console","log","fetch_all_wares","GET_WARES","getAllWares","GET_WARES_SUCCESS","GET_WARES_ERROR","fetch_ware_by_id","id","GET_WARE_BY_ID","getWareById","GET_WARE_BY_ID_SUCCESS","GET_WARE_BY_ID_ERROR"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/src/redux/action_creators/ware_action_creator.ts"],"sourcesContent":["import {AppDispatch} from \"../store\";\r\nimport {wareReducer} from \"../reducers/wareReducer\";\r\nimport axios from \"axios\";\r\nimport {GraphQlEndpoint} from \"../../global_variables\";\r\nimport {authorizationReducer} from \"../reducers/authorizationReducer\";\r\n\r\ninterface ISortType{\r\n    value: string,\r\n    isReverse: boolean\r\n}\r\nexport const fetch_discount_wares = (sortBy: ISortType | null = {isReverse: false, value: \"Id\"}, categoryId?: number | null, countOfRecords: number | null = 20) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_DISCOUNT_WARES())\r\n    try{\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getdware{\r\n                  ware{\r\n                    getDiscountWares(settings: {\r\n                      categoryId: ${categoryId ?? \"null\"},\r\n                      countOfRecords: ${countOfRecords},\r\n                      sortParam: {\r\n                        isReverse: ${sortBy?.isReverse},\r\n                        value: \"${sortBy?.value}\"\r\n                      }\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getDiscountWares\r\n        if (r.statusCode === 200){\r\n            dispatch(wareReducer.actions.GET_DISCOUNT_WARES_SUCCESS(r.wares))\r\n        }else{\r\n            dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    }\r\n    catch (e){\r\n        dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const fetch_all_wares = (sortBy: ISortType | null = {isReverse: false, value: \"Id\"}, categoryId?: number | null, countOfRecords: number | null = 20) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARES())\r\n    try{\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getaware{\r\n                  ware{\r\n                    getAllWares(settings: {\r\n                      categoryId: ${categoryId ?? \"null\"},\r\n                      countOfRecords: ${countOfRecords},\r\n                      sortParam: {\r\n                        isReverse: ${sortBy?.isReverse},\r\n                        value: \"${sortBy?.value}\"\r\n                      }\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWares\r\n        if (r.statusCode === 200){\r\n            dispatch(wareReducer.actions.GET_WARES_SUCCESS(r.wares))\r\n        }else{\r\n            dispatch(wareReducer.actions.GET_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    }\r\n    catch (e){\r\n        dispatch(wareReducer.actions.GET_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const fetch_ware_by_id = (id: number) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARE_BY_ID())\r\n    try{\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getwarebi{\r\n                  ware{\r\n                    getWareById(wareId: ${id}){\r\n                      errors\r\n                      statusCode\r\n                      ware{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getWareById\r\n        if (r.statusCode === 200){\r\n            dispatch(wareReducer.actions.GET_WARE_BY_ID_SUCCESS(r.ware))\r\n        }else{\r\n            dispatch(wareReducer.actions.GET_WARE_BY_ID_ERROR(r.errors))\r\n        }\r\n\r\n    }\r\n    catch (e){\r\n        dispatch(wareReducer.actions.GET_WARE_BY_ID_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}