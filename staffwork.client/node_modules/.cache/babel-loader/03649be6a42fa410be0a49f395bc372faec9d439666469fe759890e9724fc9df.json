{"ast":null,"code":"import Node from './Node.js';\nimport { NodeShaderStage } from './constants.js';\nclass VaryingNode extends Node {\n  constructor(node) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n    this.node = node;\n    this.name = name;\n  }\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n  getNodeType(builder) {\n    // VaryingNode is auto type\n\n    return this.node.getNodeType(builder);\n  }\n  generate(builder) {\n    const {\n      name,\n      node\n    } = this;\n    const type = this.getNodeType(builder);\n    const nodeVarying = builder.getVaryingFromNode(this, type);\n\n    // this property can be used to check if the varying can be optimized for a var\n    nodeVarying.needsInterpolation ||= builder.shaderStage === 'fragment';\n    if (name !== null) {\n      nodeVarying.name = name;\n    }\n    const propertyName = builder.getPropertyName(nodeVarying, NodeShaderStage.VERTEX);\n\n    // force node run in vertex stage\n    builder.flowNodeFromShaderStage(NodeShaderStage.VERTEX, node, type, propertyName);\n    return builder.getPropertyName(nodeVarying);\n  }\n}\nexport default VaryingNode;","map":{"version":3,"names":["Node","NodeShaderStage","VaryingNode","constructor","node","name","getHash","builder","getNodeType","generate","type","nodeVarying","getVaryingFromNode","needsInterpolation","shaderStage","propertyName","getPropertyName","VERTEX","flowNodeFromShaderStage"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/core/VaryingNode.js"],"sourcesContent":["import Node from './Node.js';\nimport { NodeShaderStage } from './constants.js';\n\nclass VaryingNode extends Node {\n\n\tconstructor( node, name = null ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.name = name;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.name || super.getHash( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\t// VaryingNode is auto type\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { name, node } = this;\n\t\tconst type = this.getNodeType( builder );\n\n\t\tconst nodeVarying = builder.getVaryingFromNode( this, type );\n\n\t\t// this property can be used to check if the varying can be optimized for a var\n\t\tnodeVarying.needsInterpolation ||= builder.shaderStage === 'fragment';\n\n\t\tif ( name !== null ) {\n\n\t\t\tnodeVarying.name = name;\n\n\t\t}\n\n\t\tconst propertyName = builder.getPropertyName( nodeVarying, NodeShaderStage.VERTEX );\n\n\t\t// force node run in vertex stage\n\t\tbuilder.flowNodeFromShaderStage( NodeShaderStage.VERTEX, node, type, propertyName );\n\n\t\treturn builder.getPropertyName( nodeVarying );\n\n\t}\n\n}\n\nexport default VaryingNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAC5B,SAASC,eAAe,QAAQ,gBAAgB;AAEhD,MAAMC,WAAW,SAASF,IAAI,CAAC;EAE9BG,WAAW,CAAEC,IAAI,EAAgB;IAAA,IAAdC,IAAI,uEAAG,IAAI;IAE7B,KAAK,EAAE;IAEP,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAEjB;EAEAC,OAAO,CAAEC,OAAO,EAAG;IAElB,OAAO,IAAI,CAACF,IAAI,IAAI,KAAK,CAACC,OAAO,CAAEC,OAAO,CAAE;EAE7C;EAEAC,WAAW,CAAED,OAAO,EAAG;IAEtB;;IAEA,OAAO,IAAI,CAACH,IAAI,CAACI,WAAW,CAAED,OAAO,CAAE;EAExC;EAEAE,QAAQ,CAAEF,OAAO,EAAG;IAEnB,MAAM;MAAEF,IAAI;MAAED;IAAK,CAAC,GAAG,IAAI;IAC3B,MAAMM,IAAI,GAAG,IAAI,CAACF,WAAW,CAAED,OAAO,CAAE;IAExC,MAAMI,WAAW,GAAGJ,OAAO,CAACK,kBAAkB,CAAE,IAAI,EAAEF,IAAI,CAAE;;IAE5D;IACAC,WAAW,CAACE,kBAAkB,KAAKN,OAAO,CAACO,WAAW,KAAK,UAAU;IAErE,IAAKT,IAAI,KAAK,IAAI,EAAG;MAEpBM,WAAW,CAACN,IAAI,GAAGA,IAAI;IAExB;IAEA,MAAMU,YAAY,GAAGR,OAAO,CAACS,eAAe,CAAEL,WAAW,EAAEV,eAAe,CAACgB,MAAM,CAAE;;IAEnF;IACAV,OAAO,CAACW,uBAAuB,CAAEjB,eAAe,CAACgB,MAAM,EAAEb,IAAI,EAAEM,IAAI,EAAEK,YAAY,CAAE;IAEnF,OAAOR,OAAO,CAACS,eAAe,CAAEL,WAAW,CAAE;EAE9C;AAED;AAEA,eAAeT,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}