{"ast":null,"code":"import { LinearFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping } from '../constants.js';\nimport { FileLoader } from './FileLoader.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Loader } from './Loader.js';\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass DataTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const texture = new DataTexture();\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setPath(this.path);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      const texData = scope.parse(buffer);\n      if (!texData) return;\n      if (texData.image !== undefined) {\n        texture.image = texData.image;\n      } else if (texData.data !== undefined) {\n        texture.image.width = texData.width;\n        texture.image.height = texData.height;\n        texture.image.data = texData.data;\n      }\n      texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n      texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n      texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n      texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n      texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n      if (texData.encoding !== undefined) {\n        texture.encoding = texData.encoding;\n      }\n      if (texData.flipY !== undefined) {\n        texture.flipY = texData.flipY;\n      }\n      if (texData.format !== undefined) {\n        texture.format = texData.format;\n      }\n      if (texData.type !== undefined) {\n        texture.type = texData.type;\n      }\n      if (texData.mipmaps !== undefined) {\n        texture.mipmaps = texData.mipmaps;\n        texture.minFilter = LinearMipmapLinearFilter; // presumably...\n      }\n\n      if (texData.mipmapCount === 1) {\n        texture.minFilter = LinearFilter;\n      }\n      if (texData.generateMipmaps !== undefined) {\n        texture.generateMipmaps = texData.generateMipmaps;\n      }\n      texture.needsUpdate = true;\n      if (onLoad) onLoad(texture, texData);\n    }, onProgress, onError);\n    return texture;\n  }\n}\nexport { DataTextureLoader };","map":{"version":3,"names":["LinearFilter","LinearMipmapLinearFilter","ClampToEdgeWrapping","FileLoader","DataTexture","Loader","DataTextureLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","texture","loader","setResponseType","setRequestHeader","requestHeader","setPath","path","setWithCredentials","withCredentials","buffer","texData","parse","image","undefined","data","width","height","wrapS","wrapT","magFilter","minFilter","anisotropy","encoding","flipY","format","type","mipmaps","mipmapCount","generateMipmaps","needsUpdate"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/loaders/DataTextureLoader.js"],"sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping } from '../constants.js';\nimport { FileLoader } from './FileLoader.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Loader } from './Loader.js';\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass DataTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tconst texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.encoding !== undefined ) {\n\n\t\t\t\ttexture.encoding = texData.encoding;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\n\nexport { DataTextureLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}