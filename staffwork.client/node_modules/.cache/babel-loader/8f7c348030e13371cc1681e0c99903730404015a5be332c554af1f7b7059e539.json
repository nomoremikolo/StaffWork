{"ast":null,"code":"/**\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n */\n\nclass Cylindrical {\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let theta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.radius = radius; // distance from the origin to a point in the x-z plane\n    this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n    this.y = y; // height above the x-z plane\n\n    return this;\n  }\n  set(radius, theta, y) {\n    this.radius = radius;\n    this.theta = theta;\n    this.y = y;\n    return this;\n  }\n  copy(other) {\n    this.radius = other.radius;\n    this.theta = other.theta;\n    this.y = other.y;\n    return this;\n  }\n  setFromVector3(v) {\n    return this.setFromCartesianCoords(v.x, v.y, v.z);\n  }\n  setFromCartesianCoords(x, y, z) {\n    this.radius = Math.sqrt(x * x + z * z);\n    this.theta = Math.atan2(x, z);\n    this.y = y;\n    return this;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n}\nexport { Cylindrical };","map":{"version":3,"names":["Cylindrical","constructor","radius","theta","y","set","copy","other","setFromVector3","v","setFromCartesianCoords","x","z","Math","sqrt","atan2","clone"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/math/Cylindrical.js"],"sourcesContent":["/**\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n */\n\nclass Cylindrical {\n\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = y; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Cylindrical };\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,WAAW,CAAC;EAEjBC,WAAW,GAAiC;IAAA,IAA/BC,MAAM,uEAAG,CAAC;IAAA,IAAEC,KAAK,uEAAG,CAAC;IAAA,IAAEC,CAAC,uEAAG,CAAC;IAExC,IAAI,CAACF,MAAM,GAAGA,MAAM,CAAC,CAAC;IACtB,IAAI,CAACC,KAAK,GAAGA,KAAK,CAAC,CAAC;IACpB,IAAI,CAACC,CAAC,GAAGA,CAAC,CAAC,CAAC;;IAEZ,OAAO,IAAI;EAEZ;EAEAC,GAAG,CAAEH,MAAM,EAAEC,KAAK,EAAEC,CAAC,EAAG;IAEvB,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,CAAC,GAAGA,CAAC;IAEV,OAAO,IAAI;EAEZ;EAEAE,IAAI,CAAEC,KAAK,EAAG;IAEb,IAAI,CAACL,MAAM,GAAGK,KAAK,CAACL,MAAM;IAC1B,IAAI,CAACC,KAAK,GAAGI,KAAK,CAACJ,KAAK;IACxB,IAAI,CAACC,CAAC,GAAGG,KAAK,CAACH,CAAC;IAEhB,OAAO,IAAI;EAEZ;EAEAI,cAAc,CAAEC,CAAC,EAAG;IAEnB,OAAO,IAAI,CAACC,sBAAsB,CAAED,CAAC,CAACE,CAAC,EAAEF,CAAC,CAACL,CAAC,EAAEK,CAAC,CAACG,CAAC,CAAE;EAEpD;EAEAF,sBAAsB,CAAEC,CAAC,EAAEP,CAAC,EAAEQ,CAAC,EAAG;IAEjC,IAAI,CAACV,MAAM,GAAGW,IAAI,CAACC,IAAI,CAAEH,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAE;IACxC,IAAI,CAACT,KAAK,GAAGU,IAAI,CAACE,KAAK,CAAEJ,CAAC,EAAEC,CAAC,CAAE;IAC/B,IAAI,CAACR,CAAC,GAAGA,CAAC;IAEV,OAAO,IAAI;EAEZ;EAEAY,KAAK,GAAG;IAEP,OAAO,IAAI,IAAI,CAACf,WAAW,EAAE,CAACK,IAAI,CAAE,IAAI,CAAE;EAE3C;AAED;AAEA,SAASN,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}