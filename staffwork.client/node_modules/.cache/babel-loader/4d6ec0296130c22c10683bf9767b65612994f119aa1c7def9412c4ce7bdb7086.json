{"ast":null,"code":"import { Line } from './Line.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nconst _start = /*@__PURE__*/new Vector3();\nconst _end = /*@__PURE__*/new Vector3();\nclass LineSegments extends Line {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.isLineSegments = true;\n    this.type = 'LineSegments';\n  }\n  computeLineDistances() {\n    const geometry = this.geometry;\n\n    // we assume non-indexed geometry\n\n    if (geometry.index === null) {\n      const positionAttribute = geometry.attributes.position;\n      const lineDistances = [];\n      for (let i = 0, l = positionAttribute.count; i < l; i += 2) {\n        _start.fromBufferAttribute(positionAttribute, i);\n        _end.fromBufferAttribute(positionAttribute, i + 1);\n        lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n        lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\n      }\n      geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n    } else {\n      console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n    }\n    return this;\n  }\n}\nexport { LineSegments };","map":{"version":3,"names":["Line","Vector3","Float32BufferAttribute","_start","_end","LineSegments","constructor","geometry","material","isLineSegments","type","computeLineDistances","index","positionAttribute","attributes","position","lineDistances","i","l","count","fromBufferAttribute","distanceTo","setAttribute","console","warn"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/objects/LineSegments.js"],"sourcesContent":["import { Line } from './Line.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\nclass LineSegments extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineSegments = true;\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [];\n\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { LineSegments };\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;AAChC,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,sBAAsB,QAAQ,4BAA4B;AAEnE,MAAMC,MAAM,GAAG,aAAc,IAAIF,OAAO,EAAE;AAC1C,MAAMG,IAAI,GAAG,aAAc,IAAIH,OAAO,EAAE;AAExC,MAAMI,YAAY,SAASL,IAAI,CAAC;EAE/BM,WAAW,CAAEC,QAAQ,EAAEC,QAAQ,EAAG;IAEjC,KAAK,CAAED,QAAQ,EAAEC,QAAQ,CAAE;IAE3B,IAAI,CAACC,cAAc,GAAG,IAAI;IAE1B,IAAI,CAACC,IAAI,GAAG,cAAc;EAE3B;EAEAC,oBAAoB,GAAG;IAEtB,MAAMJ,QAAQ,GAAG,IAAI,CAACA,QAAQ;;IAE9B;;IAEA,IAAKA,QAAQ,CAACK,KAAK,KAAK,IAAI,EAAG;MAE9B,MAAMC,iBAAiB,GAAGN,QAAQ,CAACO,UAAU,CAACC,QAAQ;MACtD,MAAMC,aAAa,GAAG,EAAE;MAExB,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGL,iBAAiB,CAACM,KAAK,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAG;QAE7Dd,MAAM,CAACiB,mBAAmB,CAAEP,iBAAiB,EAAEI,CAAC,CAAE;QAClDb,IAAI,CAACgB,mBAAmB,CAAEP,iBAAiB,EAAEI,CAAC,GAAG,CAAC,CAAE;QAEpDD,aAAa,CAAEC,CAAC,CAAE,GAAKA,CAAC,KAAK,CAAC,GAAK,CAAC,GAAGD,aAAa,CAAEC,CAAC,GAAG,CAAC,CAAE;QAC7DD,aAAa,CAAEC,CAAC,GAAG,CAAC,CAAE,GAAGD,aAAa,CAAEC,CAAC,CAAE,GAAGd,MAAM,CAACkB,UAAU,CAAEjB,IAAI,CAAE;MAExE;MAEAG,QAAQ,CAACe,YAAY,CAAE,cAAc,EAAE,IAAIpB,sBAAsB,CAAEc,aAAa,EAAE,CAAC,CAAE,CAAE;IAExF,CAAC,MAAM;MAENO,OAAO,CAACC,IAAI,CAAE,uGAAuG,CAAE;IAExH;IAEA,OAAO,IAAI;EAEZ;AAED;AAEA,SAASnB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}