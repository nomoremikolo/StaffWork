{"ast":null,"code":"import Node from '../core/Node.js';\nimport { float, vec3, add, mul, div, dot, normalize, abs, texture, positionWorld, normalWorld } from '../shadernode/ShaderNodeBaseElements.js';\nclass TriplanarTexturesNode extends Node {\n  constructor(textureXNode) {\n    let textureYNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let textureZNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let scaleNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : float(1);\n    let positionNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : positionWorld;\n    let normalNode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : normalWorld;\n    super('vec4');\n    this.textureXNode = textureXNode;\n    this.textureYNode = textureYNode;\n    this.textureZNode = textureZNode;\n    this.scaleNode = scaleNode;\n    this.positionNode = positionNode;\n    this.normalNode = normalNode;\n  }\n  construct() {\n    const {\n      textureXNode,\n      textureYNode,\n      textureZNode,\n      scaleNode,\n      positionNode,\n      normalNode\n    } = this;\n\n    // Ref: https://github.com/keijiro/StandardTriplanar\n\n    // Blending factor of triplanar mapping\n    let bf = normalize(abs(normalNode));\n    bf = div(bf, dot(bf, vec3(1.0)));\n\n    // Triplanar mapping\n    const tx = mul(positionNode.yz, scaleNode);\n    const ty = mul(positionNode.zx, scaleNode);\n    const tz = mul(positionNode.xy, scaleNode);\n\n    // Base color\n    const textureX = textureXNode.value;\n    const textureY = textureYNode !== null ? textureYNode.value : textureX;\n    const textureZ = textureZNode !== null ? textureZNode.value : textureX;\n    const cx = mul(texture(textureX, tx), bf.x);\n    const cy = mul(texture(textureY, ty), bf.y);\n    const cz = mul(texture(textureZ, tz), bf.z);\n    return add(cx, cy, cz);\n  }\n}\nexport default TriplanarTexturesNode;","map":{"version":3,"names":["Node","float","vec3","add","mul","div","dot","normalize","abs","texture","positionWorld","normalWorld","TriplanarTexturesNode","constructor","textureXNode","textureYNode","textureZNode","scaleNode","positionNode","normalNode","construct","bf","tx","yz","ty","zx","tz","xy","textureX","value","textureY","textureZ","cx","x","cy","y","cz","z"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/utils/TriplanarTexturesNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { float, vec3, add, mul, div, dot, normalize, abs, texture, positionWorld, normalWorld } from '../shadernode/ShaderNodeBaseElements.js';\n\nclass TriplanarTexturesNode extends Node {\n\n\tconstructor( textureXNode, textureYNode = null, textureZNode = null, scaleNode = float( 1 ), positionNode = positionWorld, normalNode = normalWorld ) {\n\n\t\tsuper( 'vec4' );\n\n\t\tthis.textureXNode = textureXNode;\n\t\tthis.textureYNode = textureYNode;\n\t\tthis.textureZNode = textureZNode;\n\n\t\tthis.scaleNode = scaleNode;\n\n\t\tthis.positionNode = positionNode;\n\t\tthis.normalNode = normalNode;\n\n\t}\n\n\tconstruct() {\n\n\t\tconst { textureXNode, textureYNode, textureZNode, scaleNode, positionNode, normalNode } = this;\n\n\t\t// Ref: https://github.com/keijiro/StandardTriplanar\n\n\t\t// Blending factor of triplanar mapping\n\t\tlet bf = normalize( abs( normalNode ) );\n\t\tbf = div( bf, dot( bf, vec3( 1.0 ) ) );\n\n\t\t// Triplanar mapping\n\t\tconst tx = mul( positionNode.yz, scaleNode );\n\t\tconst ty = mul( positionNode.zx, scaleNode );\n\t\tconst tz = mul( positionNode.xy, scaleNode );\n\n\t\t// Base color\n\t\tconst textureX = textureXNode.value;\n\t\tconst textureY = textureYNode !== null ? textureYNode.value : textureX;\n\t\tconst textureZ = textureZNode !== null ? textureZNode.value : textureX;\n\n\t\tconst cx = mul( texture( textureX, tx ), bf.x );\n\t\tconst cy = mul( texture( textureY, ty ), bf.y );\n\t\tconst cz = mul( texture( textureZ, tz ), bf.z );\n\n\t\treturn add( cx, cy, cz );\n\n\t}\n\n}\n\nexport default TriplanarTexturesNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,iBAAiB;AAClC,SAASC,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,SAAS,EAAEC,GAAG,EAAEC,OAAO,EAAEC,aAAa,EAAEC,WAAW,QAAQ,yCAAyC;AAE9I,MAAMC,qBAAqB,SAASZ,IAAI,CAAC;EAExCa,WAAW,CAAEC,YAAY,EAA6H;IAAA,IAA3HC,YAAY,uEAAG,IAAI;IAAA,IAAEC,YAAY,uEAAG,IAAI;IAAA,IAAEC,SAAS,uEAAGhB,KAAK,CAAE,CAAC,CAAE;IAAA,IAAEiB,YAAY,uEAAGR,aAAa;IAAA,IAAES,UAAU,uEAAGR,WAAW;IAElJ,KAAK,CAAE,MAAM,CAAE;IAEf,IAAI,CAACG,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,YAAY,GAAGA,YAAY;IAEhC,IAAI,CAACC,SAAS,GAAGA,SAAS;IAE1B,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,UAAU,GAAGA,UAAU;EAE7B;EAEAC,SAAS,GAAG;IAEX,MAAM;MAAEN,YAAY;MAAEC,YAAY;MAAEC,YAAY;MAAEC,SAAS;MAAEC,YAAY;MAAEC;IAAW,CAAC,GAAG,IAAI;;IAE9F;;IAEA;IACA,IAAIE,EAAE,GAAGd,SAAS,CAAEC,GAAG,CAAEW,UAAU,CAAE,CAAE;IACvCE,EAAE,GAAGhB,GAAG,CAAEgB,EAAE,EAAEf,GAAG,CAAEe,EAAE,EAAEnB,IAAI,CAAE,GAAG,CAAE,CAAE,CAAE;;IAEtC;IACA,MAAMoB,EAAE,GAAGlB,GAAG,CAAEc,YAAY,CAACK,EAAE,EAAEN,SAAS,CAAE;IAC5C,MAAMO,EAAE,GAAGpB,GAAG,CAAEc,YAAY,CAACO,EAAE,EAAER,SAAS,CAAE;IAC5C,MAAMS,EAAE,GAAGtB,GAAG,CAAEc,YAAY,CAACS,EAAE,EAAEV,SAAS,CAAE;;IAE5C;IACA,MAAMW,QAAQ,GAAGd,YAAY,CAACe,KAAK;IACnC,MAAMC,QAAQ,GAAGf,YAAY,KAAK,IAAI,GAAGA,YAAY,CAACc,KAAK,GAAGD,QAAQ;IACtE,MAAMG,QAAQ,GAAGf,YAAY,KAAK,IAAI,GAAGA,YAAY,CAACa,KAAK,GAAGD,QAAQ;IAEtE,MAAMI,EAAE,GAAG5B,GAAG,CAAEK,OAAO,CAAEmB,QAAQ,EAAEN,EAAE,CAAE,EAAED,EAAE,CAACY,CAAC,CAAE;IAC/C,MAAMC,EAAE,GAAG9B,GAAG,CAAEK,OAAO,CAAEqB,QAAQ,EAAEN,EAAE,CAAE,EAAEH,EAAE,CAACc,CAAC,CAAE;IAC/C,MAAMC,EAAE,GAAGhC,GAAG,CAAEK,OAAO,CAAEsB,QAAQ,EAAEL,EAAE,CAAE,EAAEL,EAAE,CAACgB,CAAC,CAAE;IAE/C,OAAOlC,GAAG,CAAE6B,EAAE,EAAEE,EAAE,EAAEE,EAAE,CAAE;EAEzB;AAED;AAEA,eAAexB,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}