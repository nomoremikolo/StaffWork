{"ast":null,"code":"import * as MathUtils from './MathUtils.js';\nclass Quaternion {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    this.isQuaternion = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n    // fuzz-free, array-based Quaternion SLERP operation\n\n    let x0 = src0[srcOffset0 + 0],\n      y0 = src0[srcOffset0 + 1],\n      z0 = src0[srcOffset0 + 2],\n      w0 = src0[srcOffset0 + 3];\n    const x1 = src1[srcOffset1 + 0],\n      y1 = src1[srcOffset1 + 1],\n      z1 = src1[srcOffset1 + 2],\n      w1 = src1[srcOffset1 + 3];\n    if (t === 0) {\n      dst[dstOffset + 0] = x0;\n      dst[dstOffset + 1] = y0;\n      dst[dstOffset + 2] = z0;\n      dst[dstOffset + 3] = w0;\n      return;\n    }\n    if (t === 1) {\n      dst[dstOffset + 0] = x1;\n      dst[dstOffset + 1] = y1;\n      dst[dstOffset + 2] = z1;\n      dst[dstOffset + 3] = w1;\n      return;\n    }\n    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n      let s = 1 - t;\n      const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n        dir = cos >= 0 ? 1 : -1,\n        sqrSin = 1 - cos * cos;\n\n      // Skip the Slerp for tiny steps to avoid numeric problems:\n      if (sqrSin > Number.EPSILON) {\n        const sin = Math.sqrt(sqrSin),\n          len = Math.atan2(sin, cos * dir);\n        s = Math.sin(s * len) / sin;\n        t = Math.sin(t * len) / sin;\n      }\n      const tDir = t * dir;\n      x0 = x0 * s + x1 * tDir;\n      y0 = y0 * s + y1 * tDir;\n      z0 = z0 * s + z1 * tDir;\n      w0 = w0 * s + w1 * tDir;\n\n      // Normalize in case we just did a lerp:\n      if (s === 1 - t) {\n        const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n        x0 *= f;\n        y0 *= f;\n        z0 *= f;\n        w0 *= f;\n      }\n    }\n    dst[dstOffset] = x0;\n    dst[dstOffset + 1] = y0;\n    dst[dstOffset + 2] = z0;\n    dst[dstOffset + 3] = w0;\n  }\n  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n    const x0 = src0[srcOffset0];\n    const y0 = src0[srcOffset0 + 1];\n    const z0 = src0[srcOffset0 + 2];\n    const w0 = src0[srcOffset0 + 3];\n    const x1 = src1[srcOffset1];\n    const y1 = src1[srcOffset1 + 1];\n    const z1 = src1[srcOffset1 + 2];\n    const w1 = src1[srcOffset1 + 3];\n    dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n    dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n    dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n    dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n    return dst;\n  }\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    this._x = value;\n    this._onChangeCallback();\n  }\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    this._y = value;\n    this._onChangeCallback();\n  }\n  get z() {\n    return this._z;\n  }\n  set z(value) {\n    this._z = value;\n    this._onChangeCallback();\n  }\n  get w() {\n    return this._w;\n  }\n  set w(value) {\n    this._w = value;\n    this._onChangeCallback();\n  }\n  set(x, y, z, w) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n    this._onChangeCallback();\n    return this;\n  }\n  clone() {\n    return new this.constructor(this._x, this._y, this._z, this._w);\n  }\n  copy(quaternion) {\n    this._x = quaternion.x;\n    this._y = quaternion.y;\n    this._z = quaternion.z;\n    this._w = quaternion.w;\n    this._onChangeCallback();\n    return this;\n  }\n  setFromEuler(euler, update) {\n    const x = euler._x,\n      y = euler._y,\n      z = euler._z,\n      order = euler._order;\n\n    // http://www.mathworks.com/matlabcentral/fileexchange/\n    // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //\tcontent/SpinCalc.m\n\n    const cos = Math.cos;\n    const sin = Math.sin;\n    const c1 = cos(x / 2);\n    const c2 = cos(y / 2);\n    const c3 = cos(z / 2);\n    const s1 = sin(x / 2);\n    const s2 = sin(y / 2);\n    const s3 = sin(z / 2);\n    switch (order) {\n      case 'XYZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n      case 'YXZ':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n      case 'ZXY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n      case 'ZYX':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n      case 'YZX':\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        break;\n      case 'XZY':\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        break;\n      default:\n        console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n    }\n    if (update !== false) this._onChangeCallback();\n    return this;\n  }\n  setFromAxisAngle(axis, angle) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    // assumes axis is normalized\n\n    const halfAngle = angle / 2,\n      s = Math.sin(halfAngle);\n    this._x = axis.x * s;\n    this._y = axis.y * s;\n    this._z = axis.z * s;\n    this._w = Math.cos(halfAngle);\n    this._onChangeCallback();\n    return this;\n  }\n  setFromRotationMatrix(m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n    const te = m.elements,\n      m11 = te[0],\n      m12 = te[4],\n      m13 = te[8],\n      m21 = te[1],\n      m22 = te[5],\n      m23 = te[9],\n      m31 = te[2],\n      m32 = te[6],\n      m33 = te[10],\n      trace = m11 + m22 + m33;\n    if (trace > 0) {\n      const s = 0.5 / Math.sqrt(trace + 1.0);\n      this._w = 0.25 / s;\n      this._x = (m32 - m23) * s;\n      this._y = (m13 - m31) * s;\n      this._z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      this._w = (m32 - m23) / s;\n      this._x = 0.25 * s;\n      this._y = (m12 + m21) / s;\n      this._z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      this._w = (m13 - m31) / s;\n      this._x = (m12 + m21) / s;\n      this._y = 0.25 * s;\n      this._z = (m23 + m32) / s;\n    } else {\n      const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      this._w = (m21 - m12) / s;\n      this._x = (m13 + m31) / s;\n      this._y = (m23 + m32) / s;\n      this._z = 0.25 * s;\n    }\n    this._onChangeCallback();\n    return this;\n  }\n  setFromUnitVectors(vFrom, vTo) {\n    // assumes direction vectors vFrom and vTo are normalized\n\n    let r = vFrom.dot(vTo) + 1;\n    if (r < Number.EPSILON) {\n      // vFrom and vTo point in opposite directions\n\n      r = 0;\n      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n        this._x = -vFrom.y;\n        this._y = vFrom.x;\n        this._z = 0;\n        this._w = r;\n      } else {\n        this._x = 0;\n        this._y = -vFrom.z;\n        this._z = vFrom.y;\n        this._w = r;\n      }\n    } else {\n      // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n      this._w = r;\n    }\n    return this.normalize();\n  }\n  angleTo(q) {\n    return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n  }\n  rotateTowards(q, step) {\n    const angle = this.angleTo(q);\n    if (angle === 0) return this;\n    const t = Math.min(1, step / angle);\n    this.slerp(q, t);\n    return this;\n  }\n  identity() {\n    return this.set(0, 0, 0, 1);\n  }\n  invert() {\n    // quaternion is assumed to have unit length\n\n    return this.conjugate();\n  }\n  conjugate() {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n    this._onChangeCallback();\n    return this;\n  }\n  dot(v) {\n    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n  }\n  lengthSq() {\n    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n  }\n  length() {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  }\n  normalize() {\n    let l = this.length();\n    if (l === 0) {\n      this._x = 0;\n      this._y = 0;\n      this._z = 0;\n      this._w = 1;\n    } else {\n      l = 1 / l;\n      this._x = this._x * l;\n      this._y = this._y * l;\n      this._z = this._z * l;\n      this._w = this._w * l;\n    }\n    this._onChangeCallback();\n    return this;\n  }\n  multiply(q) {\n    return this.multiplyQuaternions(this, q);\n  }\n  premultiply(q) {\n    return this.multiplyQuaternions(q, this);\n  }\n  multiplyQuaternions(a, b) {\n    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n    const qax = a._x,\n      qay = a._y,\n      qaz = a._z,\n      qaw = a._w;\n    const qbx = b._x,\n      qby = b._y,\n      qbz = b._z,\n      qbw = b._w;\n    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n    this._onChangeCallback();\n    return this;\n  }\n  slerp(qb, t) {\n    if (t === 0) return this;\n    if (t === 1) return this.copy(qb);\n    const x = this._x,\n      y = this._y,\n      z = this._z,\n      w = this._w;\n\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n    if (cosHalfTheta < 0) {\n      this._w = -qb._w;\n      this._x = -qb._x;\n      this._y = -qb._y;\n      this._z = -qb._z;\n      cosHalfTheta = -cosHalfTheta;\n    } else {\n      this.copy(qb);\n    }\n    if (cosHalfTheta >= 1.0) {\n      this._w = w;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      return this;\n    }\n    const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n    if (sqrSinHalfTheta <= Number.EPSILON) {\n      const s = 1 - t;\n      this._w = s * w + t * this._w;\n      this._x = s * x + t * this._x;\n      this._y = s * y + t * this._y;\n      this._z = s * z + t * this._z;\n      this.normalize();\n      this._onChangeCallback();\n      return this;\n    }\n    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n      ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n    this._w = w * ratioA + this._w * ratioB;\n    this._x = x * ratioA + this._x * ratioB;\n    this._y = y * ratioA + this._y * ratioB;\n    this._z = z * ratioA + this._z * ratioB;\n    this._onChangeCallback();\n    return this;\n  }\n  slerpQuaternions(qa, qb, t) {\n    return this.copy(qa).slerp(qb, t);\n  }\n  random() {\n    // Derived from http://planning.cs.uiuc.edu/node198.html\n    // Note, this source uses w, x, y, z ordering,\n    // so we swap the order below.\n\n    const u1 = Math.random();\n    const sqrt1u1 = Math.sqrt(1 - u1);\n    const sqrtu1 = Math.sqrt(u1);\n    const u2 = 2 * Math.PI * Math.random();\n    const u3 = 2 * Math.PI * Math.random();\n    return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));\n  }\n  equals(quaternion) {\n    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n  }\n  fromArray(array) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n    this._onChangeCallback();\n    return this;\n  }\n  toArray() {\n    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._w;\n    return array;\n  }\n  fromBufferAttribute(attribute, index) {\n    this._x = attribute.getX(index);\n    this._y = attribute.getY(index);\n    this._z = attribute.getZ(index);\n    this._w = attribute.getW(index);\n    return this;\n  }\n  _onChange(callback) {\n    this._onChangeCallback = callback;\n    return this;\n  }\n  _onChangeCallback() {}\n  *[Symbol.iterator]() {\n    yield this._x;\n    yield this._y;\n    yield this._z;\n    yield this._w;\n  }\n}\nexport { Quaternion };","map":{"version":3,"names":["MathUtils","Quaternion","constructor","x","y","z","w","isQuaternion","_x","_y","_z","_w","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","t","x0","y0","z0","w0","x1","y1","z1","w1","s","cos","dir","sqrSin","Number","EPSILON","sin","Math","sqrt","len","atan2","tDir","f","multiplyQuaternionsFlat","value","_onChangeCallback","set","clone","copy","quaternion","setFromEuler","euler","update","order","_order","c1","c2","c3","s1","s2","s3","console","warn","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","m","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","r","dot","abs","normalize","angleTo","q","acos","clamp","rotateTowards","step","min","slerp","identity","invert","conjugate","v","lengthSq","length","l","multiply","multiplyQuaternions","premultiply","a","b","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","slerpQuaternions","qa","random","u1","sqrt1u1","sqrtu1","u2","PI","u3","equals","fromArray","array","offset","toArray","fromBufferAttribute","attribute","index","getX","getY","getZ","getW","_onChange","callback","Symbol","iterator"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/src/math/Quaternion.js"],"sourcesContent":["import * as MathUtils from './MathUtils.js';\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis.isQuaternion = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\trandom() {\n\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t// Note, this source uses w, x, y, z ordering,\n\t\t// so we swap the order below.\n\n\t\tconst u1 = Math.random();\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\n\t\tconst sqrtu1 = Math.sqrt( u1 );\n\n\t\tconst u2 = 2 * Math.PI * Math.random();\n\n\t\tconst u3 = 2 * Math.PI * Math.random();\n\n\t\treturn this.set(\n\t\t\tsqrt1u1 * Math.cos( u2 ),\n\t\t\tsqrtu1 * Math.sin( u3 ),\n\t\t\tsqrtu1 * Math.cos( u3 ),\n\t\t\tsqrt1u1 * Math.sin( u2 ),\n\t\t);\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._w;\n\n\t}\n\n}\n\nexport { Quaternion };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}