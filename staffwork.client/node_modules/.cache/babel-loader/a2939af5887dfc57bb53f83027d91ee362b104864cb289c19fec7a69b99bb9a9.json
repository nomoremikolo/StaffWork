{"ast":null,"code":"import Node from '../core/Node.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MaterialReferenceNode from './MaterialReferenceNode.js';\nimport TextureNode from './TextureNode.js';\nimport SplitNode from '../utils/SplitNode.js';\nclass MaterialNode extends Node {\n  static ALPHA_TEST = 'alphaTest';\n  static COLOR = 'color';\n  static OPACITY = 'opacity';\n  static ROUGHNESS = 'roughness';\n  static METALNESS = 'metalness';\n  static EMISSIVE = 'emissive';\n  static ROTATION = 'rotation';\n  constructor() {\n    let scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MaterialNode.COLOR;\n    super();\n    this.scope = scope;\n  }\n  getNodeType(builder) {\n    const scope = this.scope;\n    const material = builder.context.material;\n    if (scope === MaterialNode.COLOR) {\n      return material.map !== null ? 'vec4' : 'vec3';\n    } else if (scope === MaterialNode.OPACITY || scope === MaterialNode.ROTATION) {\n      return 'float';\n    } else if (scope === MaterialNode.EMISSIVE) {\n      return 'vec3';\n    } else if (scope === MaterialNode.ROUGHNESS || scope === MaterialNode.METALNESS) {\n      return 'float';\n    }\n  }\n  generate(builder, output) {\n    const material = builder.context.material;\n    const scope = this.scope;\n    let node = null;\n    if (scope === MaterialNode.ALPHA_TEST) {\n      node = new MaterialReferenceNode('alphaTest', 'float');\n    } else if (scope === MaterialNode.COLOR) {\n      const colorNode = new MaterialReferenceNode('color', 'color');\n      if (material.map?.isTexture === true) {\n        //new MaterialReferenceNode( 'map', 'texture' )\n        const map = new TextureNode(material.map);\n        node = new OperatorNode('*', colorNode, map);\n      } else {\n        node = colorNode;\n      }\n    } else if (scope === MaterialNode.OPACITY) {\n      const opacityNode = new MaterialReferenceNode('opacity', 'float');\n      if (material.alphaMap?.isTexture === true) {\n        node = new OperatorNode('*', opacityNode, new MaterialReferenceNode('alphaMap', 'texture'));\n      } else {\n        node = opacityNode;\n      }\n    } else if (scope === MaterialNode.ROUGHNESS) {\n      const roughnessNode = new MaterialReferenceNode('roughness', 'float');\n      if (material.roughnessMap?.isTexture === true) {\n        node = new OperatorNode('*', roughnessNode, new SplitNode(new TextureNode(material.roughnessMap), 'g'));\n      } else {\n        node = roughnessNode;\n      }\n    } else if (scope === MaterialNode.METALNESS) {\n      const metalnessNode = new MaterialReferenceNode('metalness', 'float');\n      if (material.metalnessMap?.isTexture === true) {\n        node = new OperatorNode('*', metalnessNode, new SplitNode(new TextureNode(material.metalnessMap), 'b'));\n      } else {\n        node = metalnessNode;\n      }\n    } else if (scope === MaterialNode.EMISSIVE) {\n      const emissiveNode = new MaterialReferenceNode('emissive', 'color');\n      if (material.emissiveMap?.isTexture === true) {\n        node = new OperatorNode('*', emissiveNode, new TextureNode(material.emissiveMap));\n      } else {\n        node = emissiveNode;\n      }\n    } else if (scope === MaterialNode.ROTATION) {\n      node = new MaterialReferenceNode('rotation', 'float');\n    } else {\n      const outputType = this.getNodeType(builder);\n      node = new MaterialReferenceNode(scope, outputType);\n    }\n    return node.build(builder, output);\n  }\n}\nexport default MaterialNode;","map":{"version":3,"names":["Node","OperatorNode","MaterialReferenceNode","TextureNode","SplitNode","MaterialNode","ALPHA_TEST","COLOR","OPACITY","ROUGHNESS","METALNESS","EMISSIVE","ROTATION","constructor","scope","getNodeType","builder","material","context","map","generate","output","node","colorNode","isTexture","opacityNode","alphaMap","roughnessNode","roughnessMap","metalnessNode","metalnessMap","emissiveNode","emissiveMap","outputType","build"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/accessors/MaterialNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MaterialReferenceNode from './MaterialReferenceNode.js';\nimport TextureNode from './TextureNode.js';\nimport SplitNode from '../utils/SplitNode.js';\n\nclass MaterialNode extends Node {\n\n\tstatic ALPHA_TEST = 'alphaTest';\n\tstatic COLOR = 'color';\n\tstatic OPACITY = 'opacity';\n\tstatic ROUGHNESS = 'roughness';\n\tstatic METALNESS = 'metalness';\n\tstatic EMISSIVE = 'emissive';\n\tstatic ROTATION = 'rotation';\n\n\tconstructor( scope = MaterialNode.COLOR ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst scope = this.scope;\n\t\tconst material = builder.context.material;\n\n\t\tif ( scope === MaterialNode.COLOR ) {\n\n\t\t\treturn material.map !== null ? 'vec4' : 'vec3';\n\n\t\t} else if ( scope === MaterialNode.OPACITY || scope === MaterialNode.ROTATION ) {\n\n\t\t\treturn 'float';\n\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\n\n\t\t\treturn 'vec3';\n\n\t\t} else if ( scope === MaterialNode.ROUGHNESS || scope === MaterialNode.METALNESS ) {\n\n\t\t\treturn 'float';\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst material = builder.context.material;\n\t\tconst scope = this.scope;\n\n\t\tlet node = null;\n\n\t\tif ( scope === MaterialNode.ALPHA_TEST ) {\n\n\t\t\tnode = new MaterialReferenceNode( 'alphaTest', 'float' );\n\n\t\t} else if ( scope === MaterialNode.COLOR ) {\n\n\t\t\tconst colorNode = new MaterialReferenceNode( 'color', 'color' );\n\n\t\t\tif ( material.map?.isTexture === true ) {\n\n\t\t\t\t//new MaterialReferenceNode( 'map', 'texture' )\n\t\t\t\tconst map = new TextureNode( material.map );\n\n\t\t\t\tnode = new OperatorNode( '*', colorNode, map );\n\n\t\t\t} else {\n\n\t\t\t\tnode = colorNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\n\n\t\t\tconst opacityNode = new MaterialReferenceNode( 'opacity', 'float' );\n\n\t\t\tif ( material.alphaMap?.isTexture === true ) {\n\n\t\t\t\tnode = new OperatorNode( '*', opacityNode, new MaterialReferenceNode( 'alphaMap', 'texture' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = opacityNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) {\n\n\t\t\tconst roughnessNode = new MaterialReferenceNode( 'roughness', 'float' );\n\n\t\t\tif ( material.roughnessMap?.isTexture === true ) {\n\n\t\t\t\tnode = new OperatorNode( '*', roughnessNode, new SplitNode( new TextureNode( material.roughnessMap ), 'g' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = roughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\n\n\t\t\tconst metalnessNode = new MaterialReferenceNode( 'metalness', 'float' );\n\n\t\t\tif ( material.metalnessMap?.isTexture === true ) {\n\n\t\t\t\tnode = new OperatorNode( '*', metalnessNode, new SplitNode( new TextureNode( material.metalnessMap ), 'b' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = metalnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\n\n\t\t\tconst emissiveNode = new MaterialReferenceNode( 'emissive', 'color' );\n\n\t\t\tif ( material.emissiveMap?.isTexture === true ) {\n\n\t\t\t\tnode = new OperatorNode( '*', emissiveNode, new TextureNode( material.emissiveMap ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = emissiveNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.ROTATION ) {\n\n\t\t\tnode = new MaterialReferenceNode( 'rotation', 'float' );\n\n\t\t} else {\n\n\t\t\tconst outputType = this.getNodeType( builder );\n\n\t\t\tnode = new MaterialReferenceNode( scope, outputType );\n\n\t\t}\n\n\t\treturn node.build( builder, output );\n\n\t}\n\n}\n\nexport default MaterialNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}