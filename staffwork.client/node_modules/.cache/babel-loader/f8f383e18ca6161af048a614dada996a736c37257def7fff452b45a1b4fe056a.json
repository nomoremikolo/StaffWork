{"ast":null,"code":"import TempNode from '../core/Node.js';\nimport { ShaderNode, EPSILON, vec3, sub, mul, div, cond, lessThan, equal, max } from '../shadernode/ShaderNodeBaseElements.js';\nexport const BurnNode = new ShaderNode(_ref => {\n  let {\n    base,\n    blend\n  } = _ref;\n  const fn = c => cond(lessThan(blend[c], EPSILON), blend[c], max(sub(1.0, div(sub(1.0, base[c]), blend[c])), 0));\n  return vec3(fn('x'), fn('y'), fn('z'));\n});\nexport const DodgeNode = new ShaderNode(_ref2 => {\n  let {\n    base,\n    blend\n  } = _ref2;\n  const fn = c => cond(equal(blend[c], 1.0), blend[c], max(div(base[c], sub(1.0, blend[c])), 0));\n  return vec3(fn('x'), fn('y'), fn('z'));\n});\nexport const ScreenNode = new ShaderNode(_ref3 => {\n  let {\n    base,\n    blend\n  } = _ref3;\n  const fn = c => sub(1.0, mul(sub(1.0, base[c]), sub(1.0, blend[c])));\n  return vec3(fn('x'), fn('y'), fn('z'));\n});\nexport const OverlayNode = new ShaderNode(_ref4 => {\n  let {\n    base,\n    blend\n  } = _ref4;\n  const fn = c => cond(lessThan(base[c], 0.5), mul(2.0, base[c], blend[c]), sub(1.0, mul(sub(1.0, base[c]), sub(1.0, blend[c]))));\n  return vec3(fn('x'), fn('y'), fn('z'));\n});\nclass BlendModeNode extends TempNode {\n  static BURN = 'burn';\n  static DODGE = 'dodge';\n  static SCREEN = 'screen';\n  static OVERLAY = 'overlay';\n  constructor(blendMode, baseNode, blendNode) {\n    super();\n    this.blendMode = blendMode;\n    this.baseNode = baseNode;\n    this.blendNode = blendNode;\n  }\n  construct() {\n    const {\n      blendMode,\n      baseNode,\n      blendNode\n    } = this;\n    const params = {\n      base: baseNode,\n      blend: blendNode\n    };\n    let outputNode = null;\n    if (blendMode === BlendModeNode.BURN) {\n      outputNode = BurnNode.call(params);\n    } else if (blendMode === BlendModeNode.DODGE) {\n      outputNode = DodgeNode.call(params);\n    } else if (blendMode === BlendModeNode.SCREEN) {\n      outputNode = ScreenNode.call(params);\n    } else if (blendMode === BlendModeNode.OVERLAY) {\n      outputNode = OverlayNode.call(params);\n    }\n    return outputNode;\n  }\n}\nexport default BlendModeNode;","map":{"version":3,"names":["TempNode","ShaderNode","EPSILON","vec3","sub","mul","div","cond","lessThan","equal","max","BurnNode","base","blend","fn","c","DodgeNode","ScreenNode","OverlayNode","BlendModeNode","BURN","DODGE","SCREEN","OVERLAY","constructor","blendMode","baseNode","blendNode","construct","params","outputNode","call"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/display/BlendModeNode.js"],"sourcesContent":["import TempNode from '../core/Node.js';\nimport { ShaderNode, EPSILON, vec3, sub, mul, div, cond, lessThan, equal, max } from '../shadernode/ShaderNodeBaseElements.js';\n\nexport const BurnNode = new ShaderNode( ( { base, blend } ) => {\n\n\tconst fn = ( c ) => cond( lessThan( blend[ c ], EPSILON ), blend[ c ], max( sub( 1.0, div( sub( 1.0, base[ c ] ), blend[ c ] ) ), 0 ) );\n\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\n\n} );\n\nexport const DodgeNode = new ShaderNode( ( { base, blend } ) => {\n\n\tconst fn = ( c ) => cond( equal( blend[ c ], 1.0 ), blend[ c ], max( div( base[ c ], sub( 1.0, blend[ c ] ) ), 0 ) );\n\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\n\n} );\n\nexport const ScreenNode = new ShaderNode( ( { base, blend } ) => {\n\n\tconst fn = ( c ) => sub( 1.0, mul( sub( 1.0, base[ c ] ), sub( 1.0, blend[ c ] ) ) );\n\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\n\n} );\n\nexport const OverlayNode = new ShaderNode( ( { base, blend } ) => {\n\n\tconst fn = ( c ) => cond( lessThan( base[ c ], 0.5 ), mul( 2.0, base[ c ], blend[ c ] ), sub( 1.0, mul( sub( 1.0, base[ c ] ), sub( 1.0, blend[ c ] ) ) ) );\n\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\n\n} );\n\nclass BlendModeNode extends TempNode {\n\n\tstatic BURN = 'burn';\n\tstatic DODGE = 'dodge';\n\tstatic SCREEN = 'screen';\n\tstatic OVERLAY = 'overlay';\n\n\tconstructor( blendMode, baseNode, blendNode ) {\n\n\t\tsuper();\n\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.baseNode = baseNode;\n\t\tthis.blendNode = blendNode;\n\n\t}\n\n\tconstruct() {\n\n\t\tconst { blendMode, baseNode, blendNode } = this;\n\t\tconst params = { base: baseNode, blend: blendNode };\n\n\t\tlet outputNode = null;\n\n\t\tif ( blendMode === BlendModeNode.BURN ) {\n\n\t\t\toutputNode = BurnNode.call( params );\n\n\t\t} else if ( blendMode === BlendModeNode.DODGE ) {\n\n\t\t\toutputNode = DodgeNode.call( params );\n\n\t\t} else if ( blendMode === BlendModeNode.SCREEN ) {\n\n\t\t\toutputNode = ScreenNode.call( params );\n\n\t\t} else if ( blendMode === BlendModeNode.OVERLAY ) {\n\n\t\t\toutputNode = OverlayNode.call( params );\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default BlendModeNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}