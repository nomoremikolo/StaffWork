{"ast":null,"code":"import NodeMaterial from './NodeMaterial.js';\nimport { float, vec3, vec4, normalView, add, context, assign, label, mul, invert, mix, texture, uniform, materialRoughness, materialMetalness, materialEmissive } from '../shadernode/ShaderNodeElements.js';\nimport LightsNode from '../lighting/LightsNode.js';\nimport EnvironmentNode from '../lighting/EnvironmentNode.js';\nimport AONode from '../lighting/AONode.js';\nimport getRoughness from '../functions/material/getRoughness.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport NormalMapNode from '../display/NormalMapNode.js';\nimport { MeshStandardMaterial } from 'three';\nconst defaultValues = new MeshStandardMaterial();\nexport default class MeshStandardNodeMaterial extends NodeMaterial {\n  constructor(parameters) {\n    super();\n    this.isMeshStandardNodeMaterial = true;\n    this.colorNode = null;\n    this.opacityNode = null;\n    this.alphaTestNode = null;\n    this.normalNode = null;\n    this.emissiveNode = null;\n    this.metalnessNode = null;\n    this.roughnessNode = null;\n    this.envNode = null;\n    this.lightsNode = null;\n    this.positionNode = null;\n    this.setDefaultValues(defaultValues);\n    this.setValues(parameters);\n  }\n  build(builder) {\n    this.generatePosition(builder);\n    const colorNodes = this.generateDiffuseColor(builder);\n    const {\n      colorNode\n    } = colorNodes;\n    let {\n      diffuseColorNode\n    } = colorNodes;\n    const envNode = this.envNode || builder.scene.environmentNode;\n    diffuseColorNode = this.generateStandardMaterial(builder, {\n      colorNode,\n      diffuseColorNode\n    });\n    if (this.lightsNode) builder.lightsNode = this.lightsNode;\n    const materialLightsNode = [];\n    if (envNode) {\n      materialLightsNode.push(new EnvironmentNode(envNode));\n    }\n    if (builder.material.aoMap) {\n      materialLightsNode.push(new AONode(texture(builder.material.aoMap)));\n    }\n    if (materialLightsNode.length > 0) {\n      builder.lightsNode = new LightsNode([...builder.lightsNode.lightNodes, ...materialLightsNode]);\n    }\n    const outgoingLightNode = this.generateLight(builder, {\n      diffuseColorNode,\n      lightingModelNode: PhysicalLightingModel\n    });\n    this.generateOutput(builder, {\n      diffuseColorNode,\n      outgoingLightNode\n    });\n  }\n  generateStandardMaterial(builder, _ref) {\n    let {\n      colorNode,\n      diffuseColorNode\n    } = _ref;\n    const {\n      material\n    } = builder;\n\n    // METALNESS\n\n    let metalnessNode = this.metalnessNode ? float(this.metalnessNode) : materialMetalness;\n    metalnessNode = builder.addFlow('fragment', label(metalnessNode, 'Metalness'));\n    builder.addFlow('fragment', assign(diffuseColorNode, vec4(mul(diffuseColorNode.rgb, invert(metalnessNode)), diffuseColorNode.a)));\n\n    // ROUGHNESS\n\n    let roughnessNode = this.roughnessNode ? float(this.roughnessNode) : materialRoughness;\n    roughnessNode = getRoughness.call({\n      roughness: roughnessNode\n    });\n    builder.addFlow('fragment', label(roughnessNode, 'Roughness'));\n\n    // SPECULAR COLOR\n\n    const specularColorNode = mix(vec3(0.04), colorNode.rgb, metalnessNode);\n    builder.addFlow('fragment', label(specularColorNode, 'SpecularColor'));\n\n    // NORMAL VIEW\n\n    const normalNode = this.normalNode ? vec3(this.normalNode) : material.normalMap ? new NormalMapNode(texture(material.normalMap), uniform(material.normalScale)) : normalView;\n    builder.addFlow('fragment', label(normalNode, 'TransformedNormalView'));\n    return diffuseColorNode;\n  }\n  generateLight(builder, _ref2) {\n    let {\n      diffuseColorNode,\n      lightingModelNode,\n      lightsNode = builder.lightsNode\n    } = _ref2;\n    const renderer = builder.renderer;\n\n    // OUTGOING LIGHT\n\n    let outgoingLightNode = super.generateLight(builder, {\n      diffuseColorNode,\n      lightingModelNode,\n      lightsNode\n    });\n\n    // EMISSIVE\n\n    outgoingLightNode = add(vec3(this.emissiveNode || materialEmissive), outgoingLightNode);\n\n    // TONE MAPPING\n\n    if (renderer.toneMappingNode) outgoingLightNode = context(renderer.toneMappingNode, {\n      color: outgoingLightNode\n    });\n    return outgoingLightNode;\n  }\n  copy(source) {\n    this.colorNode = source.colorNode;\n    this.opacityNode = source.opacityNode;\n    this.alphaTestNode = source.alphaTestNode;\n    this.normalNode = source.normalNode;\n    this.emissiveNode = source.emissiveNode;\n    this.metalnessNode = source.metalnessNode;\n    this.roughnessNode = source.roughnessNode;\n    this.envNode = source.envNode;\n    this.lightsNode = source.lightsNode;\n    this.positionNode = source.positionNode;\n    return super.copy(source);\n  }\n}","map":{"version":3,"names":["NodeMaterial","float","vec3","vec4","normalView","add","context","assign","label","mul","invert","mix","texture","uniform","materialRoughness","materialMetalness","materialEmissive","LightsNode","EnvironmentNode","AONode","getRoughness","PhysicalLightingModel","NormalMapNode","MeshStandardMaterial","defaultValues","MeshStandardNodeMaterial","constructor","parameters","isMeshStandardNodeMaterial","colorNode","opacityNode","alphaTestNode","normalNode","emissiveNode","metalnessNode","roughnessNode","envNode","lightsNode","positionNode","setDefaultValues","setValues","build","builder","generatePosition","colorNodes","generateDiffuseColor","diffuseColorNode","scene","environmentNode","generateStandardMaterial","materialLightsNode","push","material","aoMap","length","lightNodes","outgoingLightNode","generateLight","lightingModelNode","generateOutput","addFlow","rgb","a","call","roughness","specularColorNode","normalMap","normalScale","renderer","toneMappingNode","color","copy","source"],"sources":["C:/Users/dro1l/source/repos/StaffWork/staffwork.client/node_modules/three/examples/jsm/nodes/materials/MeshStandardNodeMaterial.js"],"sourcesContent":["import NodeMaterial from './NodeMaterial.js';\nimport {\n\tfloat, vec3, vec4, normalView, add, context,\n\tassign, label, mul, invert, mix, texture, uniform,\n\tmaterialRoughness, materialMetalness, materialEmissive\n} from '../shadernode/ShaderNodeElements.js';\nimport LightsNode from '../lighting/LightsNode.js';\nimport EnvironmentNode from '../lighting/EnvironmentNode.js';\nimport AONode from '../lighting/AONode.js';\nimport getRoughness from '../functions/material/getRoughness.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport NormalMapNode from '../display/NormalMapNode.js';\n\nimport { MeshStandardMaterial } from 'three';\n\nconst defaultValues = new MeshStandardMaterial();\n\nexport default class MeshStandardNodeMaterial extends NodeMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshStandardNodeMaterial = true;\n\n\t\tthis.colorNode = null;\n\t\tthis.opacityNode = null;\n\n\t\tthis.alphaTestNode = null;\n\n\t\tthis.normalNode = null;\n\n\t\tthis.emissiveNode = null;\n\n\t\tthis.metalnessNode = null;\n\t\tthis.roughnessNode = null;\n\n\t\tthis.envNode = null;\n\n\t\tthis.lightsNode = null;\n\n\t\tthis.positionNode = null;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tbuild( builder ) {\n\n\t\tthis.generatePosition( builder );\n\n\t\tconst colorNodes = this.generateDiffuseColor( builder );\n\t\tconst { colorNode } = colorNodes;\n\t\tlet { diffuseColorNode } = colorNodes;\n\n\t\tconst envNode = this.envNode || builder.scene.environmentNode;\n\n\t\tdiffuseColorNode = this.generateStandardMaterial( builder, { colorNode, diffuseColorNode } );\n\n\t\tif ( this.lightsNode ) builder.lightsNode = this.lightsNode;\n\n\t\tconst materialLightsNode = [];\n\n\t\tif ( envNode ) {\n\n\t\t\tmaterialLightsNode.push( new EnvironmentNode( envNode ) );\n\n\t\t}\n\n\t\tif ( builder.material.aoMap ) {\n\n\t\t\tmaterialLightsNode.push( new AONode( texture( builder.material.aoMap ) ) );\n\n\t\t}\n\n\t\tif ( materialLightsNode.length > 0 ) {\n\n\t\t\tbuilder.lightsNode = new LightsNode( [ ...builder.lightsNode.lightNodes, ...materialLightsNode ] );\n\n\t\t}\n\n\t\tconst outgoingLightNode = this.generateLight( builder, { diffuseColorNode, lightingModelNode: PhysicalLightingModel } );\n\n\t\tthis.generateOutput( builder, { diffuseColorNode, outgoingLightNode } );\n\n\t}\n\n\tgenerateStandardMaterial( builder, { colorNode, diffuseColorNode } ) {\n\n\t\tconst { material } = builder;\n\n\t\t// METALNESS\n\n\t\tlet metalnessNode = this.metalnessNode ? float( this.metalnessNode ) : materialMetalness;\n\n\t\tmetalnessNode = builder.addFlow( 'fragment', label( metalnessNode, 'Metalness' ) );\n\t\tbuilder.addFlow( 'fragment', assign( diffuseColorNode, vec4( mul( diffuseColorNode.rgb, invert( metalnessNode ) ), diffuseColorNode.a ) ) );\n\n\t\t// ROUGHNESS\n\n\t\tlet roughnessNode = this.roughnessNode ? float( this.roughnessNode ) : materialRoughness;\n\t\troughnessNode = getRoughness.call( { roughness: roughnessNode } );\n\n\t\tbuilder.addFlow( 'fragment', label( roughnessNode, 'Roughness' ) );\n\n\t\t// SPECULAR COLOR\n\n\t\tconst specularColorNode = mix( vec3( 0.04 ), colorNode.rgb, metalnessNode );\n\n\t\tbuilder.addFlow( 'fragment', label( specularColorNode, 'SpecularColor' ) );\n\n\t\t// NORMAL VIEW\n\n\t\tconst normalNode = this.normalNode ? vec3( this.normalNode ) : ( material.normalMap ? new NormalMapNode( texture( material.normalMap ), uniform( material.normalScale ) ) : normalView );\n\n\t\tbuilder.addFlow( 'fragment', label( normalNode, 'TransformedNormalView' ) );\n\n\t\treturn diffuseColorNode;\n\n\t}\n\n\tgenerateLight( builder, { diffuseColorNode, lightingModelNode, lightsNode = builder.lightsNode } ) {\n\n\t\tconst renderer = builder.renderer;\n\n\t\t// OUTGOING LIGHT\n\n\t\tlet outgoingLightNode = super.generateLight( builder, { diffuseColorNode, lightingModelNode, lightsNode } );\n\n\t\t// EMISSIVE\n\n\t\toutgoingLightNode = add( vec3( this.emissiveNode || materialEmissive ), outgoingLightNode );\n\n\t\t// TONE MAPPING\n\n\t\tif ( renderer.toneMappingNode ) outgoingLightNode = context( renderer.toneMappingNode, { color: outgoingLightNode } );\n\n\t\treturn outgoingLightNode;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.colorNode = source.colorNode;\n\t\tthis.opacityNode = source.opacityNode;\n\n\t\tthis.alphaTestNode = source.alphaTestNode;\n\n\t\tthis.normalNode = source.normalNode;\n\n\t\tthis.emissiveNode = source.emissiveNode;\n\n\t\tthis.metalnessNode = source.metalnessNode;\n\t\tthis.roughnessNode = source.roughnessNode;\n\n\t\tthis.envNode = source.envNode;\n\n\t\tthis.lightsNode = source.lightsNode;\n\n\t\tthis.positionNode = source.positionNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}