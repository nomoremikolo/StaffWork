[{"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\index.tsx":"1","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\App.tsx":"2","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Layout\\Header.tsx":"3","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\store.ts":"4","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\layout\\Header.tsx":"5","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\reducers\\wareReducer.ts":"6","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\hooks\\redux.ts":"7","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\action_creators\\ware_action_creator.ts":"8","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\action_creators\\authorization_action_creator.ts":"9","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\global_variables.ts":"10","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\reducers\\authorizationReducer.ts":"11","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\welcome\\welcome.tsx":"12","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\PageNotFound\\PageNotFound.tsx":"13","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\SignIn\\Login.tsx":"14","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Welcome\\Welcome.tsx":"15","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\SignIn\\Registration.tsx":"16","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Discounts\\Discounts.tsx":"17","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Novelty\\Novelty.tsx":"18","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\components\\WareMockup.tsx":"19","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\WarePage\\WarePage.tsx":"20","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Layout\\FavoriteWaresModal.tsx":"21","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Layout\\CartModal.tsx":"22","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\NewWare\\NewWare.tsx":"23","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\NewCategory\\NewCategory.tsx":"24","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\NewBrand\\NewBrand.tsx":"25","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\EditWare\\EditWare.tsx":"26","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\EditWare\\EditForm.tsx":"27","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\Cabinet.tsx":"28","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetFavorite.tsx":"29","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetWares.tsx":"30","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetAccount.tsx":"31","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\SignOutModal.tsx":"32","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetWareItem.tsx":"33","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\DeleteWareModel.tsx":"34","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetOrders.tsx":"35","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetOrderItem.tsx":"36","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\EditOrderModal.tsx":"37","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Layout\\Loading.tsx":"38","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\reducers\\NotificationReducer.ts":"39","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Layout\\NotificationToastMessage.tsx":"40","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetUsers.tsx":"41","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\reducers\\usersReducer.ts":"42","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\action_creators\\users_action_creator.ts":"43","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetUserEdit.tsx":"44","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetUserEditForm.tsx":"45","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\components\\ScrollBtn.tsx":"46","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\AllWares\\AllWares.tsx":"47","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetCategories.tsx":"48"},{"size":518,"mtime":1671240067989,"results":"49","hashOfConfig":"50"},{"size":3057,"mtime":1674164222252,"results":"51","hashOfConfig":"50"},{"size":5373,"mtime":1674164101164,"results":"52","hashOfConfig":"50"},{"size":707,"mtime":1674058461719,"results":"53","hashOfConfig":"50"},{"size":4862,"mtime":1670269923339,"results":"54","hashOfConfig":"50"},{"size":7338,"mtime":1673947807880,"results":"55","hashOfConfig":"50"},{"size":275,"mtime":1670185427398,"results":"56","hashOfConfig":"50"},{"size":46481,"mtime":1674164745680,"results":"57","hashOfConfig":"50"},{"size":6810,"mtime":1670530583089,"results":"58","hashOfConfig":"50"},{"size":224,"mtime":1673921661699,"results":"59","hashOfConfig":"50"},{"size":2505,"mtime":1670530324774,"results":"60","hashOfConfig":"50"},{"size":9394,"mtime":1669929851256,"results":"61","hashOfConfig":"50"},{"size":499,"mtime":1673926450699,"results":"62","hashOfConfig":"50"},{"size":3711,"mtime":1673926462688,"results":"63","hashOfConfig":"50"},{"size":6082,"mtime":1674164386995,"results":"64","hashOfConfig":"50"},{"size":11783,"mtime":1674092284267,"results":"65","hashOfConfig":"50"},{"size":4828,"mtime":1674159983661,"results":"66","hashOfConfig":"50"},{"size":4912,"mtime":1674162442021,"results":"67","hashOfConfig":"50"},{"size":3147,"mtime":1674160000643,"results":"68","hashOfConfig":"50"},{"size":5493,"mtime":1674153911323,"results":"69","hashOfConfig":"50"},{"size":3877,"mtime":1674158055931,"results":"70","hashOfConfig":"50"},{"size":6794,"mtime":1674158141400,"results":"71","hashOfConfig":"50"},{"size":8925,"mtime":1674164608967,"results":"72","hashOfConfig":"50"},{"size":2052,"mtime":1674164339268,"results":"73","hashOfConfig":"50"},{"size":2814,"mtime":1673926416894,"results":"74","hashOfConfig":"50"},{"size":1503,"mtime":1673926405985,"results":"75","hashOfConfig":"50"},{"size":7906,"mtime":1673900834769,"results":"76","hashOfConfig":"50"},{"size":5371,"mtime":1674163387699,"results":"77","hashOfConfig":"50"},{"size":3746,"mtime":1673926996967,"results":"78","hashOfConfig":"50"},{"size":4797,"mtime":1674161293720,"results":"79","hashOfConfig":"50"},{"size":3896,"mtime":1674161040595,"results":"80","hashOfConfig":"50"},{"size":1097,"mtime":1673925825578,"results":"81","hashOfConfig":"50"},{"size":3475,"mtime":1674161433439,"results":"82","hashOfConfig":"50"},{"size":1341,"mtime":1673979146531,"results":"83","hashOfConfig":"50"},{"size":3060,"mtime":1674163221991,"results":"84","hashOfConfig":"50"},{"size":3447,"mtime":1674161690403,"results":"85","hashOfConfig":"50"},{"size":2387,"mtime":1674092072831,"results":"86","hashOfConfig":"50"},{"size":588,"mtime":1673983621615,"results":"87","hashOfConfig":"50"},{"size":3116,"mtime":1673998016531,"results":"88","hashOfConfig":"50"},{"size":2676,"mtime":1673998351203,"results":"89","hashOfConfig":"50"},{"size":3405,"mtime":1674161795639,"results":"90","hashOfConfig":"50"},{"size":2232,"mtime":1674084727252,"results":"91","hashOfConfig":"50"},{"size":9146,"mtime":1674156508380,"results":"92","hashOfConfig":"50"},{"size":1060,"mtime":1674085597931,"results":"93","hashOfConfig":"50"},{"size":7503,"mtime":1674086748586,"results":"94","hashOfConfig":"50"},{"size":1136,"mtime":1674153764322,"results":"95","hashOfConfig":"50"},{"size":5137,"mtime":1674165154806,"results":"96","hashOfConfig":"50"},{"size":2221,"mtime":1674163876344,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},"dtox1",{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"101"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"101"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"101"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"101"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"101"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"101"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245"},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\index.tsx",[],[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\App.tsx",["273","274"],[],"import React, {useEffect, useRef} from 'react';\nimport {Route, Routes} from \"react-router-dom\";\nimport Welcome from \"./pages/Welcome/Welcome\";\nimport PageNotFound from \"./pages/PageNotFound/PageNotFound\";\nimport Header from \"./pages/Layout/Header\";\nimport {useAppDispatch, useAppSelector} from \"./hooks/redux\";\nimport Cabinet from \"./pages/Account/Cabinet\";\nimport LoginPage from \"./pages/SignIn/Login\";\nimport RegistrationPage from \"./pages/SignIn/Registration\";\nimport {refresh_token} from \"./redux/action_creators/authorization_action_creator\";\nimport Discounts from \"./pages/Discounts/Discounts\";\nimport Novelty from \"./pages/Novelty/Novelty\";\nimport WarePage from \"./pages/WarePage/WarePage\";\nimport NewWare from \"./pages/NewWare/NewWare\";\nimport NewCategory from \"./pages/NewCategory/NewCategory\";\nimport NewBrand from \"./pages/NewBrand/NewBrand\";\nimport EditWare from \"./pages/EditWare/EditWare\";\nimport CabinetUserEdit from \"./pages/Account/CabinetUserEdit\";\nimport ScrollBtn from \"./components/ScrollBtn\";\nimport AllWares from \"./pages/AllWares/AllWares\";\n\nfunction App() {\n    const dispatch = useAppDispatch()\n    const {isAuthorized, user} = useAppSelector(state => state.authorizationReducer)\n\n\n    useEffect(() => {\n        dispatch(refresh_token())\n    }, [ ])\n\n    return (\n        <>\n            <Header/>\n            <ScrollBtn/>\n            <Routes>\n                <Route path={\"/\"} element={<Welcome/>}/>\n                <Route path={\"/Account\"} element={isAuthorized ? <Cabinet/> : <LoginPage/>}/>\n                <Route path={\"/Discounts\"} element={<Discounts/>}/>\n                <Route path={\"/All\"} element={<AllWares/>}/>\n                <Route path={\"/Category/:category\"} element={<AllWares/>}/>\n                <Route path={\"/Wares/:id\"} element={<WarePage/>}/>\n                <Route path={\"/Novelty\"} element={<Novelty/>}/>\n                <Route path={\"/SignIn\"} element={isAuthorized ? <Cabinet/> : <RegistrationPage/>}/>\n                <Route path={\"*\"} element={<PageNotFound/>}/>\n                {!isAuthorized ? <></> : user?.permissions.includes(2) ?\n                <>\n                    <Route path={\"/NewWare\"} element={<NewWare/>}/>\n                </> : <></>}\n                {!isAuthorized ? <></> : user?.permissions.includes(1) ?\n                <>\n                    <Route path={\"/EditWare/:id\"} element={<EditWare/>}/>\n                </> : <></>}\n                {!isAuthorized ? <></> : user?.permissions.includes(1) ?\n                <>\n                    <Route path={\"/NewCategory\"} element={<NewCategory/>}/>\n                </> : <></>}\n                {!isAuthorized ? <></> : user?.permissions.includes(1) ?\n                <>\n                    <Route path={\"/NewBrand\"} element={<NewBrand/>}/>\n                </> : <></>}\n                {!isAuthorized ? <></> : user?.permissions.includes(3) ?\n                <>\n                    <Route path={\"/EditUser/:id\"} element={<CabinetUserEdit/>}/>\n                </> : <></>}\n\n            </Routes>\n        </>\n    );\n}\n\nexport default App;\n","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Layout\\Header.tsx",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\store.ts",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\layout\\Header.tsx",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\reducers\\wareReducer.ts",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\hooks\\redux.ts",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\action_creators\\ware_action_creator.ts",["275","276","277","278"],[],"import {AppDispatch} from \"../store\";\r\nimport {wareReducer} from \"../reducers/wareReducer\";\r\nimport axios from \"axios\";\r\nimport {GraphQlEndpoint} from \"../../global_variables\";\r\nimport {INewWare, ISortType, IUpdateWareType, IWare} from \"../../types/ware\";\r\nimport {INewBrand} from \"../../types/brand\";\r\nimport {NotificationReducer} from \"../reducers/NotificationReducer\";\r\n\r\nconst {SHOW_SUCCESS_MESSAGE, SHOW_ERROR_MESSAGE, SHOW_WARNING_MESSAGE, DEACTIVATE_MESSAGE} = NotificationReducer.actions\r\n\r\nexport const create_new_brand = (brand: INewBrand, callback: (statusCode: number) => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation createB{\r\n                  ware{\r\n                    createBrand(brand: {\r\n                      name: \"${brand.name}\"\r\n                      phone: \"${brand.phone}\"\r\n                      countryManufactured: \"${brand.countryManufactured}\"\r\n                    }){\r\n                      brand{\r\n                        id\r\n                        name\r\n                        phone\r\n                        countryManufactured\r\n                      }\r\n                      errors\r\n                      statusCode\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.createBrand\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Brand was successfully created!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while adding the brand\"))\r\n        callback(r.statusCode)\r\n\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const update_order = (id: number, status?: string, isConfirmed?: boolean, callback?: () => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation updateO{\r\n                  ware{\r\n                    updateOrder(id: ${id},isConfirmed: ${isConfirmed ?? \"null\"}, status: ${status != null ? `\"${status}\"` : \"null\"}){\r\n                      errors\r\n                      statusCode\r\n                      order{\r\n                        id\r\n                        isConfirmed\r\n                        status\r\n                        userId\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.updateOrder\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Order was successfully updated!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while updating the order\"))\r\n        if(callback)\r\n            callback()\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const get_orders = (confirmed?: boolean | null, orderNumber?: number | null) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_ORDERS())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getO{\r\n                  ware{\r\n                    getOrders(confirmed: ${confirmed === null ? \"null\" : confirmed}, orderNumber: ${orderNumber == null ? \"null\" : `\"${orderNumber}\"`}){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        isConfirmed\r\n                        orderId\r\n                        status\r\n                        orderWares{\r\n                          wareName\r\n                          categoryName\r\n                          brandName\r\n                          description\r\n                          sizes\r\n                          price\r\n                          oldPrice\r\n                          isDiscount\r\n                          countInStorage\r\n                          size\r\n                          wareId\r\n                          count\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getOrders\r\n        if(r.statusCode === 200){\r\n            dispatch(wareReducer.actions.GET_ORDERS_SUCCESS(r.wares))\r\n            dispatch(wareReducer.actions.GET_ORDERS_ERROR(r.errors))\r\n\r\n        }\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_ORDERS_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const update_ware = (ware: IUpdateWareType, callback: (statusCode: number) => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation updateW{\r\n                  ware{\r\n                    updateWare(ware: {\r\n                      id: ${ware.id},\r\n                      name: \"${ware.name}\",\r\n                      brandId: ${ware.brandId},\r\n                      categoryId: ${ware.categoryId},\r\n                      countInStorage: ${ware.countInStorage},\r\n                      description: \"\"\"${ware.description}\"\"\",\r\n                      price: ${ware.price},\r\n                      oldPrice: ${ware.oldPrice},\r\n                      isDiscount: ${ware.isDiscount},\r\n                      sizes: \"${ware.sizes}\",\r\n                      thumbnail: ${ware.thumbnail === \"\" ? \"null\" : `\"\"\"${ware.thumbnail}\"\"\"`}\r\n                      images: ${ware.images === \"\" ? \"null\" : `\"\"\"${ware.images}\"\"\"`}\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n\r\n        let r = response.data.data.ware.updateWare\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Ware was successfully updated!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while updating the ware\"))\r\n\r\n        callback(r.statusCode)\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const create_new_category = (name: string, callback: (statusCode: number) => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation createC{\r\n                  ware{\r\n                    createCategory(categoryName: \"${name}\"){\r\n                      category{\r\n                        id\r\n                        name\r\n                      },\r\n                      errors,\r\n                      statusCode\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.createCategory\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Category was successfully created!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while creating the category\"))\r\n        callback(r.statusCode)\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const confirmOrder = (callback: () => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation confirmO {\r\n                  ware {\r\n                    confirmOrder {\r\n                      errors\r\n                      statusCode\r\n                      wares {\r\n                        basketId\r\n                        count\r\n                          id\r\n                          name\r\n                          brandId\r\n                          categoryId\r\n                          description\r\n                          sizes\r\n                          price\r\n                          oldPrice\r\n                          isDiscount\r\n                          countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.confirmOrder\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Order was successfully confirmed, wait for accepting!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while confirming the order\"))\r\n        callback()\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const delete_ware = (id: number, callback: (statusCode: number) => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation deleteW{\r\n                  ware{\r\n                    deleteWare(wareId: ${id}){\r\n                      errors\r\n                      statusCode\r\n                      ware{\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.deleteWare\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Ware was successfully deleted!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while deleting the ware\"))\r\n        callback(r.statusCode)\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const delete_category = (id: number, callback: (statusCode: number) => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation deleteC{\r\n                  ware{\r\n                    deleteCategory(categoryId: ${id}){\r\n                      statusCode\r\n                      errors\r\n                      category{\r\n                        id\r\n                        name\r\n                      },\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.deleteCategory\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Category was successfully deleted!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while deleting the category\"))\r\n        callback(r.statusCode)\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const create_ware = (ware: INewWare, callback: () => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation newWare {\r\n                  ware {\r\n                    createWare(\r\n                      ware: {\r\n                        name: \"${ware.name}\"\r\n                        brandId: ${ware.brandId}\r\n                        categoryId: ${ware.categoryId}\r\n                        countInStorage: ${ware.countInStorage}\r\n                        isDiscount: ${ware.isDiscount}\r\n                        oldPrice: ${ware.oldPrice != null ? ware.oldPrice : \"null\"}\r\n                        price: ${ware.price}\r\n                        sizes: \"${ware.sizes}\"\r\n                        description: \"\"\"${ware.description}\"\"\"\r\n                        thumbnail: \"\"\"${ware.thumbnail}\"\"\"\r\n                        images: \"\"\"${ware.images}\"\"\"\r\n                      }\r\n                    ) {\r\n                      errors\r\n                      statusCode\r\n                      ware {\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.createWare\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Ware was successfully created!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while adding the brand\"))\r\n        if ( r.statusCode === 200)\r\n            callback()\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const clearBasket = (callback?: () => void) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation clearB{\r\n                  ware{\r\n                    clearCart{\r\n                      errors\r\n                      statusCode\r\n                      ware{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.clearCart\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Cart was successfully cleared!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while clearing the cart\"))\r\n        if(callback)\r\n            callback()\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const add_to_cart = (id: number, size: string) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation addWTB {\r\n                  ware {\r\n                    addWareToBasket(ware: { count: 1, wareId: ${id}, size: \"${size}\" }) {\r\n                      errors\r\n                      statusCode\r\n                      ware {\r\n                        basketId\r\n                        count\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        size\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.addWareToBasket\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Ware was successfully added to you cart!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while adding ware to your cart\"))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const changeBasketWareCount = (WareId: number, Count: number) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation changeBWC{\r\n                  ware{\r\n                    changeCount(ware: {\r\n                      count: ${Count},\r\n                      wareId: ${WareId}\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      ware{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.addWareToBasket\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\nexport const removeFromBasket = (WareId: number) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation removeWFB {\r\n                  ware {\r\n                    removeWareFromBasket(wareId: ${WareId}) {\r\n                      errors\r\n                      statusCode\r\n                      ware {\r\n                         basketId\r\n                        count\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.removeFromBasket\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Ware was successfully deleted from cart!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while deleting ware from cart\"))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\ninterface IFetch_discount_wares {\r\n    sortBy?: ISortType | null,\r\n    categoryId?: number | null,\r\n    countOfRecords?: number | null\r\n    keyWords?: string | null,\r\n}\r\nexport const fetch_discount_wares_authorized = (settings?: IFetch_discount_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_DISCOUNT_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getaware{\r\n                  ware{\r\n                    getAllWaresAuthorized(settings: {\r\n                      categoryId: ${settings?.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings?.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings?.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings?.sortBy?.value ?? \"name\"}\",\r\n                        },\r\n                      filter: \"Discount\"\r\n                      keyWords: ${settings?.keyWords == null ? null : `\"${settings?.keyWords}\"`}\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        isFavorite  \r\n                        countInStorage\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWaresAuthorized\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_DISCOUNT_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_novelty_wares_authorized = (settings?: IFetch_discount_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_NOVELTY_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getaware{\r\n                  ware{\r\n                    getAllWaresAuthorized(settings: {\r\n                      categoryId: ${settings?.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings?.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings?.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings?.sortBy?.value ?? \"name\"}\",\r\n                        },\r\n                      filter: \"Novelty\"\r\n                      keyWords: ${settings?.keyWords == null ? null : `\"${settings?.keyWords}\"`}\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        isFavorite  \r\n                        countInStorage\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWaresAuthorized\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_NOVELTY_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_NOVELTY_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_NOVELTY_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_cart_wares = () => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_CART_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getWFB {\r\n                  ware {\r\n                    getWaresFromBasket {\r\n                      errors\r\n                      statusCode\r\n                      wares {\r\n                        basketId\r\n                        count\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        size\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getWaresFromBasket\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_CART_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_CART_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_CART_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_favorite_wares = () => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_FAVORITE_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n            query getfwares {\r\n              ware {\r\n                getFavoriteWares {\r\n                  errors\r\n                  statusCode\r\n                  wares {\r\n                    wareId\r\n                    favoriteId\r\n                    name\r\n                    brandId\r\n                    categoryId\r\n                    description\r\n                    sizes\r\n                    price\r\n                    oldPrice\r\n                    isDiscount\r\n                    countInStorage\r\n                    thumbnail\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getFavoriteWares\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_FAVORITE_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_FAVORITE_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_FAVORITE_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_all_categories = () => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_CATEGORIES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query GetAC{\r\n                  ware{\r\n                    getAllCategories{\r\n                      errors\r\n                      statusCode\r\n                      categories{\r\n                        id\r\n                        name\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllCategories\r\n\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_CATEGORIES_SUCCESS(r.categories))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_CATEGORIES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_CATEGORIES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_all_brands = () => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_BRANDS())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getAB{\r\n                  ware{\r\n                    getAllBrands{\r\n                      statusCode\r\n                      errors\r\n                      brands{\r\n                        id\r\n                        name\r\n                        countryManufactured\r\n                        phone\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllBrands\r\n\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_BRANDS_SUCCESS(r.brands))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_BRANDS_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_BRANDS_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\nexport const fetch_discount_wares = (settings: IFetch_discount_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_DISCOUNT_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getaware{\r\n                  ware{\r\n                    getAllWares(settings: {\r\n                      categoryId: ${settings.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings.sortBy?.value ?? \"name\"}\",\r\n                        }\r\n                      filter: \"Discount\"\r\n                       keyWords: ${settings?.keyWords == null ? null : `\"${settings?.keyWords}\"`}\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWares\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_DISCOUNT_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_DISCOUNT_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\ninterface IFetch_all_wares {\r\n    sortBy?: ISortType | null,\r\n    categoryId?: number | null,\r\n    countOfRecords?: number | null\r\n    keyWords?: string | null\r\n    filter?: string | null\r\n}\r\n\r\nexport const fetch_all_wares = (settings?: IFetch_all_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getaware{\r\n                  ware{\r\n                    getAllWares(settings: {\r\n                      categoryId: ${settings?.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings?.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings?.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings?.sortBy?.value ?? \"name\"}\",\r\n                      }\r\n                      filter: ${settings?.filter === undefined ? \"null\" : `\"${settings?.filter}\"`}\r\n                      keyWords: ${settings?.keyWords == null ? null : `\"${settings?.keyWords}\"`}\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail  \r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWares\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const fetch_all_wares_with_favorites = (settings: IFetch_all_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getAWA    {\r\n                  ware{\r\n                    getAllWaresAuthorized(settings: {\r\n                      categoryId: ${settings.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings.sortBy?.value ?? \"name\"}\",\r\n                      }\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares {\r\n                        id\r\n                        isFavorite\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWares\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const fetch_ware_by_id = (id: number) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_WARE_BY_ID())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getwarebi {\r\n                  ware {\r\n                    getWareById(wareId: ${id}) {\r\n                      errors\r\n                      statusCode\r\n                      ware {\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        brandName\r\n                        categoryName\r\n                        phone\r\n                        countryManufactured\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getWareById\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_WARE_BY_ID_SUCCESS(r.ware))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_WARE_BY_ID_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_WARE_BY_ID_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\ninterface IFetch_novelty_wares {\r\n    sortBy?: ISortType | null,\r\n    categoryId?: number | null,\r\n    countOfRecords?: number | null,\r\n    filter?: string | null,\r\n    keyWords?: string | null\r\n}\r\n\r\nexport const fetch_novelty_wares = (settings: IFetch_novelty_wares) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.GET_NOVELTY_WARES())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                query getaware{\r\n                  ware{\r\n                    getAllWares(settings: {\r\n                      categoryId: ${settings.categoryId ?? \"null\"},\r\n                      countOfRecords: ${settings.countOfRecords ?? 20},\r\n                      sortParam: {\r\n                        isReverse: ${settings.sortBy?.isReverse ?? \"false\"},\r\n                        value: \"${settings.sortBy?.value ?? \"name\"}\",\r\n                        }\r\n                      filter: \"Novelty\"\r\n                      keyWords: ${settings?.keyWords == null ? null : `\"${settings?.keyWords}\"`}\r\n                    }){\r\n                      errors\r\n                      statusCode\r\n                      wares{\r\n                        id\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        thumbnail\r\n                        images\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.getAllWares\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.GET_NOVELTY_WARES_SUCCESS(r.wares))\r\n        } else {\r\n            dispatch(wareReducer.actions.GET_NOVELTY_WARES_ERROR(r.errors))\r\n        }\r\n\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.GET_NOVELTY_WARES_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const add_to_favorite = (id: number) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation addfav{\r\n                  ware{\r\n                    addToFavorite(wareId: ${id}){\r\n                      errors\r\n                      statusCode\r\n                      ware{\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                        \r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.addToFavorite\r\n        r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Successfully added to favorite wares!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while adding to favorite\"))\r\n        if (r.statusCode === 200) {\r\n            dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE_SUCCESS())\r\n        } else {\r\n            dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const remove_from_favorite = (id: number, callback?: () => void) => async (dispatch: AppDispatch) => {\r\n    dispatch(wareReducer.actions.ADD_WARE_TO_FAVORITE())\r\n    try {\r\n        const graphqlQuery = {\r\n            \"query\": `\r\n                mutation removeFF {\r\n                  ware {\r\n                    removeFromFavorite(wareId: ${id}) {\r\n                      errors\r\n                      statusCode\r\n                      ware {\r\n                        name\r\n                        brandId\r\n                        categoryId\r\n                        description\r\n                        sizes\r\n                        price\r\n                        oldPrice\r\n                        isDiscount\r\n                        countInStorage\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n            `\r\n        }\r\n        let response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.ware.removeFromFavorite\r\n        if (r.statusCode === 200) {\r\n            r.statusCode === 200 ? dispatch(SHOW_SUCCESS_MESSAGE(\"Ware was successfully deleted from favorites!\")) : dispatch(SHOW_ERROR_MESSAGE(\"An error occurred while deleting the ware from favorites\"))\r\n            dispatch(wareReducer.actions.REMOVE_WARE_FROM_FAVORITE_SUCCESS())\r\n            if (callback){\r\n                callback()\r\n            }\r\n        } else {\r\n            dispatch(wareReducer.actions.REMOVE_WARE_FROM_FAVORITE_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(wareReducer.actions.REMOVE_WARE_FROM_FAVORITE_ERROR(e))\r\n        console.log(e)\r\n    }\r\n}","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\action_creators\\authorization_action_creator.ts",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\global_variables.ts",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\reducers\\authorizationReducer.ts",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\welcome\\welcome.tsx",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\PageNotFound\\PageNotFound.tsx",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\SignIn\\Login.tsx",["279"],[],"import React from 'react';\r\nimport {Google} from \"react-bootstrap-icons\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {authorizationReducer} from \"../../redux/reducers/authorizationReducer\";\r\nimport {login} from \"../../redux/action_creators/authorization_action_creator\";\r\n\r\nconst LoginPage = () => {\r\n    const dispatch = useAppDispatch()\r\n    const server_errors = useAppSelector(state => state.authorizationReducer.error)\r\n    const {\r\n        register,\r\n        formState: {\r\n            errors,\r\n        },\r\n        handleSubmit,\r\n    } = useForm()\r\n\r\n    const LogIn = (data: any) => {\r\n        dispatch(login(data.username, data.password))\r\n    };\r\n    document.title = \"Authorization\"\r\n    return (\r\n        <div className={\"container-fluid\"}>\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-5 col-lg-4 m-auto\">\r\n                    <div className=\"my-5 border border-1 \">\r\n                        <div className=\"w-100 border-bottom border-1 py-3\">\r\n                            <h5 className=\"text-center\">Wear | Authorization</h5>\r\n                            <p className={\"text-danger text-center\"}>{server_errors ? server_errors : \"\"}</p>\r\n                        </div>\r\n                        <form onSubmit={handleSubmit(LogIn)}>\r\n                            <div className=\"mb-3 px-5 mt-2\">\r\n                                <label htmlFor=\"username\" className=\"form-label\">\r\n                                    Username\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder={\"Your username\"}\r\n                                    {...register('username', {\r\n                                        required: true,\r\n                                    })}\r\n                                />\r\n                                <span className={\"text-danger mt-1 opacity-100\"}>{errors?.username && \"This field is required!\"}</span>\r\n                            </div>\r\n                            <div className=\"mb-3 px-5\">\r\n                                <label htmlFor=\"password\" className=\"form-label\">\r\n                                    Password\r\n                                </label>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    className=\"form-control\"\r\n                                    placeholder={\"Your password\"}\r\n                                    {...register('password',{\r\n                                        required: true\r\n                                    })}\r\n                                />\r\n                                <span className={\"text-danger mt-1 opacity-100\"}>{errors?.password && \"This field is required!\"}</span>\r\n                            </div>\r\n                            <div className=\"px-5 mb-3 padding-bottom text-center text-sm-start\">\r\n                                <button className={\"btn btn-primary me-1 px-4\"} type={\"submit\"}>Log in</button>\r\n                                <button className={\"btn btn-secondary me-1 px-4\"} type={\"submit\"}><Google height={18} width={18}/></button>\r\n                            </div>\r\n                            <p className={\"px-5 text-center text-sm-start\"}><Link to={\"/SignIn\"}>Don't have account?</Link></p>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginPage;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Welcome\\Welcome.tsx",["280","281","282","283"],[],"import React, {useEffect, useState} from 'react';\r\nimport {Carousel} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {\r\n    fetch_all_wares,\r\n    fetch_discount_wares, fetch_discount_wares_authorized,\r\n    fetch_novelty_wares, fetch_novelty_wares_authorized\r\n} from \"../../redux/action_creators/ware_action_creator\";\r\nimport WareMockup from \"../../components/WareMockup\";\r\n\r\nconst Welcome = () => {\r\n    const dispatch = useAppDispatch()\r\n    const {noveltyWares, discountWares} = useAppSelector(state => state.wareReducer)\r\n    const {isLoading} = useAppSelector(state => state.wareReducer)\r\n    const {isAuthorized} = useAppSelector(state => state.authorizationReducer)\r\n    const [countOfDiscountRecords, setCountDiscountOfRecords] = useState(4)\r\n    const [countOfNoveltyRecords, setCountOfNoveltyRecords] = useState(4)\r\n    useEffect(() => {\r\n        dispatch(isAuthorized ? fetch_discount_wares_authorized({countOfRecords: countOfDiscountRecords}) : fetch_discount_wares({countOfRecords: countOfDiscountRecords}))\r\n        dispatch(isAuthorized ? fetch_novelty_wares_authorized({countOfRecords: countOfNoveltyRecords}) : fetch_novelty_wares({countOfRecords: countOfNoveltyRecords}))\r\n    }, [ ])\r\n\r\n    useEffect(() => {\r\n        dispatch(isAuthorized ? fetch_discount_wares_authorized({countOfRecords: countOfDiscountRecords}) : fetch_discount_wares({countOfRecords: countOfDiscountRecords}))\r\n        dispatch(isAuthorized ? fetch_novelty_wares_authorized({countOfRecords: countOfNoveltyRecords}) : fetch_novelty_wares({countOfRecords: countOfNoveltyRecords}))\r\n    }, [countOfDiscountRecords, countOfNoveltyRecords])\r\n    document.title = \"Welcome\"\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid px-0 \">\r\n                <Carousel>\r\n                    <Carousel.Item>\r\n                        <img\r\n                            className=\"d-block w-100\"\r\n                            src=\"https://www.staff-clothes.com/_next/image/?url=https%3A%2F%2Fstatic.staff-clothes.com%2Fuploads%2Fmedia%2Fdefault%2F0002%2F70%2F61c8caa3d6044fb2b1ebac8e0d95333a.jpeg&w=1920&q=75\"\r\n                            alt=\"First slide\"\r\n                        />\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <img\r\n                            className=\"d-block w-100\"\r\n                            src=\"https://www.staff-clothes.com/_next/image/?url=https%3A%2F%2Fstatic.staff-clothes.com%2Fuploads%2Fmedia%2Fdefault%2F0002%2F72%2F42d486c092fb4fa9aaa1b6697c8b172a.jpeg&w=1920&q=75\"\r\n                            alt=\"Second slide\"\r\n                        />\r\n                    </Carousel.Item>\r\n                </Carousel>\r\n                <Link to={\"/All\"}\r\n                      className=\"btn btn-primary py-2 position-absolute start-50 translate-middle carousel-enter\">Go\r\n                    over\r\n                </Link>\r\n            </div>\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row\">\r\n                    <div className=\"col my-3\">\r\n                        <img\r\n                            src=\"https://www.staff-clothes.com/_next/image/?url=https%3A%2F%2Fstatic.staff-clothes.com%2Fuploads%2Fmedia%2Fdefault%2F0002%2F70%2F408ad6d730404fada9a91a9e49d80f49.jpeg&w=1920&q=75\"\r\n                            alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"col my-3\">\r\n                        <img\r\n                            src=\"https://www.staff-clothes.com/_next/image/?url=https%3A%2F%2Fstatic.staff-clothes.com%2Fuploads%2Fmedia%2Fdefault%2F0002%2F70%2F67895284092c4f14881dfa6e5eb2ef60.jpeg&w=1920&q=75\"\r\n                            alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"col my-3\">\r\n                        <img\r\n                            src=\"https://www.staff-clothes.com/_next/image/?url=https%3A%2F%2Fstatic.staff-clothes.com%2Fuploads%2Fmedia%2Fdefault%2F0002%2F70%2Fe1d4b958f1ca4f0484f76ed20fd3737d.jpeg&w=1920&q=75\"\r\n                            alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"col my-3\">\r\n                        <img\r\n                            src=\"https://www.staff-clothes.com/_next/image/?url=https%3A%2F%2Fstatic.staff-clothes.com%2Fuploads%2Fmedia%2Fdefault%2F0002%2F70%2F37f1284fda264fe1ad23aea1c8a1cc2f.jpeg&w=1920&q=75\"\r\n                            alt=\"\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container mt-5\">\r\n                <div className=\"d-block\">\r\n                    <h2 className=\"d-xxl-inline text-center text-xxl-start fw-bold border-3 border-dark border-bottom\">DISCOUNTS</h2>\r\n                </div>\r\n                <div className=\"text-center text-xxl-start row\">\r\n                    {discountWares.map(item =>\r\n                        <WareMockup item={item}/>\r\n                    )}\r\n                </div>\r\n                {discountWares.length >= countOfDiscountRecords ? <button onClick={e => setCountDiscountOfRecords(countOfDiscountRecords+12)} className={'btn btn-outline-secondary position-absolute start-50 mt-5 mb-5 py-1'}>More</button> : <></>}\r\n            </div>\r\n            <div className=\"container mt-5 mb-5 d-block\">\r\n                <div className=\"d-block\">\r\n                    <h2 className=\"d-xxl-inline text-center text-xxl-start fw-bold border-3 border-dark border-bottom\">NOVELTIES</h2>\r\n                </div>\r\n                <div className=\"text-center text-xxl-start row mb-5\">\r\n                    {noveltyWares.map((item) =>\r\n                        <WareMockup item={item}/>\r\n                    )}\r\n                </div>\r\n                {noveltyWares.length >= countOfNoveltyRecords ? <button onClick={e => setCountOfNoveltyRecords(countOfNoveltyRecords+12)} className={'btn btn-outline-secondary position-absolute start-50 mb-5 py-1'}>More</button> : <></>}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Welcome;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\SignIn\\Registration.tsx",["284"],[],"import React from 'react';\r\nimport {Google} from \"react-bootstrap-icons\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {login, sign_in} from \"../../redux/action_creators/authorization_action_creator\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\n\r\nconst RegistrationPage = () => {\r\n    const dispatch = useAppDispatch()\r\n    const server_errors = useAppSelector(state => state.authorizationReducer.error)\r\n    const navigate = useNavigate()\r\n    const {\r\n        register,\r\n        formState: {\r\n            errors,\r\n        },\r\n        handleSubmit,\r\n    } = useForm()\r\n\r\n    const SignIn = (data: any) => {\r\n        if (data.password === data.password2){\r\n            dispatch(sign_in({\r\n                username: data.username,\r\n                password: data.password,\r\n                email: data.email,\r\n                adress: data.adress ?? \"\",\r\n                age: data.age,\r\n                surname: data.surname,\r\n                name: data.name\r\n            }))\r\n            navigate(\"/SignIn\")\r\n        }else{\r\n            errors!.password2!.message = \"Passwords do not match!\"\r\n        }\r\n    };\r\n    document.title = \"New account\"\r\n    return (\r\n        <div className={\"container-fluid\"}>\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-5 col-lg-4 m-auto\">\r\n                    <div className=\"my-5 border border-1 \">\r\n                        <div className=\"w-100 border-bottom border-1 py-3\">\r\n                            <h5 className=\"text-center\">Wear | New user</h5>\r\n                            <p className={\"text-danger text-center\"}>{server_errors}</p>\r\n                        </div>\r\n                        <form onSubmit={handleSubmit(SignIn)}>\r\n                            <div className=\"mb-3 px-5 mt-2\">\r\n                                <label htmlFor=\"username\" className=\"form-label\">\r\n                                    Username\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id={'username'}\r\n                                    className=\"form-control\"\r\n                                    placeholder={\"Your username\"}\r\n                                    {...register('username', {\r\n                                        required: true,\r\n                                        pattern: {\r\n                                            value: /^[A-Za-z0-9_]+$/g,\r\n                                            message: \"Please use only latin letters, numbers and _ in username!\"\r\n                                        },\r\n                                        minLength: {\r\n                                            value: 6,\r\n                                            message: \"Username must have at least 6 characters\"\r\n                                        },\r\n                                    })}\r\n                                />\r\n                                <span className={\"text-danger mt-1 opacity-100\"}>{errors?.username && \"This field is required!\"}</span>\r\n                            </div>\r\n                            <div className=\"mb-3 px-5\">\r\n                                <label htmlFor=\"password\" className=\"form-label\">\r\n                                    Password\r\n                                </label>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    id={'password'}\r\n                                    className=\"form-control\"\r\n                                    placeholder={\"Your password\"}\r\n                                    {...register('password', {\r\n                                        required: true,\r\n                                        pattern: {\r\n                                            value: /^[A-Za-z0-9]+$/g,\r\n                                            message: \"Please use only latin letters and numbers in password!\"\r\n                                        },\r\n                                        minLength: {\r\n                                            value: 6,\r\n                                            message: \"Password must have at least 6 characters\",\r\n                                        }\r\n                                    })}\r\n                                />\r\n                                <span className={\"text-danger mt-1 opacity-100\"}>{errors?.password && \"This field is required!\"}</span>\r\n                            </div>\r\n                            <div className=\"mb-3 px-5\">\r\n                                <label htmlFor=\"password\" className=\"form-label\">\r\n                                    Password Check\r\n                                </label>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    id={'password2'}\r\n                                    className=\"form-control\"\r\n                                    placeholder={\"Your password\"}\r\n                                    {...register('password2', {\r\n                                        required: true,\r\n                                        pattern: {\r\n                                            value: /^[A-Za-z0-9]+$/g,\r\n                                            message: \"Please use only latin letters and numbers in password!\"\r\n                                        },\r\n                                        minLength: {\r\n                                            value: 6,\r\n                                            message: \"Password must have at least 6 characters\",\r\n                                        },\r\n                                        onBlur: (event) => {\r\n                                            if (event.currentTarget.value !== event.currentTarget.parentNode.parentNode.password.value){\r\n                                                event.currentTarget.nextElementSibling.innerHTML = \"Passwords do not match!\"\r\n                                            }\r\n                                        },\r\n                                        onChange: (event) => {\r\n                                            event.currentTarget.nextElementSibling.innerHTML = \"\"\r\n                                        }\r\n                                    })}\r\n                                />\r\n                                <span className={\"text-danger mt-1 opacity-100\"}>{errors?.password2 && \"This field is required!\"}</span>\r\n                            </div>\r\n                            <div className=\"mb-3 px-5 mt-2\">\r\n                                <label htmlFor=\"name\" className=\"form-label\">\r\n                                    First name\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id={'name'}\r\n                                    className=\"form-control\"\r\n                                    placeholder={\"John\"}\r\n                                    {...register('name', {\r\n                                        required: true,\r\n                                    })}\r\n                                />\r\n                                <span className={\"text-danger mt-1 opacity-100\"}>{errors?.name && \"This field is required!\"}</span>\r\n                            </div>\r\n                            <div className=\"mb-3 px-5 mt-2\">\r\n                                <label htmlFor=\"surname\" className=\"form-label\">\r\n                                    Last name\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id={'surname'}\r\n                                    className=\"form-control\"\r\n                                    placeholder={\"Wick\"}\r\n                                    {...register('surname', {\r\n                                        required: true,\r\n                                    })}\r\n                                />\r\n                                <span className={\"text-danger mt-1 opacity-100\"}>{errors?.surname && \"This field is required!\"}</span>\r\n                            </div>\r\n                            <div className=\"mb-3 px-5 mt-2\">\r\n                                <label htmlFor=\"email\" className=\"form-label\">\r\n                                    Email\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id={'email'}\r\n                                    className=\"form-control\"\r\n                                    placeholder={\"example@example.com\"}\r\n                                    {...register('email', {\r\n                                        required: true,\r\n                                    })}\r\n                                />\r\n                                <span className={\"text-danger mt-1 opacity-100\"}>{errors?.email && \"This field is required!\"}</span>\r\n                            </div>\r\n                            <div className=\" mb-3 px-5 mt-2\">\r\n                                <label htmlFor=\"age\" className=\"form-label\">\r\n                                    Age\r\n                                </label>\r\n                                <div className={\"input-group\"}>\r\n                                    <input\r\n                                        type=\"range\"\r\n                                        id={'age'}\r\n                                        className=\"form-control\"\r\n                                        placeholder={\"Wick\"}\r\n                                        min={1}\r\n                                        max={100}\r\n                                        defaultValue={18}\r\n                                        {...register('age', {\r\n                                            required: false,\r\n                                        })}\r\n                                        onInput={(e)=> {e.currentTarget!.nextElementSibling!.innerHTML = e.currentTarget.value}}\r\n                                    />\r\n                                    <span className=\" input-group-text\">18</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mb-3 px-5 mt-2\">\r\n                                <label htmlFor=\"adress\" className=\"form-label\">\r\n                                    Residence\r\n                                </label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id={'adress'}\r\n                                    className=\"form-control\"\r\n                                    placeholder={\"вулиця Чуднівська, 103, Житомир, Житомирська область, 10005\"}\r\n                                />\r\n                            </div>\r\n                            <div className=\"px-5 mb-3 padding-bottom text-center text-sm-start\">\r\n                                <button className={\"btn btn-primary me-1 px-4\"} type={\"submit\"}>Sign In</button>\r\n                                <button className={\"btn btn-secondary me-1 px-4\"} type={\"submit\"}><Google height={18} width={18}/></button>\r\n                            </div>\r\n                            <p className={\"px-5 text-center text-sm-start\"}><Link to={\"/Account\"}>Have an account?</Link></p>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RegistrationPage;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Discounts\\Discounts.tsx",["285","286","287","288","289","290"],[],"import React, {useEffect, useState} from 'react';\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {\r\n    fetch_all_categories, fetch_all_wares,\r\n    fetch_discount_wares,\r\n    fetch_discount_wares_authorized, fetch_novelty_wares\r\n} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {CaretDown, CaretUp} from \"react-bootstrap-icons\";\r\nimport WareMockup from \"../../components/WareMockup\";\r\n\r\n\r\nconst Discounts = () => {\r\n    const dispatch = useAppDispatch()\r\n    const {error,isLoading,discountWares} = useAppSelector(state => state.wareReducer)\r\n    const {isAuthorized} = useAppSelector(state => state.authorizationReducer)\r\n    const [sortField, setSortField] = useState({value: \"Name\", isReverse: false})\r\n    const [categoryId, setCategoryId] = useState<number | null>(null)\r\n    const [countOfRecords, setCountOfRecords] = useState(12)\r\n    const categories = useAppSelector(state => state.wareReducer.allCategories.categories)\r\n\r\n    useEffect(() => {\r\n        fetch_all()\r\n    }, [sortField, categoryId, isAuthorized, countOfRecords])\r\n    useEffect(() => {\r\n        dispatch(fetch_all_categories())\r\n    }, [])\r\n    const fetch_all = () => {\r\n        isAuthorized ? dispatch(fetch_discount_wares_authorized({\r\n            sortBy: {value: sortField.value, isReverse: sortField.isReverse},\r\n            categoryId: categoryId === null ? null : categoryId,\r\n            countOfRecords: countOfRecords\r\n        })) : dispatch(fetch_discount_wares({\r\n            sortBy: {value: sortField.value, isReverse: sortField.isReverse},\r\n            categoryId: categoryId === null ? null : categoryId,\r\n            countOfRecords: countOfRecords\r\n        }))\r\n    }\r\n    const changeSortHandler = (field: string) => {\r\n        if (field === \"PriceUp\")\r\n            setSortField({value: \"Price\", isReverse: false})\r\n\r\n        if (field === \"PriceDown\")\r\n            setSortField({value: \"Price\", isReverse: true})\r\n    }\r\n    document.title = \"Discounts\"\r\n    return (\r\n        <div className=\"container d-block mb-5\">\r\n            <div className=\"d-block\">\r\n                <br/>\r\n                <br/>\r\n                <div className={'text-center row mt-3'}>\r\n                    <div className=\"col\">\r\n                        <p>Sort {sortField.isReverse ? <CaretDown/> : <CaretUp/>}</p>\r\n                        <select onChange={e => changeSortHandler(e.currentTarget.value)}\r\n                                className={'form-select'}>\r\n                            <option value=\"PriceUp\">Cheaper</option>\r\n                            <option value=\"PriceDown\">More expensive</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <p>Category</p>\r\n                        <div className=\"input-group\">\r\n                            <select onChange={(e) => setCategoryId(Number(e.currentTarget.value))} className={'form-select py-0'}>\r\n                                {categories?.map(item => (\r\n                                    <option value={item.id}>{item.name}</option>\r\n                                ))}\r\n                            </select>\r\n                            <span onClick={(e:any) => {setCategoryId(null);e.currentTarget.previousElementSibling.value = \"\"}} className=\"input-group-text hover\">CLEAR</span>\r\n                        </div>\r\n                    </div>\r\n                    <form className=\"d-flex input-group-sm mt-3\" role=\"search\">\r\n                        <input className=\"form-control py-0\" type=\"search\" placeholder=\"Search by name\"/>\r\n                        <button onClick={(e: any) => {\r\n                            dispatch(isAuthorized ? fetch_discount_wares_authorized({keyWords: e.currentTarget.previousElementSibling!.value}) : fetch_discount_wares({keyWords: e.currentTarget.previousElementSibling!.value}));\r\n                            e.preventDefault()\r\n                        }} className=\"btn btn-outline-success\" type=\"submit\">Search\r\n                        </button>\r\n                        <button onClick={(e:any) => {fetch_all();e.preventDefault();e.currentTarget.previousElementSibling!.previousElementSibling!.value = \"\"}} className={'btn btn-outline-primary'}>Reset</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div className=\"text-center text-xxl-start row\">\r\n                {discountWares?.map(item =>\r\n                    <WareMockup key={item.id} item={item}/>\r\n                )}\r\n            </div>\r\n            {discountWares.length >= countOfRecords ? <button onClick={e => setCountOfRecords(countOfRecords+12)} className={'btn btn-outline-secondary position-absolute start-50 mt-5 mb-5 py-1'}>More</button> : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Discounts;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Novelty\\Novelty.tsx",["291","292","293","294","295","296","297","298","299"],[],"import React, {useEffect, useState} from 'react';\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {\r\n    fetch_all_categories,\r\n    fetch_all_wares,\r\n    fetch_discount_wares, fetch_discount_wares_authorized, fetch_favorite_wares,\r\n    fetch_novelty_wares, fetch_novelty_wares_authorized\r\n} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {CaretDown, CaretUp} from \"react-bootstrap-icons\";\r\nimport WareMockup from \"../../components/WareMockup\";\r\nimport Loading from \"../Layout/Loading\";\r\n\r\nconst Novelty = () => {\r\n    const dispatch = useAppDispatch()\r\n    const {error,isLoading,noveltyWares} = useAppSelector(state => state.wareReducer)\r\n    const {isAuthorized} = useAppSelector(state => state.authorizationReducer)\r\n    const [sortField, setSortField] = useState({value: \"Name\", isReverse: false})\r\n    const [categoryId, setCategoryId] = useState<number | null>(null)\r\n    const categories = useAppSelector(state => state.wareReducer.allCategories.categories)\r\n    const [countOfRecords, setCountOfRecords] = useState(12)\r\n\r\n    useEffect(() => {\r\n        fetch_all()\r\n    }, [sortField, categoryId,  isAuthorized, countOfRecords])\r\n    useEffect(() => {\r\n        dispatch(fetch_all_categories())\r\n    }, [])\r\n    const fetch_all = () => {\r\n        isAuthorized ? dispatch(fetch_novelty_wares_authorized({\r\n            sortBy: {value: sortField.value, isReverse: sortField.isReverse},\r\n            categoryId: categoryId === null ? null : categoryId,\r\n            countOfRecords: countOfRecords\r\n        })) : dispatch(fetch_novelty_wares({\r\n            sortBy: {value: sortField.value, isReverse: sortField.isReverse},\r\n            categoryId: categoryId === null ? null : categoryId,\r\n            countOfRecords: countOfRecords\r\n        }))\r\n    }\r\n    const changeSortHandler = (field: string) => {\r\n        if (field === \"PriceUp\")\r\n            setSortField({value: \"Price\", isReverse: false})\r\n\r\n        if (field === \"PriceDown\")\r\n            setSortField({value: \"Price\", isReverse: true})\r\n    }\r\n\r\n    document.title = \"Novelty\"\r\n    return (\r\n        <div className=\"container d-block\">\r\n            <div className=\"d-block\">\r\n                <br/>\r\n                <br/>\r\n                <div className={'text-center row mt-3'}>\r\n                    <div className=\"col\">\r\n                        <p>Sort {sortField.isReverse ? <CaretDown/> : <CaretUp/>}</p>\r\n                        <select onChange={e => changeSortHandler(e.currentTarget.value)}\r\n                                className={'form-select'}>\r\n                            <option value=\"PriceUp\">Cheaper</option>\r\n                            <option value=\"PriceDown\">More expensive</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <p>Category</p>\r\n                        <div className=\"input-group\">\r\n                            <select onChange={(e) => setCategoryId(Number(e.currentTarget.value))} className={'form-select py-0'}>\r\n                                {categories?.map(item => (\r\n                                    <option value={item.id}>{item.name}</option>\r\n                                ))}\r\n                            </select>\r\n                            <span onClick={(e:any) => {setCategoryId(null);e.currentTarget.previousElementSibling.value = \"\"}} className=\"input-group-text hover\">CLEAR</span>\r\n                        </div>\r\n                    </div>\r\n                    <form className=\"d-flex input-group-sm mt-3\" role=\"search\">\r\n                        <input className=\"form-control py-0\" type=\"search\" placeholder=\"Search by name\"/>\r\n                        <button onClick={(e: any) => {\r\n                            dispatch(isAuthorized ? fetch_novelty_wares_authorized({keyWords: e.currentTarget.previousElementSibling!.value}) : fetch_novelty_wares({keyWords: e.currentTarget.previousElementSibling!.value}));\r\n                            e.preventDefault()\r\n                        }} className=\"btn btn-outline-success\" type=\"submit\">Search\r\n                        </button>\r\n                        <button onClick={(e:any) => {fetch_all();e.preventDefault();e.currentTarget.previousElementSibling!.previousElementSibling!.value = \"\"}} className={'btn btn-outline-primary'}>Reset</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div className=\"text-center text-xxl-start row\">\r\n                {noveltyWares?.map(item =>\r\n                    <WareMockup key={item.id} item={item}/>\r\n                )}\r\n            </div>\r\n            {noveltyWares.length >= countOfRecords ? <button onClick={e => setCountOfRecords(countOfRecords+12)} className={'btn btn-outline-secondary position-absolute start-50 mt-5 mb-5 py-1'}>More</button> : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Novelty;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\components\\WareMockup.tsx",["300","301","302","303"],[],"import React, {FC, useEffect, useRef, useState} from 'react';\r\nimport {IWare} from \"../types/ware\";\r\nimport \"./WareMockup.module.css\"\r\nimport {Heart, HeartFill} from \"react-bootstrap-icons\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useAppDispatch} from \"../hooks/redux\";\r\nimport {wareReducer} from \"../redux/reducers/wareReducer\";\r\nimport {add_to_favorite, remove_from_favorite} from \"../redux/action_creators/ware_action_creator\";\r\nimport {ImagesEndpoint} from \"../global_variables\";\r\n\r\ninterface IWareMockupProps{\r\n    item: IWare\r\n}\r\nconst WareMockup:FC<IWareMockupProps> = ({item}) => {\r\n    const dispatch = useAppDispatch()\r\n    const [liked, setLiked] = useState<boolean>(item.isFavorite != null && true ? item.isFavorite : false)\r\n    console.log(item.isFavorite)\r\n    const navigate = useNavigate()\r\n\r\n    const handleClick = () => {\r\n        setLiked(!liked)\r\n        dispatch(liked ? remove_from_favorite(item.id) : add_to_favorite(item.id))\r\n    }\r\n    useEffect(() => {\r\n        setLiked(item.isFavorite ?? liked)\r\n    }, [item.isFavorite])\r\n    return (\r\n        <div className=\"grow card hover shadow mt-4 me-lg-4 col-12 col-md-4 mx-auto mx-lg-3 d-inline-block\" style={{\"width\": \"18rem\"}}>\r\n            <Link className={'text-decoration-none'} to={`/Wares/${item.id}`}>\r\n                <img\r\n                    style={{'objectFit': 'cover', width: \"100%\", height: 350}}\r\n                    src={`${ImagesEndpoint}/Get/${item.thumbnail}`}\r\n                    className=\"card-img-top blur-elem pt-3\" alt=\"...\"/>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\"><p className={'d-inline'}>{item.name}</p></h5>\r\n                    <p className=\"card-text text-muted\">{item.sizes}</p>\r\n                    {item.countInStorage > 0 ? <>\r\n                        {item.isDiscount ?\r\n                            <>\r\n                                <p className=\"text-danger d-inline\">{item.price} грн.</p>\r\n                                <p className=\"text-muted d-inline\">\r\n                                    <del>{item.oldPrice} грн.</del>\r\n                                </p>\r\n                            </>\r\n                        :\r\n                            <>\r\n                                <p className=\"text-danger d-inline\">{item.price} грн.</p>\r\n                            </>\r\n                        }\r\n\r\n                    </> : <p className={'text-decoration-underline'}>Ended</p>}\r\n                </div>\r\n            </Link>\r\n            {item.isDiscount ? (<p className=\"position-absolute top-0 start-0 bg-danger px-2 py-1 m-2 text-white\">-{100 - Math.floor(100 * item.price / item.oldPrice)}%</p>) : <></>}\r\n            {item.countInStorage < 10 ? (<p className=\"position-absolute top-0 end-0 bg-danger px-2 py-1 m-2 text-white\">{item.countInStorage < 1 ? <>Ended</> : <>Ends</>}</p>) : <></>}\r\n            <button className=\"btn position-absolute bottom-0 end-0\" onClick={handleClick}>{liked ? <HeartFill height={20} width={20}/> : <Heart height={20} width={20}/>}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WareMockup;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\WarePage\\WarePage.tsx",["304","305","306","307"],[],"import React, {useEffect, useState} from 'react';\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {add_to_cart, add_to_favorite, fetch_ware_by_id} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {ButtonGroup, Carousel} from \"react-bootstrap\";\r\nimport {PencilSquare} from \"react-bootstrap-icons\";\r\nimport {ImagesEndpoint} from \"../../global_variables\";\r\nimport {NotificationReducer} from \"../../redux/reducers/NotificationReducer\";\r\n\r\nconst WarePage = () => {\r\n    const id = useParams()\r\n    const dispatch = useAppDispatch()\r\n    const {getByIdWare} = useAppSelector(state => state.wareReducer)\r\n    const [size, setSize] = useState<string | null>(null)\r\n\r\n    useEffect(() => {\r\n        if (id !== undefined) {\r\n            dispatch(fetch_ware_by_id(Number(id.id)))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (id !== undefined) {\r\n            dispatch(fetch_ware_by_id(Number(id.id)))\r\n        }\r\n    }, [id])\r\n    const AddToCartHandler = () => {\r\n        if (size === null || size === \"\"){\r\n            dispatch(NotificationReducer.actions.SHOW_ERROR_MESSAGE('Error, please select size!'))\r\n            return;\r\n        }\r\n        dispatch(add_to_cart(getByIdWare!.id, size))\r\n    }\r\n    document.title = \"Ware\"\r\n    return (\r\n        <>\r\n            <div className={'container-fluid bg-dark bg-opacity-10 py-5'}>\r\n                <div className={'container'}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-lg-6\">\r\n                            <Carousel variant={'dark'}>\r\n                                {getByIdWare?.images?.split(\" \").map(item => (\r\n                                    <Carousel.Item>\r\n                                        <img\r\n                                            style={{objectFit: 'cover'}}\r\n                                            height={500}\r\n                                            className=\"d-block w-50 text-center mx-auto\"\r\n                                            src={`${ImagesEndpoint}/Get/${item}`}\r\n                                            alt=\"First slide\"\r\n                                        />\r\n                                    </Carousel.Item>\r\n                                ))}\r\n                            </Carousel>\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <h1 className={'mt-5 text-center text-md'}>{getByIdWare?.name}</h1>\r\n                            <hr className={'d-md-none'}/>\r\n                            <h5 className={'text-center text-md'}>CATEGORY: {getByIdWare?.categoryName} | BRAND: {getByIdWare?.brandName}</h5>\r\n                            <hr className={'d-md-none'}/>\r\n                            {getByIdWare?.countInStorage! > 0 ? <h4 className={'text-center text-md'}>{getByIdWare?.isDiscount ?\r\n                                <p className={'text-danger'}>{getByIdWare?.price} грн. <del\r\n                                    className={'text-muted'}>{getByIdWare?.oldPrice} грн</del></p> :\r\n                                <p>{getByIdWare?.price} грн</p>}</h4> : <h4 className={'text-decoration-underline text-center my-4'}>Ended</h4>}\r\n                            <hr className={'d-md-none'}/>\r\n                            <form className={'bg-dark bg-opacity-25 px-4 pt-3 pb-5'}>\r\n                                <p className={'text-center text-md'}>Розмір</p>\r\n                                <div className={'text-center text-md'}>\r\n                                    <select onChange={e => setSize(e.currentTarget.value)} className={'form-select form-select-sm'}>\r\n                                        <option value=\"\"></option>\r\n                                        {getByIdWare?.sizes.split(\" \").map(item => (\r\n                                            <option value={item}>{item}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                                <div className={'text-center mt-4'}>\r\n                                    <ButtonGroup className={''}>\r\n                                        <button disabled={getByIdWare?.countInStorage! > 0 ? false : true}\r\n                                                onClick={e => {e.preventDefault();AddToCartHandler()}}\r\n                                                className={'btn btn-success py-4 py-lg-4 px-5 mb-4 mb-md-0 px-lg'}>Add to cart\r\n                                        </button>\r\n                                        <button onClick={() => dispatch(add_to_favorite(getByIdWare!.id))}\r\n                                                className={'btn btn-primary py-4 py-lg-4 px-5 mb-4 mb-md-0 px-lg'}>Add to\r\n                                            favorite\r\n                                        </button>\r\n                                    </ButtonGroup>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={'container mt-5 mb-5'}>\r\n                <h4 className={'text-center mb-5'}>Description</h4>\r\n                <pre className={'fs-5 desc'}>\r\n                    {getByIdWare?.description}\r\n                </pre>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default WarePage;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Layout\\FavoriteWaresModal.tsx",["308","309","310","311"],[],"import React, {FC, useEffect} from 'react';\r\nimport {Modal} from \"react-bootstrap\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {Heart, Heartbreak, HeartFill} from \"react-bootstrap-icons\";\r\nimport ReactDOM from 'react-dom'\r\nimport {\r\n    fetch_all_wares_with_favorites,\r\n    fetch_discount_wares_authorized,\r\n    fetch_favorite_wares,\r\n    remove_from_favorite\r\n} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ImagesEndpoint} from \"../../global_variables\";\r\n\r\ninterface IFavoriteWares {\r\n    show: boolean,\r\n    closeHandler: () => void,\r\n}\r\n\r\nconst FavoriteWaresModal: FC<IFavoriteWares> = ({show, closeHandler}) => {\r\n    const dispatch = useAppDispatch()\r\n    const {isAuthorized} = useAppSelector(state => state.authorizationReducer)\r\n    const {favoriteWares} = useAppSelector(state => state.wareReducer)\r\n    useEffect(() => {\r\n        dispatch(fetch_favorite_wares())\r\n    }, [])\r\n    useEffect(() => {\r\n        dispatch(fetch_favorite_wares())\r\n    }, [show])\r\n    if (!show) return null\r\n    return ReactDOM.createPortal(\r\n        <Modal className={'modal-md'} show={show} onHide={closeHandler}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Favorite wares</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {!isAuthorized ?\r\n                    <h3 className={'text-center my-4'}>Ви не авторизовані <Heartbreak className={'mb-1'}/></h3> :\r\n                    <>\r\n                        {favoriteWares.length > 0 ?\r\n                            favoriteWares.map(item => (\r\n                                    <>\r\n                                        <div className=\"card mx-auto mb-3\">\r\n                                            <button className=\"btn position-absolute bottom-0 end-0\" onClick={() => dispatch(remove_from_favorite(item.wareId!,() => {\r\n                                                dispatch(fetch_favorite_wares())\r\n                                                dispatch(fetch_discount_wares_authorized())\r\n                                            }))}><HeartFill height={20} width={20}/></button>\r\n                                            <img style={{\"width\": \"100%\",height: 350, \"margin\": \"auto\", objectFit: 'cover'}}\r\n                                                 src={`${ImagesEndpoint}/Get/${item.thumbnail}`}\r\n                                                 className=\"card-img-top pt-2\" alt=\"...\"/>\r\n                                            <div className=\"card-body\">\r\n                                                <h5 className=\"card-title\">{item.name}</h5>\r\n                                                <p className=\"card-text\">{item.sizes}</p>\r\n                                                <p className={`card-text ${item.isDiscount ? 'text-danger' : ''}`}>{item.price} грн.</p>\r\n                                                {item.isDiscount ? <p className=\"card-text\">\r\n                                                    <del>{item.oldPrice} грн.</del>\r\n                                                </p> : <></>\r\n                                                }\r\n                                                <Link onClick={closeHandler} to={`/Wares/${item.wareId!}`}\r\n                                                      className=\"btn btn-primary\">More</Link>\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            )\r\n                            : <p>Oops, it's empty</p>}\r\n                    </>\r\n                }\r\n\r\n            </Modal.Body>\r\n        </Modal>,\r\n        document.getElementById('portal') as HTMLElement\r\n    );\r\n};\r\n\r\nexport default FavoriteWaresModal;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Layout\\CartModal.tsx",["312","313","314","315"],[],"import React, {FC, useEffect, useState} from 'react';\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {Button, ButtonGroup, Modal} from \"react-bootstrap\";\r\nimport {Basket, DashCircle, Heartbreak, PlusCircle, XLg} from \"react-bootstrap-icons\";\r\nimport {\r\n    changeBasketWareCount, clearBasket, confirmOrder,\r\n    fetch_cart_wares,\r\n    removeFromBasket\r\n} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ImagesEndpoint} from \"../../global_variables\";\r\n\r\ninterface ICardModal {\r\n    show: boolean,\r\n    closeHandler: () => void,\r\n}\r\n\r\nconst CartModal: FC<ICardModal> = ({show, closeHandler}) => {\r\n    const dispatch = useAppDispatch()\r\n    const {isAuthorized} = useAppSelector(state => state.authorizationReducer)\r\n    const {cartWares} = useAppSelector(state => state.wareReducer)\r\n    const [sum, setSum] = useState(0)\r\n    useEffect(() => {\r\n        dispatch(fetch_cart_wares())\r\n        let inter = setInterval(() => {\r\n            if (cartWares.length > 0) dispatch(fetch_cart_wares())\r\n        }, 600)\r\n        return function (){\r\n            clearInterval(inter)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        dispatch(fetch_cart_wares())\r\n    }, [show])\r\n    useEffect(() => {\r\n        let summ = 0;\r\n        cartWares.forEach((item) => {\r\n            summ += (item.price * item.count);\r\n        })\r\n        setSum(summ)\r\n    }, [cartWares])\r\n    if (!show) return null\r\n    return ReactDOM.createPortal(\r\n        <Modal show={show} onHide={closeHandler}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Cart</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {!isAuthorized ?\r\n                    <h3 className={'text-center my-4'}>Ви не авторизовані <Heartbreak className={'mb-1'}/></h3> : <></>}\r\n                {!isAuthorized ?\r\n                    <h3 className={'text-center my-4'}>Ви не авторизовані <Heartbreak className={'mb-1'}/></h3> :\r\n                    <>\r\n                        {cartWares.length > 0 ?\r\n                            cartWares.map(item => (\r\n                                    <>\r\n                                        <div className=\"card mx-auto mb-3\">\r\n                                            <button onClick={() => {dispatch(removeFromBasket(item.id));dispatch(fetch_cart_wares())}} className={\"p-0 btn btn-secondary position-absolute top-0 end-0 mt-3 me-3\"}><XLg height={20} width={20}/></button>\r\n                                            <img style={{\"width\": \"100%\", height: 350, objectFit: 'cover'}}\r\n                                                 src={`${ImagesEndpoint}/Get/${item.thumbnail}`}\r\n                                                 className=\"card-img-top\" alt=\"...\"/>\r\n                                            <div className=\"card-body\">\r\n                                                <h5 className=\"card-title\">{item.name}</h5>\r\n                                                <p className=\"card-text\">Size:{item.size!}</p>\r\n                                                <p className=\"card-text\">{item.price} грн.</p>\r\n                                                {item.isDiscount ? <p className=\"card-text\">\r\n                                                    <del>{item.oldPrice} грн.</del>\r\n                                                </p> : <></>\r\n                                                }\r\n                                                <Link onClick={closeHandler} to={`/Wares/${item.id!}`}\r\n                                                      className=\"btn btn-primary\">More</Link>\r\n                                                <button onClick={(e: any) => {\r\n                                                    let count = Number(e.currentTarget.nextSibling?.innerHTML)\r\n                                                    if(count < item.countInStorage){\r\n                                                        dispatch(changeBasketWareCount(item.id, Number(e.currentTarget.nextSibling.innerHTML) + 1))\r\n                                                        e.currentTarget.nextSibling.innerHTML = Number(e.currentTarget.nextSibling.innerHTML) + 1\r\n                                                    }\r\n                                                }\r\n                                                } className={'btn btn-secondary mb-1 ms-3 me-3 p-0'}><PlusCircle height={20} width={20}/></button>\r\n                                                <p className={'d-inline'}>{item.count}</p>\r\n                                                <button onClick={(e: any) => {\r\n                                                    let count = Number(e.currentTarget.previousElementSibling?.innerHTML)\r\n                                                    if(count > 1){\r\n                                                        dispatch(changeBasketWareCount(item.id, count - 1));\r\n                                                        e.currentTarget.previousElementSibling.innerHTML = count - 1\r\n                                                    }\r\n                                                }} className={'btn btn-secondary mb-1 ms-3 p-0'}><DashCircle height={20} width={20}/></button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            )\r\n                            : <p>Oops, it's empty</p>}\r\n                        <div className=\"modal-footer\">\r\n                            <p className={'my-3 d-inline p-2'}>Order for the amount:{sum} грн.</p>\r\n                            <ButtonGroup aria-label=\"Basic example\">\r\n                                <button disabled={cartWares.length < 1} onClick={() => {\r\n                                    if(cartWares.length > 0)\r\n                                        dispatch(clearBasket(() => dispatch(fetch_cart_wares())))}\r\n                                } type=\"button\" className=\"btn btn-danger\">Clear basket</button>\r\n                                <button disabled={cartWares.length < 1} onClick={() => {\r\n                                    if(cartWares.length > 0)\r\n                                        dispatch(confirmOrder(() => dispatch(fetch_cart_wares())))}\r\n                                } type=\"button\" className=\"btn btn-primary\">Confirm order</button>\r\n                            </ButtonGroup>\r\n                        </div>\r\n                    </>\r\n                }\r\n            </Modal.Body>\r\n        </Modal>,\r\n        document.getElementById('portal') as HTMLElement\r\n    );\r\n};\r\n\r\nexport default CartModal;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\NewWare\\NewWare.tsx",["316","317","318"],[],"import React, {useEffect, useState} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {create_ware, fetch_all_brands, fetch_all_categories} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\ninterface base{\r\n    item: string | base | ArrayBuffer | null\r\n}\r\nconst NewWare = () => {\r\n    const dispatch = useAppDispatch()\r\n    const categories = useAppSelector(state => state.wareReducer.allCategories.categories)\r\n    const brands = useAppSelector(state => state.wareReducer.allBrands.brands)\r\n    const navigate = useNavigate()\r\n    const [thumbnail, setThumbnail] = useState<ArrayBuffer | null | string>(\"\");\r\n    const [images, setImages] =  useState<any>([]);\r\n    const {\r\n        register,\r\n        formState: {\r\n            errors,\r\n        },\r\n        handleSubmit,\r\n    } = useForm()\r\n    const submitHandler = (data: any) => {\r\n        dispatch(create_ware({\r\n            name: data.Name,\r\n            brandId: data.Brand,\r\n            categoryId: data.Category,\r\n            description: data.Description,\r\n            sizes: data.Sizes,\r\n            price: data.Price,\r\n            oldPrice: data.OldPrice === \"\" ? null : data.OldPrice,\r\n            isDiscount: data.IsDiscount,\r\n            countInStorage: data.CountInStorage,\r\n            thumbnail: thumbnail,\r\n            images: images.join(\" \"),\r\n        }, () => {navigate(-1)}))\r\n    }\r\n    const selectThumbnailHandler = (e:any) => {\r\n        let file = e.target.files[0]\r\n        console.log(file)\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = function () {\r\n\r\n            setThumbnail(reader.result)\r\n        };\r\n        reader.onerror = function (error) {\r\n            console.log('Error: ', error);\r\n        };\r\n    }\r\n    const selectImagesHandler = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let files = e.target.files\r\n        for (let i = 0; i < files!.length; i++){\r\n            await imgToBase64(files![i])\r\n        }\r\n    }\r\n    const imgToBase64 = async(file:any) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => {\r\n            setImages((prevState: any) => {\r\n                return [...prevState, reader.result];\r\n            });\r\n        };\r\n    }\r\n    useEffect(() => {\r\n        dispatch(fetch_all_categories())\r\n        dispatch(fetch_all_brands())\r\n    }, [])\r\n    document.title = \"New ware\"\r\n    return (\r\n        <div className={'container-fluid'}>\r\n            <div className={'col-md-5 col-lg-4 m-auto'}>\r\n                <div className={'my-5 border border-1 py-3'}>\r\n                    <div className={'w-100 border-bottom border-1 py-3'}>\r\n                        <h5 className=\"text-center\">Wear | New ware</h5>\r\n                        {/*<p className={\"text-danger text-center\"}>{server_errors ? server_errors : \"\"}</p>*/}\r\n                    </div>\r\n                    <form onSubmit={handleSubmit(submitHandler)}>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Name\" className=\"form-label\">Name</label>\r\n                            <input\r\n                                {...register('Name', {\r\n                                required: true,\r\n                            })}type=\"text\" className=\"form-control\" id=\"Name\"/>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Brand\" className=\"form-label\">Brand</label>\r\n                            <select onClick={() => dispatch(fetch_all_brands())} {...register('Brand', {\r\n                                required: true,\r\n                            })} className={'form-select'} id=\"Brand\">\r\n                                <option></option>\r\n                                {brands?.map(item => (\r\n                                    <option value={item.id}>{item.name}</option>\r\n                                ))}\r\n                            </select>\r\n                            {/*<Link target=\"_blank\" to={\"/NewBrand\"}>Create new brand</Link>*/}\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Category\" className=\"form-label\">Category</label>\r\n                            <select onClick={() => dispatch(fetch_all_categories())} {...register('Category', {\r\n                                required: true,\r\n                            })} className={'form-select'} id=\"Category\">\r\n                                <option></option>\r\n                                {categories?.map(item => (\r\n                                    <option value={item.id}>{item.name}</option>\r\n                                ))}\r\n                            </select>\r\n                            <Link target=\"_blank\" to={\"/NewCategory\"}>Create new category</Link>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Sizes\" className=\"form-label\">Sizes</label>\r\n                            <input {...register('Sizes', {\r\n                                required: true,\r\n                            })} type=\"text\" className=\"form-control\" id=\"Sizes\"/>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Price\" className=\"form-label\">Price</label>\r\n                            <input {...register('Price', {\r\n                                required: true,\r\n                            })} type=\"text\" className=\"form-control\" id=\"Price\"/>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"OldPrice\" className=\"form-label\">Old price</label>\r\n                            <input {...register('OldPrice', {\r\n                                required: false,\r\n                            })} type=\"text\" className=\"form-control\" id=\"OldPrice\"/>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"IsDiscount\" className=\"form-label me-2\">Is discount</label>\r\n                            <input {...register('IsDiscount', {\r\n                                required: false,\r\n                            })} className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"IsDiscount\"/>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"CountInStorage\" className=\"form-label\">Count in storage</label>\r\n                            <input {...register('CountInStorage', {\r\n                                required: true,\r\n                            })} className=\"form-control\" type=\"number\" id=\"CountInStorage\"/>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Thumbnail\" className=\"form-label\">Thumbnail</label>\r\n                            <input {...register('Thumbnail', {\r\n                                required: true,\r\n                            })} accept=\"image/png, image/gif, image/jpeg\" onChange={(e:any) => selectThumbnailHandler(e)} className=\"form-control\" type=\"file\" id=\"Thumbnail\"/>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Images\" className=\"form-label\">Images</label>\r\n                            <input {...register('Images', {\r\n                                required: true,\r\n                            })} accept=\"image/png, image/gif, image/jpeg\" multiple={true} onChange={(e:any) => selectImagesHandler(e)} className=\"form-control\" type=\"file\" id=\"Images\"/>\r\n                            <button onClick={(e:any) => {setImages([]);e.currentTarget.previousElementSibling.value = \"\"}} className={'btn btn-primary'}>Reset</button>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Description\" className=\"form-label\">Description</label>\r\n                            <textarea {...register('Description', {\r\n                                required: true,\r\n                            })} id={'Description'} className={'form-control'}></textarea>\r\n                        </div>\r\n                        <div className={'px-5'}>\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                            <button type=\"reset\" className=\"btn btn-danger\">Reset</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewWare;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\NewCategory\\NewCategory.tsx",["319","320","321","322","323"],[],"import React from 'react';\r\nimport {\r\n    create_new_category,\r\n    fetch_all_brands,\r\n    fetch_all_categories\r\n} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useAppDispatch} from \"../../hooks/redux\";\r\nimport {useForm} from \"react-hook-form\";\r\n\r\nconst NewCategory = () => {\r\n    const dispatch = useAppDispatch()\r\n    const navigate = useNavigate()\r\n    const {\r\n        register,\r\n        formState: {\r\n            errors,\r\n        },\r\n        handleSubmit,\r\n    } = useForm()\r\n\r\n    const submitHandler = (data: any) => {\r\n        const statusCode = dispatch(create_new_category(data.Name, (statusCode) => { if (statusCode === 200) {\r\n            navigate(\"/\")\r\n        }}))\r\n    }\r\n    document.title = \"New category\"\r\n    return (\r\n        <div className={'container-fluid'}>\r\n            <div className={'col-md-5 col-lg-4 m-auto'}>\r\n                <div className={'my-5 border border-1 py-3'}>\r\n                    <div className={'w-100 border-bottom border-1 py-3'}>\r\n                        <h5 className=\"text-center\">Wear | New category</h5>\r\n                        {/*<p className={\"text-danger text-center\"}>{server_errors ? server_errors : \"\"}</p>*/}\r\n                    </div>\r\n                    <form onSubmit={handleSubmit(submitHandler)}>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Name\" className=\"form-label\">Name</label>\r\n                            <input\r\n                                {...register('Name', {\r\n                                    required: true,\r\n                                })} type=\"text\" className=\"form-control\" id=\"Name\"/>\r\n                        </div>\r\n                        <div className={'px-5'}>\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewCategory;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\NewBrand\\NewBrand.tsx",["324","325","326"],[],"import React from 'react';\r\nimport {useAppDispatch} from \"../../hooks/redux\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {create_new_brand, create_new_category} from \"../../redux/action_creators/ware_action_creator\";\r\n\r\nconst NewBrand = () => {\r\n    const dispatch = useAppDispatch()\r\n    const {\r\n        register,\r\n        formState: {\r\n            errors,\r\n        },\r\n        handleSubmit,\r\n    } = useForm()\r\n\r\n    const submitHandler = (data: any) => {\r\n        const statusCode = dispatch(create_new_brand({name: data.Name, countryManufactured: data.CountryManufactured, phone: data.Phone}, (statusCode) => statusCode))\r\n    }\r\n    document.title = \"New brand\"\r\n    return (\r\n        <div className={'container-fluid'}>\r\n            <div className={'col-md-5 col-lg-4 m-auto'}>\r\n                <div className={'my-5 border border-1 py-3'}>\r\n                    <div className={'w-100 border-bottom border-1 py-3'}>\r\n                        <h5 className=\"text-center\">Wear | New brand</h5>\r\n                        {/*<p className={\"text-danger text-center\"}>{server_errors ? server_errors : \"\"}</p>*/}\r\n                    </div>\r\n                    <form onSubmit={handleSubmit(submitHandler)}>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Name\" className=\"form-label\">Name</label>\r\n                            <input\r\n                                {...register('Name', {\r\n                                    required: true,\r\n                                })} type=\"text\" className=\"form-control\" id=\"Name\"/>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"Phone\" className=\"form-label\">Phone number</label>\r\n                            <input\r\n                                {...register('Phone', {\r\n                                    required: true,\r\n                                })} type=\"text\" className=\"form-control\" id=\"Phone\"/>\r\n                        </div>\r\n                        <div className=\"mt-2 mb-3 px-5\">\r\n                            <label htmlFor=\"CountryManufactured\" className=\"form-label\">Country manufactured</label>\r\n                            <input\r\n                                {...register('CountryManufactured', {\r\n                                    required: true,\r\n                                })} type=\"text\" className=\"form-control\" id=\"CountryManufactured\"/>\r\n                        </div>\r\n                        <div className={'px-5'}>\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewBrand;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\EditWare\\EditWare.tsx",["327","328","329","330","331","332","333"],[],"import React, {useEffect, useState} from 'react';\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {\r\n    create_ware,\r\n    fetch_all_brands,\r\n    fetch_all_categories,\r\n    fetch_ware_by_id\r\n} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {IGetByIdWare, IWare} from \"../../types/ware\";\r\nimport EditForm from \"./EditForm\";\r\n\r\nconst EditWare = () => {\r\n    const dispatch = useAppDispatch()\r\n    const {id} = useParams()\r\n    const getByIdWare = useAppSelector(state => state.wareReducer.getByIdWare)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetch_all_categories())\r\n        dispatch(fetch_all_brands())\r\n        dispatch(fetch_ware_by_id(Number(id!)))\r\n    }, [])\r\n\r\n    document.title = \"Edit ware\"\r\n    return (\r\n        <div className={'container-fluid'}>\r\n            <div className={'col-md-5 col-lg-4 m-auto'}>\r\n                <div className={'my-5 border border-1 py-3'}>\r\n                    <div className={'w-100 border-bottom border-1 py-3'}>\r\n                        <h5 className=\"text-center\">Wear | Ware editing</h5>\r\n                        {/*<p className={\"text-danger text-center\"}>{server_errors ? server_errors : \"\"}</p>*/}\r\n                    </div>\r\n                    {getByIdWare != null ? <EditForm getByIdWare={getByIdWare}/> : <></>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditWare;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\EditWare\\EditForm.tsx",["334","335","336"],[],"import React, {FC, useState} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport {\r\n    create_ware,\r\n    fetch_all_brands,\r\n    fetch_all_categories,\r\n    update_ware\r\n} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {IGetByIdWare} from \"../../types/ware\";\r\nimport {wareReducer} from \"../../redux/reducers/wareReducer\";\r\n\r\ninterface IEditForm {\r\n    getByIdWare: IGetByIdWare,\r\n}\r\nconst EditForm:FC<IEditForm> = ({getByIdWare}) => {\r\n    const dispatch = useAppDispatch()\r\n    const [ware, setWare] = useState<IGetByIdWare | null>(getByIdWare)\r\n    const [thumbnail, setThumbnail] = useState<ArrayBuffer | null | string>(\"\");\r\n    const [images, setImages] =  useState<any>([]);\r\n    const categories = useAppSelector(state => state.wareReducer.allCategories.categories)\r\n    const brands = useAppSelector(state => state.wareReducer.allBrands.brands)\r\n    const navigate = useNavigate()\r\n    const {\r\n        register,\r\n        formState: {\r\n            errors,\r\n        },\r\n        handleSubmit,\r\n    } = useForm()\r\n    const submitHandler = (data: any) => {\r\n        dispatch(update_ware({\r\n            id: ware?.id!,\r\n            name: data.Name,\r\n            brandId: data.Brand,\r\n            categoryId: data.Category,\r\n            description: data.Description,\r\n            sizes: data.Sizes,\r\n            price: data.Price,\r\n            oldPrice: data.OldPrice,\r\n            isDiscount: data.IsDiscount,\r\n            countInStorage: data.CountInStorage,\r\n            thumbnail: thumbnail,\r\n            images: images.join(\" \"),\r\n        },(statusCode) => {dispatch(wareReducer.actions.CLEAR_WARE_BY_ID());navigate(-1)}))\r\n    }\r\n    const selectThumbnailHandler = (e:any) => {\r\n        let file = e.target.files[0]\r\n        console.log(file)\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = function () {\r\n            setThumbnail(reader.result)\r\n        };\r\n        reader.onerror = function (error) {\r\n            console.log('Error: ', error);\r\n        };\r\n    }\r\n    const selectImagesHandler = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let files = e.target.files\r\n        for (let i = 0; i < files!.length; i++){\r\n            await imgToBase64(files![i])\r\n        }\r\n    }\r\n    const imgToBase64 = async(file:any) => {\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => {\r\n            setImages((prevState: any) => {\r\n                return [...prevState, reader.result];\r\n            });\r\n        };\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit(submitHandler)}>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"Name\" className=\"form-label\">Name</label>\r\n                <input\r\n                    // onInput={(e) => setWare({...ware, name: \"\"})}\r\n                    {...register('Name', {\r\n                        required: true,\r\n                        value: ware?.name\r\n                    })} type=\"text\" className=\"form-control\" id=\"Name\"/>\r\n            </div>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"Brand\" className=\"form-label\">Brand</label>\r\n                <select onClick={() => dispatch(fetch_all_brands())} {...register('Brand', {\r\n                    required: true,\r\n                    value: ware?.brandId\r\n                })} className={'form-select'} id=\"Brand\">\r\n                    <option></option>\r\n                    {brands?.map(item => (\r\n                        <option value={item.id}>{item.name}</option>\r\n                    ))}\r\n                </select>\r\n                <Link target=\"_blank\" to={\"/NewBrand\"}>Create new brand</Link>\r\n            </div>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"Category\" className=\"form-label\">Category</label>\r\n                <select onClick={() => dispatch(fetch_all_categories())} {...register('Category', {\r\n                    required: true,\r\n                    value: ware?.categoryId\r\n                })} className={'form-select'} id=\"Category\">\r\n                    <option></option>\r\n                    {categories?.map(item => (\r\n                        <option value={item.id}>{item.name}</option>\r\n                    ))}\r\n                </select>\r\n                <Link target=\"_blank\" to={\"/NewCategory\"}>Create new category</Link>\r\n            </div>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"Sizes\" className=\"form-label\">Sizes</label>\r\n                <input {...register('Sizes', {\r\n                    required: true,\r\n                    value: ware?.sizes\r\n                })} type=\"text\" className=\"form-control\" id=\"Sizes\"/>\r\n            </div>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"Price\" className=\"form-label\">Price</label>\r\n                <input {...register('Price', {\r\n                    required: true,\r\n                    value: ware?.price\r\n                })} type=\"text\" className=\"form-control\" id=\"Price\"/>\r\n            </div>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"OldPrice\" className=\"form-label\">Old price</label>\r\n                <input {...register('OldPrice', {\r\n                    required: false,\r\n                    value: ware?.oldPrice\r\n                })} type=\"text\" className=\"form-control\" id=\"OldPrice\"/>\r\n            </div>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"IsDiscount\" className=\"form-label me-2\">Is discount</label>\r\n                <input {...register('IsDiscount', {\r\n                    required: false,\r\n                    value: ware?.isDiscount\r\n                })} className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"IsDiscount\"/>\r\n            </div>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"CountInStorage\" className=\"form-label\">Count in storage</label>\r\n                <input {...register('CountInStorage', {\r\n                    required: true,\r\n                    value: ware?.countInStorage\r\n                })} className=\"form-control\" type=\"number\" id=\"CountInStorage\"/>\r\n            </div>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"Thumbnail\" className=\"form-label\">Thumbnail</label>\r\n                <input {...register('Thumbnail', {\r\n                    required: false,\r\n                })} accept=\"image/png, image/gif, image/jpeg\" onChange={(e:any) => selectThumbnailHandler(e)} className=\"form-control\" type=\"file\" id=\"Thumbnail\"/>\r\n            </div>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"Images\" className=\"form-label\">Images</label>\r\n                <input {...register('Images', {\r\n                    required: false,\r\n                })} accept=\"image/png, image/gif, image/jpeg\" multiple={true} onChange={(e:any) => selectImagesHandler(e)} className=\"form-control\" type=\"file\" id=\"Images\"/>\r\n                <button onClick={(e:any) => {setImages([]);e.currentTarget.previousElementSibling.value = \"\"}} className={'btn btn-primary'}>Reset</button>\r\n            </div>\r\n            <div className=\"mt-2 mb-3 px-5\">\r\n                <label htmlFor=\"Description\" className=\"form-label\">Description</label>\r\n                <textarea {...register('Description', {\r\n                    required: true,\r\n                    value: ware?.description\r\n                })} id={'Description'} className={'form-control'}></textarea>\r\n            </div>\r\n            <div className={'px-5'}>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default EditForm;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\Cabinet.tsx",["337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361"],[],"import React, {useEffect, useState} from 'react';\r\nimport {\r\n    CaretDown,\r\n    CaretUp, EmojiExpressionless,\r\n    Google, Heart, Heartbreak,\r\n    HeartFill,\r\n    Mailbox,\r\n    Person,\r\n    PersonBadgeFill,\r\n    PlusCircle\r\n} from \"react-bootstrap-icons\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {sign_out} from \"../../redux/action_creators/authorization_action_creator\";\r\nimport {Button, ButtonGroup} from \"react-bootstrap\";\r\nimport {\r\n    delete_ware,\r\n    fetch_all_wares,\r\n    fetch_discount_wares,\r\n    fetch_discount_wares_authorized, fetch_favorite_wares, get_orders, remove_from_favorite\r\n} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {Link} from \"react-router-dom\";\r\nimport CabinetAccount from \"./CabinetAccount\";\r\nimport CabinetFavorite from \"./CabinetFavorite\";\r\nimport CabinetWares from \"./CabinetWares\";\r\nimport SignOutModal from \"./SignOutModal\";\r\nimport CabinetOrders from \"./CabinetOrders\";\r\nimport Loading from \"../Layout/Loading\";\r\nimport CabinetUsers from \"./CabinetUsers\";\r\nimport CabinetCategories from \"./CabinetCategories\";\r\n\r\nconst Cabinet = () => {\r\n    const user = useAppSelector(state => state.authorizationReducer.user)\r\n    const allWares = useAppSelector(state => state.wareReducer.allWares.wares)\r\n    const waresLoading = useAppSelector(state => state.wareReducer.allWares.isLoading)\r\n    const isLoading = useAppSelector(state => state.wareReducer)\r\n    const favoriteWares = useAppSelector(state => state.wareReducer.favoriteWares)\r\n    const [showSignOutModal, setShowSignOutModal] = useState(false)\r\n\r\n    const dispatch = useAppDispatch()\r\n    const [currentPage, setCurrentPage] = useState('account')\r\n    const signOutHandler = () => {\r\n        setShowSignOutModal(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (currentPage === 'wares')\r\n            dispatch(fetch_all_wares())\r\n        // if (currentPage === 'favorites')\r\n        //     dispatch(fetch_favorite_wares())\r\n        if (currentPage === 'orders')\r\n            dispatch(get_orders())\r\n    }, [currentPage])\r\n    document.title = \"Account\"\r\n    return (\r\n        <>\r\n            <div className={\"container\"}>\r\n                <h2 className={\"text-center display-6 mt-5\"}>Personal Account</h2>\r\n                <p onClick={signOutHandler} style={{cursor: 'pointer'}}\r\n                   className={\"text-decoration-underline text-center\"}>Sign Out</p>\r\n                <SignOutModal show={showSignOutModal} closeHandler={() => {setShowSignOutModal(false)}}/>\r\n            </div>\r\n            <div className={\"container\"}>\r\n                <div className={'text-center'}>\r\n                    <div className={'row'}>\r\n                        <Button onClick={() => setCurrentPage('account')}\r\n                                className={`hover-white col ${currentPage === 'account' ? 'opacity-75' : 'opacity-100'}`}\r\n                                variant=\"primary\">Account</Button>\r\n                        {user?.permissions?.includes(1) ? <>\r\n                            <Button onClick={() => setCurrentPage('wares')}\r\n                                    className={`hover-white col ${currentPage === 'wares' ? 'opacity-75' : 'opacity-100'}`}\r\n                                    variant=\"primary\">Wares</Button>\r\n                        </> : <></>}\r\n                        {user?.permissions?.includes(1) ? <>\r\n                            <Button onClick={() => setCurrentPage('orders')}\r\n                                    className={`hover-white col ${currentPage === 'orders' ? 'opacity-75' : 'opacity-100'}`}\r\n                                    variant=\"primary\">Orders</Button>\r\n                        </> : <></>}\r\n                        {user?.permissions?.includes(1) ? <>\r\n                            <Button onClick={() => setCurrentPage('categories')}\r\n                                    className={`hover-white col ${currentPage === 'categories' ? 'opacity-75' : 'opacity-100'}`}\r\n                                    variant=\"primary\">Categories</Button>\r\n                        </> : <></>}\r\n                        {user?.permissions?.includes(2) ? <>\r\n                            <Button onClick={() => setCurrentPage('users')}\r\n                                    className={`hover-white col ${currentPage === 'users' ? 'opacity-75' : 'opacity-100'}`}\r\n                                    variant=\"primary\">Users</Button>\r\n                        </> : <></>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`container ${currentPage === 'account' ? 'd-block' : 'd-none'}`}>\r\n                <CabinetAccount user={user}/>\r\n            </div>\r\n            <div className={`container-lg ${currentPage === 'wares' ? 'd-block' : 'd-none'}`}>\r\n                <CabinetWares allWares={allWares}/>\r\n            </div>\r\n            <div className={`container-fluid ${currentPage === 'orders' ? 'd-block' : 'd-none'}`}>\r\n                <CabinetOrders/>\r\n            </div>\r\n            <div className={`container-fluid ${currentPage === 'users' ? 'd-block' : 'd-none'}`}>\r\n                <CabinetUsers/>\r\n            </div>\r\n            <div className={`container-fluid ${currentPage === 'categories' ? 'd-block' : 'd-none'}`}>\r\n                <CabinetCategories/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Cabinet;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetFavorite.tsx",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetWares.tsx",["362","363","364","365"],[],"import React, {FC, useEffect, useState} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {CaretDown, CaretUp} from \"react-bootstrap-icons\";\r\nimport {delete_ware, fetch_all_categories, fetch_all_wares} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {IWare} from \"../../types/ware\";\r\nimport DeleteWareModel from \"./DeleteWareModel\";\r\nimport CabinetWareItem from \"./CabinetWareItem\";\r\n\r\ninterface ICabinetWares {\r\n    allWares: IWare[]\r\n}\r\n\r\nconst CabinetWares: FC<ICabinetWares> = ({allWares}) => {\r\n    const dispatch = useAppDispatch()\r\n    const categories = useAppSelector(state => state.wareReducer.allCategories.categories)\r\n    const [sortField, setSortField] = useState({value: \"Name\", isReverse: false})\r\n    const [categoryId, setCategoryId] = useState<number | null>(null)\r\n    const [countOfRecords, setCountOfRecords] = useState(12)\r\n    useEffect(() => {\r\n        fetch_all()\r\n    }, [sortField, categoryId, countOfRecords])\r\n    useEffect(() => {\r\n        dispatch(fetch_all_categories())\r\n    }, [])\r\n    const fetch_all = () => {\r\n        dispatch(fetch_all_wares({\r\n            sortBy: {value: sortField.value, isReverse: sortField.isReverse},\r\n            categoryId: categoryId === null ? null : categoryId,\r\n            countOfRecords: countOfRecords\r\n        }))\r\n    }\r\n    const changeSortHandler = (field: string) => {\r\n        if (field === \"PriceUp\")\r\n            setSortField({value: \"Price\", isReverse: false})\r\n\r\n        if (field === \"PriceDown\")\r\n            setSortField({value: \"Price\", isReverse: true})\r\n    }\r\n    return (\r\n        <div className={`mx-auto mt-3 mb-5`}>\r\n            <p className={'text-center'}><Link to={`/NewWare`}>Add ware</Link></p>\r\n            <table className=\"table table-borderless\">\r\n                <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <div className={'text-center row mt-3'}>\r\n                            <div className=\"col\">\r\n                                <p>Sort {sortField.isReverse ? <CaretDown/> : <CaretUp/>}</p>\r\n                                <select onChange={e => changeSortHandler(e.currentTarget.value)}\r\n                                        className={'form-select'}>\r\n                                    <option value=\"PriceUp\">Cheaper</option>\r\n                                    <option value=\"PriceDown\">More expensive</option>\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <p>Category</p>\r\n                                <div className=\"input-group\">\r\n                                    <select onChange={(e) => setCategoryId(Number(e.currentTarget.value))} className={'form-select py-lg-0'}>\r\n                                        {categories?.map(item => (\r\n                                            <option value={item.id}>{item.name}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                    <span onClick={(e:any) => {setCategoryId(null);e.currentTarget.previousElementSibling.value = \"\"}} className=\"input-group-text hover\">CLEAR</span>\r\n                                </div>\r\n                            </div>\r\n                            <form className=\"d-flex input-group-sm mt-3\" role=\"search\">\r\n                                <input className=\"form-control py-0\" type=\"search\" placeholder=\"Search by name\"/>\r\n                                <button onClick={(e: any) => {\r\n                                    dispatch(fetch_all_wares({keyWords: e.currentTarget.previousElementSibling!.value}));\r\n                                    e.preventDefault()\r\n                                }} className=\"btn btn-outline-success\" type=\"submit\">Search\r\n                                </button>\r\n                                <button onClick={(e:any) => {fetch_all();e.preventDefault();e.currentTarget.previousElementSibling!.previousElementSibling!.value = \"\"}} className={'btn btn-outline-primary'}>Reset</button>\r\n                            </form>\r\n                        </div>\r\n\r\n                    </td>\r\n                </tr>\r\n                {allWares.map(item => (\r\n                    <CabinetWareItem item={item} fetchCallBack={() => {\r\n                        fetch_all()\r\n                    }}/>\r\n                ))}\r\n\r\n                </tbody>\r\n            </table>\r\n            {allWares.length >= countOfRecords ? <button onClick={e => setCountOfRecords(countOfRecords+12)} className={'btn btn-outline-secondary position-absolute start-50 mb-5 py-1'}>More</button> : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CabinetWares;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetAccount.tsx",["366"],[],"import React, {FC} from 'react';\r\nimport {Google, Mailbox, Person, PersonBadgeFill} from \"react-bootstrap-icons\";\r\nimport {IUser} from \"../../types/user\";\r\nimport {useAppDispatch} from \"../../hooks/redux\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {update_self_info} from \"../../redux/action_creators/users_action_creator\";\r\n\r\ninterface ICabinetAccount {\r\n    user: IUser | null\r\n}\r\n\r\nconst CabinetAccount: FC<ICabinetAccount> = ({user}) => {\r\n    const dispatch = useAppDispatch()\r\n    const {\r\n        register,\r\n        formState: {\r\n            errors,\r\n        },\r\n        handleSubmit,\r\n    } = useForm()\r\n\r\n    const submitHandler = (data: any) => {\r\n        dispatch(update_self_info({\r\n            name: data.Name,\r\n            username: data.Username,\r\n            adress: data.Adress,\r\n            email: data.Email,\r\n            age: data.Age,\r\n            surname: data.Surname\r\n        }))\r\n    }\r\n    return (\r\n        <div className={`text-center mt-5`}>\r\n            <form className={'text-center'} onSubmit={handleSubmit(submitHandler)}>\r\n                <div className=\"input-group mb-3\">\r\n                    <span className=\"input-group-text\" id=\"basic-addon1\"><PersonBadgeFill height={20}  width={20}/></span>\r\n                    <input {...register(\"Username\", {\r\n                        required: true,\r\n                        value: user?.username\r\n                    })} type=\"text\" className=\"form-control\" placeholder=\"Username\"/>\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                    <span className=\"input-group-text\" id=\"basic-addon1\"><Person height={20} width={20}/>1</span>\r\n                    <input {...register(\"Name\", {\r\n                        required: true,\r\n                        value: user?.name\r\n                    })} type=\"text\" className=\"form-control\"\r\n                           placeholder=\"First Name\"/>\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                    <span className=\"input-group-text\" id=\"basic-addon1\"><Person height={20} width={20}/>2</span>\r\n                    <input {...register(\"Surname\", {\r\n                        required: true,\r\n                        value: user?.surname\r\n                    })}  type=\"text\" className=\"form-control\"\r\n                           placeholder=\"Last Name\"/>\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                    <span className=\"input-group-text\" id=\"basic-addon1\">Age</span>\r\n                    <input {...register(\"Age\", {\r\n                        required: true,\r\n                        value: user?.age\r\n                    })}  type=\"number\" className=\"form-control\"\r\n                           placeholder=\"Age\"/>\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                    <span className=\"input-group-text\" id=\"basic-addon1\"><Google height={20} width={20}/></span>\r\n                    <input {...register(\"Email\", {\r\n                        required: true,\r\n                        value: user?.email\r\n                    })} type=\"text\" className=\"form-control\" placeholder=\"Email\"/>\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                    <span className=\"input-group-text\" id=\"basic-addon1\"><Mailbox height={20} width={20}/></span>\r\n                    <input {...register(\"Adress\", {\r\n                        required: false,\r\n                        value: user?.adress\r\n                    })} type=\"text\" className=\"form-control\"\r\n                           placeholder=\"Adress\"/>\r\n                </div>\r\n                <p className={\"text-center\"}>\r\n                    <button type={'submit'} className={\"btn btn-primary w-100\"}>Update</button>\r\n                </p>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CabinetAccount;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\SignOutModal.tsx",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetWareItem.tsx",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\DeleteWareModel.tsx",["367","368","369","370","371"],[],"import React, {FC, useEffect, useState} from 'react';\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {delete_ware, fetch_all_wares} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {useAppDispatch} from \"../../hooks/redux\";\r\n\r\ninterface IDeleteWareModel {\r\n    show: boolean,\r\n    closeHandler: (statusCode?: number) => void,\r\n    id: number,\r\n}\r\nconst DeleteWareModel:FC<IDeleteWareModel> = ({show, closeHandler, id}) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(delete_ware(id, (statusCode) => {\r\n            closeHandler(statusCode)\r\n        }))\r\n    }\r\n    if(!show) return null\r\n    return(\r\n        <Modal show={show} onHide={closeHandler}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Delete ware</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <h6>Are you sure you want to delete this ware?</h6>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={() => closeHandler()} variant=\"secondary\">Close</Button>\r\n                <Button onClick={deleteHandler} variant=\"danger\">Delete</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DeleteWareModel;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetOrders.tsx",["372","373","374","375","376","377"],[],"import React, {useEffect, useState} from 'react';\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {get_orders, update_order} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {Accordion} from \"react-bootstrap\";\r\nimport CabinetOrderItem from \"./CabinetOrderItem\";\r\nimport {CaretDown, CaretUp} from \"react-bootstrap-icons\";\r\nimport {fetch_all_users} from \"../../redux/action_creators/users_action_creator\";\r\n\r\nconst CabinetOrders = () => {\r\n    const dispatch = useAppDispatch()\r\n    const orders = useAppSelector(state => state.wareReducer.orders.orders)\r\n    const [filterField, setFilterField] = useState<string | null>(null)\r\n    const [filter, setFilter] = useState<boolean | null>(null)\r\n    const [orderNumber, setOrderNumber] = useState<number | null>(null)\r\n    useEffect(() => {\r\n        dispatch(get_orders())\r\n    }, [ ])\r\n\r\n    useEffect(() => {\r\n        if (filterField === \"true\"){\r\n            setFilter(true)\r\n        }\r\n        if (filterField === \"false\"){\r\n            setFilter(false)\r\n        }\r\n        if (filterField === \"\"){\r\n            setFilter(null)\r\n\r\n        }\r\n\r\n    }, [filterField])\r\n\r\n    useEffect(() => {\r\n        fetchOrderHandler()\r\n    }, [filter, orderNumber])\r\n\r\n    const fetchOrderHandler = () => {\r\n        dispatch(get_orders(filter, orderNumber))\r\n    }\r\n    return (\r\n        <div className={'mt-4 mx-auto'}>\r\n            <div className={'row mb-2'}>\r\n                <div className=\"col\">\r\n                    <form className=\"d-flex input-group-sm\" role=\"search\">\r\n                        <input className=\"form-control py-0\" type=\"search\" placeholder=\"Search by name\"/>\r\n                        <button onClick={(e: any) => {\r\n                            setOrderNumber(Number(e.currentTarget.previousElementSibling!.value) ?? null);\r\n                            e.preventDefault()\r\n                        }} className=\"btn btn-outline-success\" type=\"submit\">Search\r\n                        </button>\r\n                        <button onClick={(e:any) => {setOrderNumber(null);e.preventDefault();e.currentTarget.previousElementSibling!.previousElementSibling!.value = \"\"}} className={'btn btn-outline-primary'}>Reset</button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <div className=\"\">\r\n                        <select onChange={e => setFilterField(e.currentTarget.value)}\r\n                                className={'form-select'}>\r\n                            <option selected value=\"\">All</option>\r\n                            <option value=\"true\">Confirmed</option>\r\n                            <option value=\"false\">Not confirmed</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Accordion defaultActiveKey=\"0\">\r\n                {orders.map(item => (\r\n                    <CabinetOrderItem item={item} />\r\n                ))}\r\n            </Accordion>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CabinetOrders;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetOrderItem.tsx",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\EditOrderModal.tsx",["378"],[],"import React, {FC} from 'react';\r\nimport {useAppDispatch} from \"../../hooks/redux\";\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {fetch_all_wares, update_order} from \"../../redux/action_creators/ware_action_creator\";\r\n\r\ninterface IEditOrderModal {\r\n    show: boolean,\r\n    closeHandler: (statusCode?: number) => void,\r\n    id: number,\r\n    status: string,\r\n    isConfirmed: boolean\r\n}\r\nconst EditOrderModal:FC<IEditOrderModal> = ({id, closeHandler, show, status, isConfirmed}) => {\r\n    const dispatch = useAppDispatch()\r\n    const {\r\n        register,\r\n        formState: {\r\n            errors,\r\n        },\r\n        handleSubmit,\r\n    } = useForm()\r\n\r\n    const submitHandler = (data: any) => {\r\n        dispatch(update_order(id, data.Status, data.IsConfirmed, closeHandler))\r\n        dispatch(fetch_all_wares())\r\n    }\r\n    if (!show) return null\r\n    return (\r\n        <Modal show={show} onHide={closeHandler}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Edit order</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <form onSubmit={handleSubmit(submitHandler)}>\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"status\" className=\"form-label\">Status</label>\r\n                        <input {...register(\"Status\", {\r\n                            required: true,\r\n                            value: status\r\n                        })} type=\"text\" className=\"form-control\" id=\"status\"/>\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"status\" className=\"form-label\">IsConfirmed</label>\r\n                        <select {...register(\"IsConfirmed\", {\r\n                            required: true,\r\n                            value: isConfirmed\r\n                        })} className={'form-select'}>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                        </select>\r\n                    </div>\r\n                    <Button onClick={() => closeHandler()} variant=\"secondary\">Close</Button>\r\n                    <Button type={'submit'} variant=\"danger\">Edit</Button>\r\n                </form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditOrderModal;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Layout\\Loading.tsx",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\reducers\\NotificationReducer.ts",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Layout\\NotificationToastMessage.tsx",["379"],[],"import { useEffect } from \"react\";\r\nimport { Toast, ToastContainer } from \"react-bootstrap\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/redux\";\r\nimport {MessageType, NotificationReducer} from \"../../redux/reducers/NotificationReducer\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst NotificationToastMessage = () => {\r\n    const { DEACTIVATE_MESSAGE } = NotificationReducer.actions;\r\n    const dispatch = useAppDispatch();\r\n    const messages: MessageType[] | null = useAppSelector((state) => state.NotificationReducer.messages);\r\n    const activeMessages = messages ? messages.filter((message) => message.isActive) : null;\r\n\r\n    const deactivateMessage = (id: number) => {\r\n        dispatch(DEACTIVATE_MESSAGE(id));\r\n    };\r\n\r\n    const pushMessage = (id: number) => {\r\n        setTimeout(() => {\r\n            deactivateMessage(id);\r\n        }, 3000);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (activeMessages) {\r\n            if (activeMessages.length > 0) {\r\n                const lastMessage = activeMessages!.length - 1;\r\n                const id = activeMessages![lastMessage].id;\r\n                pushMessage(id);\r\n                if(activeMessages.length > 5){\r\n                    deactivateMessage(activeMessages[0].id);\r\n                }\r\n            }\r\n        }\r\n    }, [activeMessages]);\r\n\r\n    return ReactDOM.createPortal(\r\n        <>\r\n            <ToastContainer className=\"position-fixed end-0 bottom-0 mb-4 me-4 p-1\">\r\n                {activeMessages != null ? (\r\n                    activeMessages.reverse().map((message: MessageType) => {\r\n                        return (\r\n                            <Toast\r\n                                className={message.isSuccess ? \"bg-success\" : message.isError ? \"bg-danger\" : \"bg-warning\"}\r\n                                key={message.id}\r\n                            >\r\n                                <div className=\"position-relative\">\r\n                                    <Toast.Body className={\"text-white\"}>{message.message}</Toast.Body>\r\n                                    <button\r\n                                        onClick={() => deactivateMessage(message.id)}\r\n                                        className={\"btn btn-close position-absolute end-0 top-0 mt-1 me-2\"}\r\n                                    ></button>\r\n                                </div>\r\n                            </Toast>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <></>\r\n                )}\r\n            </ToastContainer>\r\n        </>,\r\n        document.getElementById('portal') as HTMLElement\r\n    );\r\n};\r\n\r\nexport default NotificationToastMessage;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetUsers.tsx",["380","381","382","383"],[],"import React, {useEffect} from 'react';\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {fetch_all_users} from \"../../redux/action_creators/users_action_creator\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {fetch_all_wares} from \"../../redux/action_creators/ware_action_creator\";\r\n\r\nconst CabinetUsers = () => {\r\n    const dispatch = useAppDispatch()\r\n    const {users, isLoading, errors} = useAppSelector(state => state.UsersReducer.allUsers)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetch_all_users())\r\n    }, [ ])\r\n    return (\r\n        <div className={'container-fluid mt-5'}>\r\n            <form className=\"d-flex input-group-sm mt-3\" role=\"search\">\r\n                <input className=\"form-control py-0\" type=\"search\" placeholder=\"Search by name\"/>\r\n                <button onClick={(e: any) => {\r\n                    dispatch(fetch_all_users(e.currentTarget.previousElementSibling!.value ?? null));\r\n                    e.preventDefault()\r\n                }} className=\"btn btn-outline-success\" type=\"submit\">Search\r\n                </button>\r\n                <button onClick={(e:any) => {dispatch(fetch_all_users());e.preventDefault();e.currentTarget.previousElementSibling!.previousElementSibling!.value = \"\"}} className={'btn btn-outline-primary'}>Reset</button>\r\n            </form>\r\n            <div className={'table-responsive'}>\r\n                <table className={'table'}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>\r\n                                Nickname\r\n                            </th>\r\n                            <th>\r\n                                Name\r\n                            </th>\r\n                            <th>\r\n                                Surname\r\n                            </th>\r\n                            <th>\r\n                                Email\r\n                            </th>\r\n                            <th>\r\n                                Adress\r\n                            </th>\r\n                            <th>\r\n                                Role\r\n                            </th>\r\n                            <th>\r\n                                Permissions\r\n                            </th>\r\n                            <th>\r\n                                Control\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {users.map(item => (\r\n                            <tr>\r\n                                <td>{item.username}</td>\r\n                                <td>{item.name}</td>\r\n                                <td>{item.surname}</td>\r\n                                <td>{item.email}</td>\r\n                                <td>{item.adress}</td>\r\n                                <td>{item.role}</td>\r\n                                <td>{item.permissions.join(\" \")}</td>\r\n                                <td>\r\n                                    <Link to={`/EditUser/${item.id}`} className={'btn btn-success py-0'}>\r\n                                        EDIT\r\n                                    </Link>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CabinetUsers;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\reducers\\usersReducer.ts",[],[],"C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\redux\\action_creators\\users_action_creator.ts",["384","385","386","387"],[],"import {AppDispatch} from \"../store\";\r\nimport {authorizationReducer} from \"../reducers/authorizationReducer\";\r\nimport axios from \"axios\";\r\nimport {GraphQlEndpoint} from \"../../global_variables\";\r\nimport {usersReducer} from \"../reducers/usersReducer\";\r\nimport {NotificationReducer} from \"../reducers/NotificationReducer\";\r\nimport {IUpdatedUser, IUpdateSelf} from \"../../types/user\";\r\nconst {SHOW_SUCCESS_MESSAGE, SHOW_ERROR_MESSAGE, SHOW_WARNING_MESSAGE, DEACTIVATE_MESSAGE} = NotificationReducer.actions\r\n\r\nexport const update_self_info = (userInfo: IUpdateSelf) => async (dispatch: AppDispatch) => {\r\n    const graphqlQuery = {\r\n        \"query\": `\r\n            mutation updateSI{\r\n              user{\r\n                updateSelfInfo(user: {\r\n                  name: ${userInfo.name != null ? `\"${userInfo.name}\"` : \"null\"},\r\n                  surname: ${userInfo.surname != null ? `\"${userInfo.surname}\"` : \"null\"},,\r\n                  username: ${userInfo.username != null ? `\"${userInfo.username}\"` : \"null\"},\r\n                  email: ${userInfo.email != null ? `\"${userInfo.email}\"` : \"null\"},\r\n                  age: ${userInfo.age != null ? `${userInfo.age}` : \"null\"},\r\n                  adress: ${userInfo.adress != null ? `\"${userInfo.adress}\"` : \"null\"},\r\n                }){\r\n                  errors\r\n                  statusCode\r\n                  user{\r\n                    id\r\n                    username\r\n                    name\r\n                    surname\r\n                    age\r\n                    email\r\n                    adress\r\n                    role\r\n                    isActivated\r\n                    permissions\r\n                  }\r\n                }\r\n              }\r\n            }\r\n        `,\r\n    };\r\n    dispatch(usersReducer.actions.GET_PERMISSIONS_LIST())\r\n    try {\r\n        const response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.user.updateSelfInfo\r\n        if (r.statusCode === 200){\r\n            dispatch(SHOW_SUCCESS_MESSAGE(\"Successfully changed\"))\r\n        }else{\r\n            dispatch(SHOW_ERROR_MESSAGE(r.errors))\r\n        }\r\n    } catch (e:any) {\r\n        dispatch(SHOW_ERROR_MESSAGE(e))\r\n        localStorage.removeItem('accessToken')\r\n    }\r\n}\r\nexport const fetch_all_permissions = () => async (dispatch: AppDispatch) => {\r\n    const graphqlQuery = {\r\n        \"query\": `\r\n            query getAP{\r\n              user{\r\n                getAllPermissions{\r\n                  errors\r\n                  permissions{\r\n                    id\r\n                    name\r\n                  }\r\n                  statusCode\r\n                }\r\n              }\r\n            }\r\n        `,\r\n    };\r\n    dispatch(usersReducer.actions.GET_PERMISSIONS_LIST())\r\n    try {\r\n        const response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.user.getAllPermissions\r\n        if (r.statusCode === 200){\r\n            dispatch(usersReducer.actions.GET_PERMISSIONS_LIST_SUCCESS(r.permissions))\r\n        }else{\r\n            dispatch(usersReducer.actions.GET_PERMISSIONS_LIST_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(usersReducer.actions.GET_PERMISSIONS_LIST_ERROR(e))\r\n        localStorage.removeItem('accessToken')\r\n    }\r\n}\r\nexport const fetch_all_users = (keyWords?: string) => async (dispatch: AppDispatch) => {\r\n    const graphqlQuery = {\r\n        \"query\": `\r\n            query getAll {\r\n              user {\r\n                getAll(keyWords: ${keyWords != null ? `\"${keyWords}\"` : \"null\"}){\r\n                  errors\r\n                  statusCode\r\n                  users {\r\n                    id\r\n                    username\r\n                    name\r\n                    surname\r\n                    age\r\n                    email\r\n                    adress\r\n                    role\r\n                    isActivated\r\n                    permissions\r\n                  }\r\n                }\r\n              }\r\n            }\r\n        `,\r\n    };\r\n    dispatch(usersReducer.actions.GET_ALL_USERS())\r\n    try {\r\n        const response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.user.getAll\r\n        if (r.statusCode === 200){\r\n            dispatch(usersReducer.actions.GET_ALL_USERS_SUCCESS(r.users))\r\n        }else{\r\n            dispatch(usersReducer.actions.GET_ALL_USERS_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(usersReducer.actions.GET_ALL_USERS_ERROR(e))\r\n        localStorage.removeItem('accessToken')\r\n    }\r\n}\r\nexport const fetch_user_by_id = (id: number) => async (dispatch: AppDispatch) => {\r\n    const graphqlQuery = {\r\n        \"query\": `\r\n            query getUBI{\r\n              user{\r\n                getUserById(userId: ${id}){\r\n                  errors\r\n                  statusCode\r\n                  user{\r\n                    id\r\n                    username\r\n                    name\r\n                    surname\r\n                    age\r\n                    email\r\n                    adress\r\n                    role\r\n                    isActivated\r\n                    permissions\r\n                  }\r\n                }\r\n              }\r\n            }\r\n        `,\r\n    };\r\n    dispatch(usersReducer.actions.GET_USER_BY_ID())\r\n    try {\r\n        const response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.user.getUserById\r\n        if (r.statusCode === 200){\r\n            dispatch(usersReducer.actions.GET_USER_BY_ID_SUCCESS(r.user))\r\n        }else{\r\n            dispatch(usersReducer.actions.GET_USER_BY_ID_ERROR(r.errors))\r\n        }\r\n    } catch (e) {\r\n        dispatch(usersReducer.actions.GET_USER_BY_ID_ERROR(e))\r\n        localStorage.removeItem('accessToken')\r\n    }\r\n}\r\nexport const update_user = (user: IUpdatedUser) => async (dispatch: AppDispatch) => {\r\n    console.log(user)\r\n    const graphqlQuery = {\r\n        \"query\": `\r\n            mutation updateU{\r\n              user{\r\n                updateUser(user: {\r\n                  id: ${user.id},\r\n                  name: ${user.name != null ? `\"${user.name}\"` : \"null\"}\r\n                  surname: ${user.surname != null ? `\"${user.surname}\"` : \"null\"},\r\n                  username: ${user.username != null ? `\"${user.username}\"` : \"null\"},\r\n                  role: ${user.role != null ? `\"${user.role}\"` : \"null\"},\r\n                  isActivated: ${user.isActivated ?? \"null\"},\r\n                  age: ${user.age ?? \"null\"},\r\n                  email: ${user.email != null ? `\"${user.email}\"` : \"null\"},\r\n                  permissions: ${user.permissions != null && user.permissions != undefined ? `\"${user.permissions.join(\" \")}\"` : \"null\"},\r\n                  adress: ${user.adress != null ? `\"${user.adress}\"` : \"null\"}\r\n                }){\r\n                  errors\r\n                  statusCode\r\n                  user{\r\n                    id\r\n                    username\r\n                    name\r\n                    surname\r\n                    age\r\n                    email\r\n                    adress\r\n                    role\r\n                    isActivated\r\n                    permissions\r\n                  }\r\n                }\r\n              }\r\n            }\r\n        `,\r\n    };\r\n    try {\r\n        const response = await axios({\r\n            url: GraphQlEndpoint,\r\n            method: 'post',\r\n            withCredentials: true,\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem('accessToken')}`,\r\n            },\r\n            data: graphqlQuery\r\n        })\r\n        let r = response.data.data.user.updateUser\r\n        console.log(r)\r\n        if (r.statusCode === 200){\r\n            dispatch(SHOW_SUCCESS_MESSAGE(\"Successfully updated!\"))\r\n        }else{\r\n            dispatch(SHOW_ERROR_MESSAGE(r.errors))\r\n        }\r\n    } catch (e:any) {\r\n        dispatch(SHOW_ERROR_MESSAGE(e.toString()))\r\n        localStorage.removeItem('accessToken')\r\n    }\r\n}","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetUserEdit.tsx",["388","389","390","391","392"],[],"import React, {useEffect, useState} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {fetch_all_permissions, fetch_user_by_id} from \"../../redux/action_creators/users_action_creator\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport Select from \"react-select\";\r\nimport CabinetUserEditForm from \"./CabinetUserEditForm\";\r\n\r\nconst CabinetUserEdit = () => {\r\n    const {id} = useParams()\r\n    const {user, isLoading} = useAppSelector(state => state.UsersReducer.getUserById)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetch_all_permissions())\r\n    }, [ ])\r\n    useEffect(() => {\r\n        dispatch(fetch_user_by_id(Number(id)))\r\n    }, [id])\r\n    return (\r\n        <div>\r\n            {isLoading ? <></> :\r\n                <div className={'container-fluid'}>\r\n                    {user != null ? <CabinetUserEditForm user={user}/> : <></>}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CabinetUserEdit;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetUserEditForm.tsx",["393","394","395"],[],"import React, {FC, useEffect, useState} from 'react';\r\nimport Select from \"react-select\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {IUser} from \"../../types/user\";\r\nimport {update_user} from \"../../redux/action_creators/users_action_creator\";\r\nimport {useNavigate} from \"react-router-dom\";\r\ninterface ICabinetUserEditForm {\r\n    user: IUser\r\n}\r\nconst CabinetUserEditForm:FC<ICabinetUserEditForm> = ({user}) => {\r\n    const [permissionsOptions, setPermissionsOptions] = useState<{ label: string; value: string }[]>([]);\r\n    const [currentPermissionsOptions, setCurrentPermissionsOptions] = useState<{ label: string; value: string }[]>([]);\r\n    const permissionsList = useAppSelector(state => state.UsersReducer.permissions)\r\n    const navigate = useNavigate()\r\n\r\n    const [newPermissions, setPermissions] = useState<null | number[]>(null)\r\n    const dispatch = useAppDispatch()\r\n    const {\r\n        register,\r\n        formState: {\r\n            errors,\r\n        },\r\n        handleSubmit,\r\n    } = useForm()\r\n    useEffect(() => {\r\n        if (permissionsList != null){\r\n            if (permissionsList.length > 0) {\r\n                permissionsList.forEach((item) =>\r\n                    setPermissionsOptions((prevState: any) => [\r\n                        ...prevState,\r\n                        {\r\n                            value: item.id.toString(),\r\n                            label: item.name,\r\n                        },\r\n                    ])\r\n                );\r\n            }\r\n        }\r\n    }, [permissionsList]);\r\n    useEffect(() => {\r\n        let userPermissions: { label: string; value: string }[] = [];\r\n        if (user != null && permissionsList !== null) {\r\n            user!.permissions.forEach((permission) => {\r\n                userPermissions = [\r\n                    ...userPermissions,\r\n                    {value: permission.toString(), label: permissionsList.find((p) => p.id == permission)?.name ?? \"\"},\r\n                ];\r\n            });\r\n            setCurrentPermissionsOptions(userPermissions);\r\n        }\r\n    }, [user])\r\n    const onPermissionsChanged = (newValue: any) => {\r\n        setCurrentPermissionsOptions(newValue);\r\n        setPermissions((prevState) => {\r\n            prevState = newValue.map((v: any) => Number(v.value));\r\n            return prevState;\r\n        });\r\n    };\r\n    const submitHandler = (data: any) => {\r\n        dispatch(update_user({\r\n            id: user.id,\r\n            name: data.Name,\r\n            surname: data.Surname,\r\n            username: data.Username,\r\n            role: data.Role,\r\n            adress: data.Adress,\r\n            email: data.Email,\r\n            age: data.Age,\r\n            isActivated: data.IsActivated,\r\n            permissions: newPermissions,\r\n        }))\r\n        navigate(-1)\r\n    }\r\n    document.title = \"Edit user\"\r\n    return (\r\n        <div className={'col-md-5 col-lg-4 m-auto'}>\r\n            <div className={'my-5 border border-1 py-3'}>\r\n                <div className={'w-100 border-bottom border-1 py-3'}>\r\n                    <h5 className=\"text-center\">Wear | Edit user</h5>\r\n                    {/*<p className={\"text-danger text-center\"}>{server_errors ? server_errors : \"\"}</p>*/}\r\n                </div>\r\n                <form onSubmit={handleSubmit(submitHandler)}>\r\n                    <div className={'mb-3 mt-3 px-5'}>\r\n                        <label className={'form-label'} htmlFor=\"username\">Username</label>\r\n                        <input {...register(\"Username\", {\r\n                            required: true,\r\n                            value: user!.username ?? \"\",\r\n                        })} id={'username'} className={'form-control'} type=\"text\"/>\r\n                    </div>\r\n                    <div className={'mb-3 px-5'}>\r\n                        <label className={'form-label'} htmlFor=\"name\">Name</label>\r\n                        <input {...register(\"Name\", {\r\n                            required: true,\r\n                            value: user!.name ?? \"\",\r\n                        })} id={'name'} className={'form-control'} type=\"text\"/>\r\n                    </div>\r\n                    <div className={'mb-3 px-5'}>\r\n                        <label className={'form-label'} htmlFor=\"surname\">Surname</label>\r\n                        <input {...register(\"Surname\", {\r\n                            required: true,\r\n                            value: user!.surname ?? \"\",\r\n                        })} id={'surname'} className={'form-control'} type=\"text\"/>\r\n                    </div>\r\n                    <div className={'mb-3 px-5'}>\r\n                        <label className={'form-label'} htmlFor=\"email\">Email</label>\r\n                        <input {...register(\"Email\", {\r\n                            required: true,\r\n                            value: user!.email ?? \"\",\r\n                        })} id={'email'} className={'form-control'} type=\"email\"/>\r\n                    </div>\r\n                    <div className={'mb-3 px-5'}>\r\n                        <label className={'form-label'} htmlFor=\"age\">Age</label>\r\n                        <input {...register(\"Age\", {\r\n                            required: false,\r\n                            value: user!.age ?? \"\",\r\n                        })} id={'age'} className={'form-control'} type=\"number\"/>\r\n                    </div>\r\n                    <div className={'mb-3 px-5'}>\r\n                        <label className={'form-label'} htmlFor=\"adress\">Adress</label>\r\n                        <input {...register(\"Adress\", {\r\n                            required: false,\r\n                            value: user!.adress ?? \"\",\r\n                        })} id={'adress'} className={'form-control'} type=\"text\"/>\r\n                    </div>\r\n                    <div className={\"mb-3 px-5\"}>\r\n                        <label className={'form-label'} htmlFor=\"permissions\">Permissions</label>\r\n                        <Select\r\n                            id={'permissions'}\r\n                            value={currentPermissionsOptions}\r\n                            onChange={onPermissionsChanged}\r\n                            placeholder={\"Permissions\"}\r\n                            isMulti={true}\r\n                            options={permissionsOptions}\r\n                        />\r\n                    </div>\r\n                    <div className={'mb-3 px-5'}>\r\n                        <label className={'form-label'} htmlFor=\"role\">Role</label>\r\n                        <input {...register(\"Role\", {\r\n                            required: true,\r\n                            value: user!.role ?? \"\",\r\n                        })} id={'role'} className={'form-control'} type=\"text\"/>\r\n                    </div>\r\n                    <div className={'mb-3 px-5'}>\r\n                        <label className={'form-label'} htmlFor=\"IsActivated\">Is activated</label>\r\n                        <input {...register(\"IsActivated\", {\r\n                            required: false,\r\n                            value: user!.isActivated ?? \"\",\r\n                        })} id={'IsActivated'} className={'form-check-input ms-2'} type=\"checkbox\"/>\r\n                    </div>\r\n                    <div className={\"px-5 mb-3\"}>\r\n                        <button className={'btn btn-primary '}>Edit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default CabinetUserEditForm;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\components\\ScrollBtn.tsx",["396"],[],"import React, {useEffect, useRef} from 'react';\r\nimport {refresh_token} from \"../redux/action_creators/authorization_action_creator\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst ScrollBtn = () => {\r\n    const scrlBtn = useRef<HTMLDivElement>(null)\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', () => {\r\n            const scrollY = window.scrollY || document.documentElement.scrollTop;\r\n            scrollY > 400 ? showScrlHandler() : hideScrlHandler()\r\n        });\r\n        scrlBtn.current!.addEventListener('click', () => {\r\n            window.scrollTo({\r\n                top: 0,\r\n                left: 0,\r\n                behavior: 'smooth'\r\n            });\r\n        })\r\n    }, [ ])\r\n    const showScrlHandler = () => {\r\n        scrlBtn.current!.classList.remove(\"btn-up_hide\")\r\n    }\r\n    const hideScrlHandler = () => {\r\n        scrlBtn.current!.classList.add(\"btn-up_hide\")\r\n    }\r\n    return ReactDOM.createPortal (\r\n        <>\r\n            <div ref={scrlBtn} className=\"btn-up btn-up_hide\"></div>\r\n        </>,\r\n        document.getElementById('portal') as HTMLElement\r\n    );\r\n};\r\n\r\nexport default ScrollBtn;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\AllWares\\AllWares.tsx",["397","398","399","400"],[],"import React, {useEffect, useState} from 'react';\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {\r\n    fetch_all_categories, fetch_all_wares,\r\n    fetch_discount_wares,\r\n    fetch_discount_wares_authorized\r\n} from \"../../redux/action_creators/ware_action_creator\";\r\nimport {CaretDown, CaretUp} from \"react-bootstrap-icons\";\r\nimport WareMockup from \"../../components/WareMockup\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nconst AllWares = () => {\r\n    const dispatch = useAppDispatch()\r\n    const {category} = useParams()\r\n    const {isLoading,errors,wares} = useAppSelector(state => state.wareReducer.allWares)\r\n    const {isAuthorized} = useAppSelector(state => state.authorizationReducer)\r\n    const [sortField, setSortField] = useState({value: \"Name\", isReverse: false})\r\n    const [categoryId, setCategoryId] = useState<number | null>(null)\r\n    const [countOfRecords, setCountOfRecords] = useState(12)\r\n    const categories = useAppSelector(state => state.wareReducer.allCategories.categories)\r\n\r\n    useEffect(() => {\r\n        fetch_all()\r\n    }, [sortField, categoryId, isAuthorized, countOfRecords])\r\n    useEffect(() => {\r\n        dispatch(fetch_all_categories())\r\n    }, [])\r\n    const fetch_all = () => {\r\n        isAuthorized ? dispatch(fetch_all_wares({\r\n            sortBy: {value: sortField.value, isReverse: sortField.isReverse},\r\n            categoryId: categoryId === null ? null : categoryId,\r\n            countOfRecords: countOfRecords\r\n        })) : dispatch(fetch_all_wares({\r\n            sortBy: {value: sortField.value, isReverse: sortField.isReverse},\r\n            categoryId: categoryId === null ? null : categoryId,\r\n            countOfRecords: countOfRecords\r\n        }))\r\n    }\r\n    const changeSortHandler = (field: string) => {\r\n        if (field === \"PriceUp\")\r\n            setSortField({value: \"Price\", isReverse: false})\r\n\r\n        if (field === \"PriceDown\")\r\n            setSortField({value: \"Price\", isReverse: true})\r\n    }\r\n    useEffect(() => {\r\n        if(category != null){\r\n            setCategoryId(Number(category))\r\n        }\r\n        else {\r\n            setCategoryId(null)\r\n        }\r\n    }, [category])\r\n    document.title = \"All Wares\"\r\n    return (\r\n        <div className=\"container d-block mb-5\">\r\n            <div className=\"d-block\">\r\n                <br/>\r\n                <br/>\r\n                <div className={'text-center row mt-3'}>\r\n                    <div className=\"col\">\r\n                        <p>Sort {sortField.isReverse ? <CaretDown/> : <CaretUp/>}</p>\r\n                        <select onChange={e => changeSortHandler(e.currentTarget.value)}\r\n                                className={'form-select'}>\r\n                            <option value=\"PriceUp\">Cheaper</option>\r\n                            <option value=\"PriceDown\">More expensive</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <p>Category</p>\r\n                        <div className=\"input-group\">\r\n                            <select onChange={(e) => setCategoryId(e.currentTarget.value !== \"\" ? Number(e.currentTarget.value) : null)} className={'form-select py-0'}>\r\n                                <option value=\"\"></option>\r\n                                {categories?.map(item => (\r\n                                    <option value={item.id}>{item.name}</option>\r\n                                ))}\r\n                            </select>\r\n                            <span onClick={(e:any) => {setCategoryId(null);e.currentTarget.previousElementSibling.value = \"\"}} className=\"input-group-text hover\">CLEAR</span>\r\n                        </div>\r\n                    </div>\r\n                    <form className=\"d-flex input-group-sm mt-3\" role=\"search\">\r\n                        <input className=\"form-control py-0\" type=\"search\" placeholder=\"Search by name\"/>\r\n                        <button onClick={(e: any) => {\r\n                            dispatch(isAuthorized ? fetch_discount_wares_authorized({keyWords: e.currentTarget.previousElementSibling!.value}) : fetch_discount_wares({keyWords: e.currentTarget.previousElementSibling!.value}));\r\n                            e.preventDefault()\r\n                        }} className=\"btn btn-outline-success\" type=\"submit\">Search\r\n                        </button>\r\n                        <button onClick={(e:any) => {fetch_all();e.preventDefault();e.currentTarget.previousElementSibling!.previousElementSibling!.value = \"\"}} className={'btn btn-outline-primary'}>Reset</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div className=\"text-center text-xxl-start row\">\r\n                {wares?.map(item =>\r\n                    <WareMockup key={item.id} item={item}/>\r\n                )}\r\n            </div>\r\n            {wares.length >= countOfRecords ? <button onClick={e => setCountOfRecords(countOfRecords+12)} className={'btn btn-outline-secondary position-absolute start-50 mt-5 mb-5 py-1'}>More</button> : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllWares;","C:\\Users\\dro1l\\source\\repos\\StaffWork\\staffwork.client\\src\\pages\\Account\\CabinetCategories.tsx",["401","402","403","404","405","406"],[],"import React, {useEffect} from 'react';\r\nimport {Accordion} from \"react-bootstrap\";\r\nimport CabinetOrderItem from \"./CabinetOrderItem\";\r\nimport {fetch_all_users} from \"../../redux/action_creators/users_action_creator\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\r\nimport {delete_category, fetch_all_categories} from \"../../redux/action_creators/ware_action_creator\";\r\n\r\nconst CabinetCategories = () => {\r\n    const dispatch = useAppDispatch()\r\n    const {categories, isLoading, errors} = useAppSelector(state => state.wareReducer.allCategories)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetch_all_categories())\r\n    }, [ ])\r\n    return (\r\n        <div className={'container mt-5'}>\r\n            <p className={'text-center'}><Link target=\"_blank\" to={\"/NewCategory\"}>Create new category</Link></p>\r\n            <div className={'table-responsive'}>\r\n                <table className={'table text-center'}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>\r\n                            Id\r\n                        </th>\r\n                        <th>\r\n                            Name\r\n                        </th>\r\n                        <th>Control</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {categories.map(item => (\r\n                        <tr>\r\n                            <td>{item.id}</td>\r\n                            <td>{item.name}</td>\r\n                            <td>\r\n                                <button onClick={e => dispatch(delete_category(item.id, (statusCode) => {\r\n                                    if (statusCode === 200){\r\n                                        dispatch(fetch_all_categories())\r\n                                    }\r\n                                }))} className={'btn btn-danger py-0'}>\r\n                                    Delete\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CabinetCategories;",{"ruleId":"407","severity":1,"message":"408","line":1,"column":27,"nodeType":"409","messageId":"410","endLine":1,"endColumn":33},{"ruleId":"411","severity":1,"message":"412","line":29,"column":8,"nodeType":"413","endLine":29,"endColumn":11,"suggestions":"414"},{"ruleId":"407","severity":1,"message":"415","line":5,"column":47,"nodeType":"409","messageId":"410","endLine":5,"endColumn":52},{"ruleId":"407","severity":1,"message":"416","line":9,"column":50,"nodeType":"409","messageId":"410","endLine":9,"endColumn":70},{"ruleId":"407","severity":1,"message":"417","line":9,"column":72,"nodeType":"409","messageId":"410","endLine":9,"endColumn":90},{"ruleId":"407","severity":1,"message":"418","line":535,"column":13,"nodeType":"409","messageId":"410","endLine":535,"endColumn":14},{"ruleId":"407","severity":1,"message":"419","line":6,"column":9,"nodeType":"409","messageId":"410","endLine":6,"endColumn":29},{"ruleId":"407","severity":1,"message":"420","line":6,"column":5,"nodeType":"409","messageId":"410","endLine":6,"endColumn":20},{"ruleId":"407","severity":1,"message":"421","line":15,"column":12,"nodeType":"409","messageId":"410","endLine":15,"endColumn":21},{"ruleId":"411","severity":1,"message":"422","line":22,"column":8,"nodeType":"413","endLine":22,"endColumn":11,"suggestions":"423"},{"ruleId":"411","severity":1,"message":"424","line":27,"column":8,"nodeType":"413","endLine":27,"endColumn":55,"suggestions":"425"},{"ruleId":"407","severity":1,"message":"426","line":5,"column":9,"nodeType":"409","messageId":"410","endLine":5,"endColumn":14},{"ruleId":"407","severity":1,"message":"420","line":4,"column":27,"nodeType":"409","messageId":"410","endLine":4,"endColumn":42},{"ruleId":"407","severity":1,"message":"427","line":6,"column":38,"nodeType":"409","messageId":"410","endLine":6,"endColumn":57},{"ruleId":"407","severity":1,"message":"428","line":14,"column":12,"nodeType":"409","messageId":"410","endLine":14,"endColumn":17},{"ruleId":"407","severity":1,"message":"421","line":14,"column":18,"nodeType":"409","messageId":"410","endLine":14,"endColumn":27},{"ruleId":"411","severity":1,"message":"429","line":23,"column":8,"nodeType":"413","endLine":23,"endColumn":61,"suggestions":"430"},{"ruleId":"411","severity":1,"message":"412","line":26,"column":8,"nodeType":"413","endLine":26,"endColumn":10,"suggestions":"431"},{"ruleId":"407","severity":1,"message":"420","line":5,"column":5,"nodeType":"409","messageId":"410","endLine":5,"endColumn":20},{"ruleId":"407","severity":1,"message":"432","line":6,"column":5,"nodeType":"409","messageId":"410","endLine":6,"endColumn":25},{"ruleId":"407","severity":1,"message":"433","line":6,"column":27,"nodeType":"409","messageId":"410","endLine":6,"endColumn":58},{"ruleId":"407","severity":1,"message":"434","line":6,"column":60,"nodeType":"409","messageId":"410","endLine":6,"endColumn":80},{"ruleId":"407","severity":1,"message":"435","line":11,"column":8,"nodeType":"409","messageId":"410","endLine":11,"endColumn":15},{"ruleId":"407","severity":1,"message":"428","line":15,"column":12,"nodeType":"409","messageId":"410","endLine":15,"endColumn":17},{"ruleId":"407","severity":1,"message":"421","line":15,"column":18,"nodeType":"409","messageId":"410","endLine":15,"endColumn":27},{"ruleId":"411","severity":1,"message":"429","line":24,"column":8,"nodeType":"413","endLine":24,"endColumn":62,"suggestions":"436"},{"ruleId":"411","severity":1,"message":"412","line":27,"column":8,"nodeType":"413","endLine":27,"endColumn":10,"suggestions":"437"},{"ruleId":"407","severity":1,"message":"408","line":1,"column":31,"nodeType":"409","messageId":"410","endLine":1,"endColumn":37},{"ruleId":"407","severity":1,"message":"438","line":7,"column":9,"nodeType":"409","messageId":"410","endLine":7,"endColumn":20},{"ruleId":"407","severity":1,"message":"439","line":18,"column":11,"nodeType":"409","messageId":"410","endLine":18,"endColumn":19},{"ruleId":"411","severity":1,"message":"440","line":26,"column":8,"nodeType":"413","endLine":26,"endColumn":25,"suggestions":"441"},{"ruleId":"407","severity":1,"message":"442","line":2,"column":9,"nodeType":"409","messageId":"410","endLine":2,"endColumn":13},{"ruleId":"407","severity":1,"message":"443","line":6,"column":9,"nodeType":"409","messageId":"410","endLine":6,"endColumn":21},{"ruleId":"411","severity":1,"message":"444","line":20,"column":8,"nodeType":"413","endLine":20,"endColumn":10,"suggestions":"445"},{"ruleId":"411","severity":1,"message":"412","line":26,"column":8,"nodeType":"413","endLine":26,"endColumn":12,"suggestions":"446"},{"ruleId":"407","severity":1,"message":"447","line":4,"column":9,"nodeType":"409","messageId":"410","endLine":4,"endColumn":14},{"ruleId":"407","severity":1,"message":"448","line":7,"column":5,"nodeType":"409","messageId":"410","endLine":7,"endColumn":35},{"ruleId":"411","severity":1,"message":"412","line":26,"column":8,"nodeType":"413","endLine":26,"endColumn":10,"suggestions":"449"},{"ruleId":"411","severity":1,"message":"412","line":29,"column":8,"nodeType":"413","endLine":29,"endColumn":14,"suggestions":"450"},{"ruleId":"407","severity":1,"message":"451","line":4,"column":9,"nodeType":"409","messageId":"410","endLine":4,"endColumn":15},{"ruleId":"407","severity":1,"message":"452","line":5,"column":9,"nodeType":"409","messageId":"410","endLine":5,"endColumn":15},{"ruleId":"411","severity":1,"message":"453","line":32,"column":8,"nodeType":"413","endLine":32,"endColumn":10,"suggestions":"454"},{"ruleId":"411","severity":1,"message":"412","line":35,"column":8,"nodeType":"413","endLine":35,"endColumn":14,"suggestions":"455"},{"ruleId":"407","severity":1,"message":"456","line":6,"column":11,"nodeType":"409","messageId":"410","endLine":6,"endColumn":15},{"ruleId":"407","severity":1,"message":"457","line":19,"column":13,"nodeType":"409","messageId":"410","endLine":19,"endColumn":19},{"ruleId":"411","severity":1,"message":"412","line":69,"column":8,"nodeType":"413","endLine":69,"endColumn":10,"suggestions":"458"},{"ruleId":"407","severity":1,"message":"459","line":4,"column":5,"nodeType":"409","messageId":"410","endLine":4,"endColumn":21},{"ruleId":"407","severity":1,"message":"460","line":5,"column":5,"nodeType":"409","messageId":"410","endLine":5,"endColumn":25},{"ruleId":"407","severity":1,"message":"442","line":7,"column":9,"nodeType":"409","messageId":"410","endLine":7,"endColumn":13},{"ruleId":"407","severity":1,"message":"457","line":17,"column":13,"nodeType":"409","messageId":"410","endLine":17,"endColumn":19},{"ruleId":"407","severity":1,"message":"461","line":23,"column":15,"nodeType":"409","messageId":"410","endLine":23,"endColumn":25},{"ruleId":"407","severity":1,"message":"462","line":4,"column":27,"nodeType":"409","messageId":"410","endLine":4,"endColumn":46},{"ruleId":"407","severity":1,"message":"457","line":11,"column":13,"nodeType":"409","messageId":"410","endLine":11,"endColumn":19},{"ruleId":"407","severity":1,"message":"461","line":17,"column":15,"nodeType":"409","messageId":"410","endLine":17,"endColumn":25},{"ruleId":"407","severity":1,"message":"463","line":1,"column":27,"nodeType":"409","messageId":"410","endLine":1,"endColumn":35},{"ruleId":"407","severity":1,"message":"464","line":3,"column":9,"nodeType":"409","messageId":"410","endLine":3,"endColumn":16},{"ruleId":"407","severity":1,"message":"465","line":5,"column":5,"nodeType":"409","messageId":"410","endLine":5,"endColumn":16},{"ruleId":"407","severity":1,"message":"442","line":10,"column":9,"nodeType":"409","messageId":"410","endLine":10,"endColumn":13},{"ruleId":"407","severity":1,"message":"466","line":11,"column":9,"nodeType":"409","messageId":"410","endLine":11,"endColumn":21},{"ruleId":"407","severity":1,"message":"415","line":11,"column":23,"nodeType":"409","messageId":"410","endLine":11,"endColumn":28},{"ruleId":"411","severity":1,"message":"444","line":23,"column":8,"nodeType":"413","endLine":23,"endColumn":10,"suggestions":"467"},{"ruleId":"407","severity":1,"message":"465","line":4,"column":5,"nodeType":"409","messageId":"410","endLine":4,"endColumn":16},{"ruleId":"407","severity":1,"message":"468","line":19,"column":18,"nodeType":"409","messageId":"410","endLine":19,"endColumn":25},{"ruleId":"407","severity":1,"message":"457","line":28,"column":13,"nodeType":"409","messageId":"410","endLine":28,"endColumn":19},{"ruleId":"407","severity":1,"message":"469","line":3,"column":5,"nodeType":"409","messageId":"410","endLine":3,"endColumn":14},{"ruleId":"407","severity":1,"message":"470","line":4,"column":5,"nodeType":"409","messageId":"410","endLine":4,"endColumn":12},{"ruleId":"407","severity":1,"message":"471","line":4,"column":14,"nodeType":"409","messageId":"410","endLine":4,"endColumn":33},{"ruleId":"407","severity":1,"message":"472","line":5,"column":5,"nodeType":"409","messageId":"410","endLine":5,"endColumn":11},{"ruleId":"407","severity":1,"message":"447","line":5,"column":13,"nodeType":"409","messageId":"410","endLine":5,"endColumn":18},{"ruleId":"407","severity":1,"message":"473","line":5,"column":20,"nodeType":"409","messageId":"410","endLine":5,"endColumn":30},{"ruleId":"407","severity":1,"message":"474","line":6,"column":5,"nodeType":"409","messageId":"410","endLine":6,"endColumn":14},{"ruleId":"407","severity":1,"message":"475","line":7,"column":5,"nodeType":"409","messageId":"410","endLine":7,"endColumn":12},{"ruleId":"407","severity":1,"message":"476","line":8,"column":5,"nodeType":"409","messageId":"410","endLine":8,"endColumn":11},{"ruleId":"407","severity":1,"message":"477","line":9,"column":5,"nodeType":"409","messageId":"410","endLine":9,"endColumn":20},{"ruleId":"407","severity":1,"message":"478","line":10,"column":5,"nodeType":"409","messageId":"410","endLine":10,"endColumn":15},{"ruleId":"407","severity":1,"message":"479","line":13,"column":9,"nodeType":"409","messageId":"410","endLine":13,"endColumn":17},{"ruleId":"407","severity":1,"message":"480","line":14,"column":17,"nodeType":"409","messageId":"410","endLine":14,"endColumn":28},{"ruleId":"407","severity":1,"message":"481","line":16,"column":5,"nodeType":"409","messageId":"410","endLine":16,"endColumn":16},{"ruleId":"407","severity":1,"message":"432","line":18,"column":5,"nodeType":"409","messageId":"410","endLine":18,"endColumn":25},{"ruleId":"407","severity":1,"message":"433","line":19,"column":5,"nodeType":"409","messageId":"410","endLine":19,"endColumn":36},{"ruleId":"407","severity":1,"message":"434","line":19,"column":38,"nodeType":"409","messageId":"410","endLine":19,"endColumn":58},{"ruleId":"407","severity":1,"message":"482","line":19,"column":72,"nodeType":"409","messageId":"410","endLine":19,"endColumn":92},{"ruleId":"407","severity":1,"message":"442","line":21,"column":9,"nodeType":"409","messageId":"410","endLine":21,"endColumn":13},{"ruleId":"407","severity":1,"message":"483","line":23,"column":8,"nodeType":"409","messageId":"410","endLine":23,"endColumn":23},{"ruleId":"407","severity":1,"message":"435","line":27,"column":8,"nodeType":"409","messageId":"410","endLine":27,"endColumn":15},{"ruleId":"407","severity":1,"message":"484","line":34,"column":11,"nodeType":"409","messageId":"410","endLine":34,"endColumn":23},{"ruleId":"407","severity":1,"message":"421","line":35,"column":11,"nodeType":"409","messageId":"410","endLine":35,"endColumn":20},{"ruleId":"407","severity":1,"message":"485","line":36,"column":11,"nodeType":"409","messageId":"410","endLine":36,"endColumn":24},{"ruleId":"411","severity":1,"message":"412","line":52,"column":8,"nodeType":"413","endLine":52,"endColumn":21,"suggestions":"486"},{"ruleId":"407","severity":1,"message":"481","line":4,"column":9,"nodeType":"409","messageId":"410","endLine":4,"endColumn":20},{"ruleId":"407","severity":1,"message":"487","line":7,"column":8,"nodeType":"409","messageId":"410","endLine":7,"endColumn":23},{"ruleId":"411","severity":1,"message":"429","line":22,"column":8,"nodeType":"413","endLine":22,"endColumn":47,"suggestions":"488"},{"ruleId":"411","severity":1,"message":"412","line":25,"column":8,"nodeType":"413","endLine":25,"endColumn":10,"suggestions":"489"},{"ruleId":"407","severity":1,"message":"457","line":17,"column":13,"nodeType":"409","messageId":"410","endLine":17,"endColumn":19},{"ruleId":"407","severity":1,"message":"490","line":1,"column":20,"nodeType":"409","messageId":"410","endLine":1,"endColumn":29},{"ruleId":"407","severity":1,"message":"463","line":1,"column":31,"nodeType":"409","messageId":"410","endLine":1,"endColumn":39},{"ruleId":"407","severity":1,"message":"442","line":3,"column":9,"nodeType":"409","messageId":"410","endLine":3,"endColumn":13},{"ruleId":"407","severity":1,"message":"491","line":4,"column":8,"nodeType":"409","messageId":"410","endLine":4,"endColumn":16},{"ruleId":"407","severity":1,"message":"420","line":5,"column":22,"nodeType":"409","messageId":"410","endLine":5,"endColumn":37},{"ruleId":"407","severity":1,"message":"492","line":3,"column":21,"nodeType":"409","messageId":"410","endLine":3,"endColumn":33},{"ruleId":"407","severity":1,"message":"469","line":6,"column":9,"nodeType":"409","messageId":"410","endLine":6,"endColumn":18},{"ruleId":"407","severity":1,"message":"470","line":6,"column":20,"nodeType":"409","messageId":"410","endLine":6,"endColumn":27},{"ruleId":"407","severity":1,"message":"493","line":7,"column":9,"nodeType":"409","messageId":"410","endLine":7,"endColumn":24},{"ruleId":"411","severity":1,"message":"412","line":17,"column":8,"nodeType":"413","endLine":17,"endColumn":11,"suggestions":"494"},{"ruleId":"411","severity":1,"message":"495","line":35,"column":8,"nodeType":"413","endLine":35,"endColumn":29,"suggestions":"496"},{"ruleId":"407","severity":1,"message":"457","line":19,"column":13,"nodeType":"409","messageId":"410","endLine":19,"endColumn":19},{"ruleId":"411","severity":1,"message":"497","line":34,"column":8,"nodeType":"413","endLine":34,"endColumn":24,"suggestions":"498"},{"ruleId":"407","severity":1,"message":"420","line":5,"column":9,"nodeType":"409","messageId":"410","endLine":5,"endColumn":24},{"ruleId":"407","severity":1,"message":"421","line":9,"column":19,"nodeType":"409","messageId":"410","endLine":9,"endColumn":28},{"ruleId":"407","severity":1,"message":"457","line":9,"column":30,"nodeType":"409","messageId":"410","endLine":9,"endColumn":36},{"ruleId":"411","severity":1,"message":"412","line":13,"column":8,"nodeType":"413","endLine":13,"endColumn":11,"suggestions":"499"},{"ruleId":"407","severity":1,"message":"419","line":2,"column":9,"nodeType":"409","messageId":"410","endLine":2,"endColumn":29},{"ruleId":"407","severity":1,"message":"416","line":8,"column":50,"nodeType":"409","messageId":"410","endLine":8,"endColumn":70},{"ruleId":"407","severity":1,"message":"417","line":8,"column":72,"nodeType":"409","messageId":"410","endLine":8,"endColumn":90},{"ruleId":"500","severity":1,"message":"501","line":216,"column":79,"nodeType":"502","messageId":"503","endLine":216,"endColumn":81},{"ruleId":"407","severity":1,"message":"463","line":1,"column":27,"nodeType":"409","messageId":"410","endLine":1,"endColumn":35},{"ruleId":"407","severity":1,"message":"464","line":5,"column":9,"nodeType":"409","messageId":"410","endLine":5,"endColumn":16},{"ruleId":"407","severity":1,"message":"504","line":6,"column":8,"nodeType":"409","messageId":"410","endLine":6,"endColumn":14},{"ruleId":"411","severity":1,"message":"412","line":16,"column":8,"nodeType":"413","endLine":16,"endColumn":11,"suggestions":"505"},{"ruleId":"411","severity":1,"message":"412","line":19,"column":8,"nodeType":"413","endLine":19,"endColumn":12,"suggestions":"506"},{"ruleId":"407","severity":1,"message":"457","line":22,"column":13,"nodeType":"409","messageId":"410","endLine":22,"endColumn":19},{"ruleId":"500","severity":1,"message":"507","line":47,"column":92,"nodeType":"502","messageId":"503","endLine":47,"endColumn":94},{"ruleId":"411","severity":1,"message":"508","line":52,"column":8,"nodeType":"413","endLine":52,"endColumn":14,"suggestions":"509"},{"ruleId":"407","severity":1,"message":"510","line":2,"column":9,"nodeType":"409","messageId":"410","endLine":2,"endColumn":22},{"ruleId":"407","severity":1,"message":"421","line":15,"column":12,"nodeType":"409","messageId":"410","endLine":15,"endColumn":21},{"ruleId":"407","severity":1,"message":"457","line":15,"column":22,"nodeType":"409","messageId":"410","endLine":15,"endColumn":28},{"ruleId":"411","severity":1,"message":"429","line":24,"column":8,"nodeType":"413","endLine":24,"endColumn":61,"suggestions":"511"},{"ruleId":"411","severity":1,"message":"412","line":27,"column":8,"nodeType":"413","endLine":27,"endColumn":10,"suggestions":"512"},{"ruleId":"407","severity":1,"message":"513","line":2,"column":9,"nodeType":"409","messageId":"410","endLine":2,"endColumn":18},{"ruleId":"407","severity":1,"message":"514","line":3,"column":8,"nodeType":"409","messageId":"410","endLine":3,"endColumn":24},{"ruleId":"407","severity":1,"message":"493","line":4,"column":9,"nodeType":"409","messageId":"410","endLine":4,"endColumn":24},{"ruleId":"407","severity":1,"message":"421","line":11,"column":24,"nodeType":"409","messageId":"410","endLine":11,"endColumn":33},{"ruleId":"407","severity":1,"message":"457","line":11,"column":35,"nodeType":"409","messageId":"410","endLine":11,"endColumn":41},{"ruleId":"411","severity":1,"message":"412","line":15,"column":8,"nodeType":"413","endLine":15,"endColumn":11,"suggestions":"515"},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["516"],"'IWare' is defined but never used.","'SHOW_WARNING_MESSAGE' is assigned a value but never used.","'DEACTIVATE_MESSAGE' is assigned a value but never used.","'r' is assigned a value but never used.","'authorizationReducer' is defined but never used.","'fetch_all_wares' is defined but never used.","'isLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'countOfDiscountRecords', 'countOfNoveltyRecords', 'dispatch', and 'isAuthorized'. Either include them or remove the dependency array.",["517"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isAuthorized'. Either include them or remove the dependency array.",["518"],"'login' is defined but never used.","'fetch_novelty_wares' is defined but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetch_all'. Either include it or remove the dependency array.",["519"],["520"],"'fetch_discount_wares' is defined but never used.","'fetch_discount_wares_authorized' is defined but never used.","'fetch_favorite_wares' is defined but never used.","'Loading' is defined but never used.",["521"],["522"],"'wareReducer' is defined but never used.","'navigate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'liked'. Either include it or remove the dependency array. You can also do a functional update 'setLiked(l => ...)' if you only need 'liked' in the 'setLiked' call.",["523"],"'Link' is defined but never used.","'PencilSquare' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["524"],["525"],"'Heart' is defined but never used.","'fetch_all_wares_with_favorites' is defined but never used.",["526"],["527"],"'Button' is defined but never used.","'Basket' is defined but never used.","React Hook useEffect has missing dependencies: 'cartWares.length' and 'dispatch'. Either include them or remove the dependency array.",["528"],["529"],"'base' is defined but never used.","'errors' is assigned a value but never used.",["530"],"'fetch_all_brands' is defined but never used.","'fetch_all_categories' is defined but never used.","'statusCode' is assigned a value but never used.","'create_new_category' is defined but never used.","'useState' is defined but never used.","'useForm' is defined but never used.","'create_ware' is defined but never used.","'IGetByIdWare' is defined but never used.",["531"],"'setWare' is assigned a value but never used.","'CaretDown' is defined but never used.","'CaretUp' is defined but never used.","'EmojiExpressionless' is defined but never used.","'Google' is defined but never used.","'Heartbreak' is defined but never used.","'HeartFill' is defined but never used.","'Mailbox' is defined but never used.","'Person' is defined but never used.","'PersonBadgeFill' is defined but never used.","'PlusCircle' is defined but never used.","'sign_out' is defined but never used.","'ButtonGroup' is defined but never used.","'delete_ware' is defined but never used.","'remove_from_favorite' is defined but never used.","'CabinetFavorite' is defined but never used.","'waresLoading' is assigned a value but never used.","'favoriteWares' is assigned a value but never used.",["532"],"'DeleteWareModel' is defined but never used.",["533"],["534"],"'useEffect' is defined but never used.","'ReactDOM' is defined but never used.","'update_order' is defined but never used.","'fetch_all_users' is defined but never used.",["535"],"React Hook useEffect has a missing dependency: 'fetchOrderHandler'. Either include it or remove the dependency array.",["536"],"React Hook useEffect has missing dependencies: 'deactivateMessage' and 'pushMessage'. Either include them or remove the dependency array.",["537"],["538"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Select' is defined but never used.",["539"],["540"],"Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'permissionsList'. Either include it or remove the dependency array.",["541"],"'refresh_token' is defined but never used.",["542"],["543"],"'Accordion' is defined but never used.","'CabinetOrderItem' is defined but never used.",["544"],{"desc":"545","fix":"546"},{"desc":"547","fix":"548"},{"desc":"547","fix":"549"},{"desc":"550","fix":"551"},{"desc":"545","fix":"552"},{"desc":"550","fix":"553"},{"desc":"545","fix":"554"},{"desc":"555","fix":"556"},{"desc":"557","fix":"558"},{"desc":"557","fix":"559"},{"desc":"545","fix":"560"},{"desc":"561","fix":"562"},{"desc":"563","fix":"564"},{"desc":"561","fix":"565"},{"desc":"545","fix":"566"},{"desc":"557","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},{"desc":"545","fix":"572"},{"desc":"545","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"545","fix":"578"},{"desc":"545","fix":"579"},{"desc":"557","fix":"580"},{"desc":"581","fix":"582"},{"desc":"550","fix":"583"},{"desc":"545","fix":"584"},{"desc":"545","fix":"585"},"Update the dependencies array to be: [dispatch]",{"range":"586","text":"587"},"Update the dependencies array to be: [countOfDiscountRecords, countOfNoveltyRecords, dispatch, isAuthorized]",{"range":"588","text":"589"},{"range":"590","text":"589"},"Update the dependencies array to be: [sortField, categoryId, isAuthorized, countOfRecords, fetch_all]",{"range":"591","text":"592"},{"range":"593","text":"587"},{"range":"594","text":"592"},{"range":"595","text":"587"},"Update the dependencies array to be: [item.isFavorite, liked]",{"range":"596","text":"597"},"Update the dependencies array to be: [dispatch, id]",{"range":"598","text":"599"},{"range":"600","text":"599"},{"range":"601","text":"587"},"Update the dependencies array to be: [dispatch, show]",{"range":"602","text":"603"},"Update the dependencies array to be: [cartWares.length, dispatch]",{"range":"604","text":"605"},{"range":"606","text":"603"},{"range":"607","text":"587"},{"range":"608","text":"599"},"Update the dependencies array to be: [currentPage, dispatch]",{"range":"609","text":"610"},"Update the dependencies array to be: [sortField, categoryId, countOfRecords, fetch_all]",{"range":"611","text":"612"},{"range":"613","text":"587"},{"range":"614","text":"587"},"Update the dependencies array to be: [fetchOrderHandler, filter, orderNumber]",{"range":"615","text":"616"},"Update the dependencies array to be: [activeMessages, deactivateMessage, pushMessage]",{"range":"617","text":"618"},{"range":"619","text":"587"},{"range":"620","text":"587"},{"range":"621","text":"599"},"Update the dependencies array to be: [permissionsList, user]",{"range":"622","text":"623"},{"range":"624","text":"592"},{"range":"625","text":"587"},{"range":"626","text":"587"},[1271,1274],"[dispatch]",[1288,1291],"[countOfDiscountRecords, countOfNoveltyRecords, dispatch, isAuthorized]",[1668,1715],[1029,1082],"[sortField, categoryId, isAuthorized, countOfRecords, fetch_all]",[1157,1159],[1125,1179],[1254,1256],[1056,1073],"[item.isFavorite, liked]",[881,883],"[dispatch, id]",[1017,1021],[973,975],[1050,1056],"[dispatch, show]",[1210,1212],"[cartWares.length, dispatch]",[1283,1289],[2523,2525],[799,801],[2055,2068],"[currentPage, dispatch]",[993,1032],"[sortField, categoryId, countOfRecords, fetch_all]",[1107,1109],[868,871],[1219,1240],"[fetchOrderHandler, filter, orderNumber]",[1302,1318],"[activeMessages, deactivateMessage, pushMessage]",[546,549],[672,675],[756,760],[2128,2134],"[permissionsList, user]",[1088,1141],[1216,1218],[683,686]]